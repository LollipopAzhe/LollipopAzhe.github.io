<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/10/hello-world/"/>
      <url>/2022/10/10/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++期末复习题</title>
      <link href="/2021/11/24/study/c/exam/"/>
      <url>/2021/11/24/study/c/exam/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一章-引言"><a href="#第一章-引言" class="headerlink" title="第一章 引言"></a>第一章 引言</h1><ul><li><p>选择题</p><ol><li><p>C++规定，在一个源程序中main函数的位置是在    {.quiz}</p><ul><li>必须在最前面</li><li>必须在系统调用的库函数的后面</li><li>可以在任意位置                         {.correct}</li><li>必须在最后面<br>  {.options}</li></ul></li><li><p>以下叙述正确的是 {.quiz}</p><ul><li>在C++程序中，main函数必须位于程序的最前面</li><li>C++程序的每行中只能写一条语句</li><li>C++语言本身没有输入输出语句                 {.correct}</li><li>在对一个C程序进行编译的过程中，可发现注释中的拼写错误<br>  {.options}</li></ul></li><li><p>一个C程序的执行是从（   ）。{.quiz}</p><ul><li>本程序的main函数开始，到本程序文件的最后一个函数结束</li><li>本程序文件的第一个函数开始，到本程序文件的最后一个函数结束</li><li>本程序的main函数开始，到main函数结束    {.correct}</li><li>本程序文件的第一个函数开始，到本程序的main函数结束<br>  {.options}</li></ul></li><li><p>下列选项中，不能用作标识符的是（   ）{.quiz}</p><ul><li>2_int       {.correct}</li><li>_1_2</li><li>int_2_</li><li><code>_1234_</code><br>  {.options}</li></ul></li><li><p>以下叙述不正确的是（   ）。{.quiz}</p><ul><li>一个C++源程序可由一个或多个函数组成</li><li>一个C++源程序必须包含一个main函数</li><li>C++程序的基本组成单位是函数</li><li>在C++程序中，注释说明只能位于一条语句的后面       {.correct}<br>  {.options}</li></ul></li></ol></li><li><p>填空题</p><ol><li><p>短整型十进制数-1的补码形式化为十六进制是[FFFF]{.gap}。       {.quiz .fill}</p></li><li><p>一个C++源程序至少应包括一个[主函数]{.gap}。          {.quiz .fill}</p></li><li><p>短整型十进制数-1的二进制补码形式是[1111111111111111]{.gap}。           {.quiz .fill}</p></li><li><p>十进制数53.375转换为二进制数二进制数是[110101.011]{.gap}。           {.quiz .fill}</p></li><li><p>短整型十进制数-2的15次方的二进制补码形式是[1000000000000000]{.gap}。           {.quiz .fill}</p></li><li><p>C++源程序的基本单位是[函数]{.gap}。                   {.quiz .fill}</p></li><li><p>短整型十进制数-1的补码形式化为八进制是[177777]{.gap}。      {.quiz .fill}</p></li><li><p>在C++源程序中，一个变量代表[特定的存储单元]{.gap}。     {.quiz .fill}</p></li><li><p>C++中的标识符只能由三种字符组成，它们是[字母]{.gap},[数字]{.gap},[下划线]{.gap}。       {.quiz .fill}</p></li><li><p>C++中，实型变量分为[单精度浮点数]{.gap},[双精度浮点数]{.gap}两种类型。           {.quiz .fill}</p></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java期末复习题</title>
      <link href="/2021/11/22/study/java/exam/"/>
      <url>/2021/11/22/study/java/exam/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一章-Java开发入门"><a href="#第一章-Java开发入门" class="headerlink" title="第一章 Java开发入门"></a>第一章 Java开发入门</h1><ul><li><p>填空题</p><ol><li><p>Java的三大体系分别是 [Java SE]{.gap}、 [Java EE]{.gap}和 [Java ME]{.gap}。 {.quiz .fill}</p></li><li><p>Java程序的运行环境简称为 [JDK]{.gap}  {.quiz .fill}</p></li><li><p>编译Java程序需要使用 [javac]{.gap}命令 {.quiz .fill}</p></li><li><p>javac.exe和java.exe两个可执行程序存放在JDK安装目录的 [bin]{.gap}目录下。 {.quiz .fill}</p></li><li><p>[PATH]{.gap}环境变量用来存储Java的编译和运行工具所在的路径，而 [CLASSPATH]{.gap}环境变量则用来保存Java虚拟机要运行的<code>.class</code>文件 {.quiz .fill}</p></li></ol></li><li><p>判断题</p><ol><li><p>通过Java虚拟机可以在不同的操作系统上运行Java程序，从而实现跨平台特性。 {.quiz .true}</p></li><li><p>JRE中包含了Java基础类库、JVM和开发工具。 {.quiz .false}</p></li><li><p>Java中的包是专门用来存放类的，通常功能相同的类存放在相同的包中。 {.quiz .true}</p></li><li><p>java.util包含Java中大量工具类、集合类等，例如Arrays、List、Set等。 {.quiz .true}</p></li><li><p>Java语言和C语言一样，是面向过程的语言。 {.quiz .true}</p></li></ol></li><li><p>选择题</p><ol><li><p>以下选项中，哪些属于JDK工具？ {.quiz .multi} </p><ul><li>Java编译器        {.correct}</li><li>Java运行工具      {.correct}</li><li>Java文档生成器    {.correct}</li><li>Java打包工具      {.correct}<br>  {.options}</li></ul></li><li><p>Java属于以下哪种语言？ {.quiz}</p><ul><li>机器语言</li><li>汇编语言</li><li>高级语言      {.correct}</li><li>以上都不对<br>  {.options}</li></ul></li><li><p>下面哪种类型的文件可以在Java虚拟机中运行？   {.quiz}</p><ul><li>.java</li><li>.jre</li><li>.exe</li><li>.class  {.correct}<br>  {.options}</li></ul></li><li><p>安装好JDK后，在其目录下有许多exe可执行文件，其中java.exe命令的作用是以下哪一种？ {.quiz}</p><ul><li>Java文档制作工具</li><li>Java解释器</li><li>Java编译器</li><li>Java启动器        {.correct}<br>  {.options}</li></ul></li><li><p>如果jdk的安装路径为<code>d:\jdk</code>，若想在命令窗口中任何当前路径下，都可以直接使用<code>javac</code>和<code>java</code>命令，需要将环境变量path设置为以下哪个选项？ {.quiz}</p><ul><li>d:\jdk;</li><li>d:\jdk\bin;       {.correct}</li><li>d:\jre\bin;</li><li>d:\jre;<br>  {.options}</li></ul></li></ol></li><li><p>简答题</p><ol><li><p>简述Java的特点。{.quiz .fill}</p><blockquote><p>面向对象、跨平台性、健壮性、安全性、可移植性、多线程性、动态性等。</p></blockquote></li><li><p>简述JDK和JRE的区别 {.quiz .fill}</p><blockquote><p>JDK是java开发工具包,里面包含了编译器、调试器和其他工具,提供了java开发环境和运行环境(JDK中也包含JRE,因为编写好的程序也要测试运行)<br> JRE是运行环境,里面包含jvm和基础类库。</p></blockquote><p> <img src="https://z3.ax1x.com/2021/11/22/oSnZ6S.png"></p></li><li><p>简述Java的运行机制 {.quiz .fill}</p><blockquote><p>Java程序运行时,必须经过编译(java)和运行(javac)两个步骤。首先将后缀名为.java的源文件进行编译,生成后缀名为.class的字节码文件,然后Java虚拟机将字节码文件进行解释执行,并将结果显示出来。</p></blockquote><p> <img src="https://z3.ax1x.com/2021/11/22/oSnpeH.png"></p></li></ol></li></ul><h1 id="第二章-Java编程基础"><a href="#第二章-Java编程基础" class="headerlink" title="第二章 Java编程基础"></a>第二章 Java编程基础</h1><ul><li><p>填空题</p><ol><li><p>布尔常量即布尔类型的两个值，分别是[true]{.gap}和[false]{.gap}。  {.quiz .fill}</p></li><li><p>Java中的变量可分为两种数据类型，分别是[基本数据类型]{.gap}和[引用数据类型]{.gap}。 {.quiz .fill}</p></li><li><p>在逻辑运算符中，运算符[&amp;]{.gap}和{<code>&amp;&amp;</code>}{.gap}用于表示逻辑与，[|]{.gap}和[||]{.gap}表示逻辑或。 {.quiz .fill}</p></li><li><p>若<code>int a = 2;a+=3;</code>执行后，变量a的值为[5]{.gap}。 {.quiz .fill}</p></li><li><p>若<code>int a[3][2]=&#123;&#123;123，345&#125;,&#123;34，56&#125;,&#123;34，56&#125;&#125;</code>，则<code>a[2][1]</code>&#x3D; [34]{.gap}。{.quiz .fill}</p></li></ol></li><li><p>判断题</p><ol><li><p>Java语言不区分大小写。                   {.quiz .false}</p></li><li><p>0xC5表示一个十六进制整数。               {.quiz .true}</p></li><li><p>continue语句只能用于循环语句中，它的作用是跳出循环。         {.quiz .false}</p></li><li><p>“&#x2F;<em>…</em>&#x2F;“中可以嵌套”&#x2F;&#x2F;“注释，但不能嵌套”&#x2F;<em>…</em>&#x2F;“注释                      {.quiz .true}</p></li><li><p>-5%3的运算结果是2。  {.quiz .false}</p><blockquote><p>[在进行取模运算时，运算结果的正负取决于%左边的数，与%右边的数无关。]{.mistake}</p></blockquote></li></ol></li><li><p>选择题</p><ol><li><p>以下选项中，哪些属于合法的标识符？   {.quiz .multi}</p><ul><li>Hello_World           {.correct}</li><li>class</li><li>123username       </li><li>username123           {.correct}<br>  {.options}<blockquote><p>标识符由字母、数字、下划线和美元符号组成，不能以数字开头，不能是关键字。</p></blockquote></li></ul></li><li><p>以下关于变量的说法错误的是？ {.quiz}</p><ul><li>变量名必须是一个有效的标识符</li><li>变量在定义时可以没有初始值</li><li>变量一旦被定义，在程序中的任何位置都可以被访问    {.correct}</li><li>在程序中，可以将一个byte类型的值赋给一个int类型的变量，不需要特殊声明。<br>  {.options}</li></ul></li><li><p>假设int x &#x3D; 2;,三元表达式x&gt;0?x+1:5 的运行结果是 {.quiz}</p><ul><li>0</li><li>2</li><li>3         {.correct}</li><li>5<br>  {.options}</li></ul></li><li><p>以下哪个选项可以正确创建一个长度为3的二维数组 {.quiz}</p><ul><li>new int[2][3];</li><li>new int[3][];     {.correct}</li><li>new int[][3];</li><li>以上答案都不对<br>  {.options}</li></ul></li><li><p>请先阅读下面的代码 {.quiz}</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> y=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(x%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    y++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    y--;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;y=&quot;</span>+y);</span><br></pre></td></tr></table></figure><p> 上面一段程序运行结束时，变量y的值为下列哪一项？</p><ul><li>1             {.correct}</li><li>2</li><li>3</li><li>0<br>  {.options}</li></ul></li></ol></li><li><p>简答题</p><ol><li><p>请列举Java语言中的8中基本数据类型，并说明每种数据类型所占用的空间大小。 {.quiz .fill}</p><blockquote><p>byte    1字节<br> short   2字节<br> int       4字节<br> long    8字节<br> float    4字节<br> double 8字节<br> char     2字节<br> boolean  1字节  true&#x2F;false</p></blockquote></li><li><p>简述&amp;&amp;与&amp;的区别并举例说明。{.quiz .fill}</p><blockquote><p>如果使用 “ &amp; ”在表达式之间进行连接,那么无论任何情况,“ &amp; ”两边的表达式都会参与计算。如果使用“ &amp;&amp; ”进行连接,当“ &amp;&amp; ”左边的表达式为 false ,则不会执行其右边的表达式。例如定义 <code>int x = 2,y = 0; boolean b = x &lt; y &amp; x / 2 &gt; 0</code> 表达是会发生被 0 除异常,因为 x &#x2F; y 的表达式执行了。而 boolean b &#x3D; x &lt; y &amp; x &#x2F; 2 &gt; 0 是不会出现这种异常的,因为 x &lt; y 为 false ,表达式 x &#x2F; y 不会执行。</p></blockquote></li><li><p>简述跳转语句break和continue的作用和区别。{.quiz .fill}</p><blockquote><p>break语句可应用在switch和循环语句中,其作用是终止当前语句的执行,跳出switch选择结构或循环语句,执行后面的代码。而continue语句用于结束本次循环的执行,开始下一轮循环的执行操作。</p></blockquote></li></ol></li><li><p>编程题</p><ol><li>编写程序实现计算“1+3+5+7+···+99”的值。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetSum</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>&#123;        </span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i %<span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                sum +=i;</span><br><span class="line">            &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用冒泡排序算法对数组{25,24,12,76,101,96,28}进行排序。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mpSort</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">25</span>,<span class="number">24</span>,<span class="number">12</span>,<span class="number">76</span>,<span class="number">101</span>,<span class="number">96</span>,<span class="number">28</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;a.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;a.length-i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[j];</span><br><span class="line">                    a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">                    a[j+<span class="number">1</span>]=temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">            System.out.print(a[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h1 id="第三章-面向对象（上）"><a href="#第三章-面向对象（上）" class="headerlink" title="第三章 面向对象（上）"></a>第三章 面向对象（上）</h1><ul><li><p>填空题</p><ol><li><p>面向对象的三大特征是[封装]{.gap}、[继承]{.gap}和[多态]{.gap}。   {.quiz .fill}</p></li><li><p>在非静态成员方法中，可以使用关键字[this]{.gap}访问类的其他非静态成员。 {.quiz .fill}</p></li><li><p>在Java中，针对类、成员方法和属性提供了四种访问级别，分别是[private]{.gap}、[default]{.gap}、[protected]{.gap}和[public]{.gap}。  {.quiz .fill}</p></li><li><p>被ststic关键字修饰的成员变量被成为[静态变量]{.gap},它可以被该类所有的实例对象共享。  {.quiz .fill}</p></li><li><p>所谓类的封装是指在定义一个类时，将类中的属性私有化，即使用[private]{.gap}关键字来修饰。  {.quiz .fill}</p></li></ol></li><li><p>判断题</p><ol><li><p>在定义一个类的时候，如果类的成员被private所修饰，该成员不能在类的外部被直接访问。    {.quiz .true}</p></li><li><p>Java中的每个类都至少由一个构造方法，一个类中如果没有定义构造方法，系统会自动为这个类创造一个默认的构造方法。 {.quiz .true}</p></li><li><p>声明构造方法时，不能使用private关键字修饰。  {.quiz .true}</p></li><li><p>类中static修饰的变量或方法，可以使用类名或对象的引用变量访问。       {.quiz .true}</p></li><li><p>静态代码块会随着类对象的创建而执行。 {.quiz .false}</p></li></ol></li><li><p>选择题</p><ol><li><p>下面哪一个是正确的类的声明？             {.quiz}</p><ul><li>public void HH{…}</li><li>public class Move(){…}</li><li>public class void number{}</li><li>public class Car{…}             {.correct}<br>  {.options}</li></ul></li><li><p>下面对于构造方法的描述，正确的有哪些？       {.quiz .multi}</p><ul><li>方法名必须和类名相同                       {.correct}</li><li>方法名的前面没有返回值类型的声明               {.correct}</li><li>在方法中不能使用return语句返回一个值           {.correct}</li><li>当定义了带参数的构造方法，系统默认的不带参数的构造方法依然存在<br>  {.options}</li></ul></li><li><p>在Java中，针对类、常用方法和属性提供了4种访问级别，控制级别由小到大的顺序为      {.quiz}</p><ul><li>private、default、protected和public       {.correct}</li><li>default、private、protected和public</li><li>protected、default、private和public</li><li>protected、private、default和public<br>  {.options}</li></ul></li><li><p>阅读代码             {.quiz}</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法一被调用了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法二被调用了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">(<span class="type">boolean</span> b)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法三被调用了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 上面程序的运行结果为</p><ul><li>构造方法一被调用了</li><li>构造方法一被调用了</li><li>构造方法一被调用了</li><li>以上三个选项之和          {.correct}<br>  {.options}</li></ul></li><li><p>以下关于static关键字的说法正确的是       {.quiz .multi}</p><ul><li>static关键字可以修饰类</li><li>static关键字可以修饰成员          {.correct}</li><li>static关键字可以修饰所有的变量      </li><li>static关键字可以修饰代码块        {.correct}<br>  {.options}</li></ul></li></ol></li><li><p>简答题</p><ol><li><p>简述构造方法和普通的成员方法有什么区别       {.quiz .fill}</p><blockquote><p>构造方法是类的一个特殊成员，它会在类实例化对象时被自动调用，而普通方法只有在使用的时候才会被调用。在定义构造方法时，要求方法名与类名相同，在方法名前没有返回值类型的声明，在方法中不能使用return语句返回一个值。<br> 或者如下：<br> A:格式区别<br> 构造方法和类名相同，并且没有返回类型，也没有返回值。普通成员方法可以任意起名，必须有返回类型，可以没有返回值。<br> B:作用区别<br> 构造方法用于创建对象，并进行初始化值。普通成员方法是用于完成特定功能的。<br> C:调用区别<br> 构造方法是在创建对象时被调用的，一个对象建立，只调用一次相应构造函数。普通成员方法是由创建好的对象调用，可以调用多次</p></blockquote></li><li><p>简述Java中构造方法须同时满足的条件           {.quiz .fill}</p><blockquote><p>方法名与类名相同；<br> 在方法名的前面没有返回值类型的声明；<br> 在方法中不能使用return语句返回一个值，但是可以单独写return语句来作为方法的结束。</p></blockquote></li><li><p>简述Java面向对象特性                        {.quiz .fill}</p><blockquote><p>封装：是将对象的属性和行为封装起来,不需要让外界知道具体实现细节;<br> 继承：是可以在无需重新编写原有类的情况下,对原有类的功能进行扩展;<br> 多态：指的是在一个类中定义的属性和功能被其他类继承后,当把子类对象直接赋值给父类引用变量时,相同引用类型的变量调用同一个方法所呈现出的多种不同行为特性。</p></blockquote></li></ol></li><li><p>编程题</p><ol><li>请按照以下要求设计一个学生类Student，并进行测试。要求如下：<br> 1）Student类中包含姓名、成绩两个属性<br> 2）分别给这两个属性定义两个方法，一个方法用于设置值，另一个方法用于获取值；<br> 3）Student类中定义一个无参的构造方法和一个接收两个参数的构造方法，两个参数分别为姓名和成绩属性赋值；<br> 4）在测试类中创建两个Student对象，一个使用无参的构造方法，然后调用方法给姓名和成绩赋值，一个使用有参的构造方法，在构造方法中给姓名和成绩赋值。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, score=&quot;</span> + score +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(<span class="type">int</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student1.setName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        student1.setScore(<span class="number">100</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小红&quot;</span>,<span class="number">99</span>);</span><br><span class="line">        System.out.println(student1);</span><br><span class="line">        System.out.println(student2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>定义一个这样的数列：0、1、1、2、3、5、8、13、21、……（斐波那契数列）。使用递归方法获取第n个数的数值。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入第几项n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">    System.out.println(Fibonacci(n));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">Fibonacci</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Fibonacci(n-<span class="number">1</span>)+Fibonacci(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h1 id="第四章-面向对象（下）"><a href="#第四章-面向对象（下）" class="headerlink" title="第四章 面向对象（下）"></a>第四章 面向对象（下）</h1><ul><li><p>选择题</p><ol><li><p>在类的继承关系中，需要遵循以下哪个继承原则？ {.quiz}</p><ul><li>多重</li><li>单一      {.correct}</li><li>双重</li><li>不能继承<br>  {.options}</li></ul></li><li><p>类中的一个成员方法被下面哪个修饰符修饰，该方法只能在本类被访问？{.quiz}</p><ul><li>public</li><li>protected</li><li>private       {.correct}</li><li>default<br>  {.options}</li></ul></li><li><p>在Java中，要想让一个类继承另一个类，可以使用以下哪个关键字？ {.quiz}</p><ul><li>inherits</li><li>implements</li><li>extends               {.correct}</li><li>modifies<br>  {.options}</li></ul></li><li><p>已知类的继承关系如下：        {.quiz}</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Employee</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Director</span> <span class="keyword">extends</span> <span class="title class_">Employee</span>;</span><br></pre></td></tr></table></figure><p>  则以下语句能通过编译的有哪些？</p></li></ol><ul><li>Employee e&#x3D;new Manager();           {.correct}</li><li>Director d&#x3D;new Manager(); </li><li>Director d&#x3D;new Employee();<br>  s- Manager m&#x3D;new Director();<br>  {.options}</li></ul><ol start="5"><li>关于super关键字以下说法哪些是正确的？        {.quiz .multi}<ul><li>super关键字可以调用父类的构造方法                {.correct}</li><li>super关键字可以调用父类的普通方法                    {.correct}</li><li>super与this不能同时存在于同一个构造方法中            {.correct}</li><li>super与this可以同时存在于同一个构造方法中<br>  {.options}</li></ul></li></ol></li><li><p>填空题</p><ol><li><p>一个类如果实现一个接口，那么它就需要实现接口中定义的全部[方法]{.gap}，否则该类就必须定义成[抽象类]{.gap}。{.quiz .fill}</p></li><li><p>一个类可以从其它的类派生出来，派生出来的类称为[子类]{.gap}，用于派生的类称为[父类]{.gap}或者[基类]{.gap}。<br>  {.quiz .fill}</p></li><li><p>定义一个Java类时，如果前面加使用[final]{.gap}关键字修饰，那么该类不可以被继承。 {.quiz .fill}</p></li><li><p>在Java语言中，所有的类都直接或间接继承自[Object]{.gap}类。   {.quiz .fill}</p></li><li><p>一个Lambda表达式由三个部分组成，分别为[参数列表]{.gap}、[“-&gt;”]{.gap}和[表达式主体]{.gap}。 {.quiz .fill}</p></li></ol></li><li><p>判断题</p><ol><li><p>抽象方法必须定义在抽象类中，所以抽象类中的方法都是抽象方法。{.quiz .false}</p><blockquote><p>抽象方法必须定义在抽象类中，但抽象类中可以不定义方法。</p></blockquote></li><li><p>Java中被final关键字修饰的变量，不能被重新赋值。          {.quiz .true}</p></li><li><p>不存在继承关系的情况下，也可以实现方法重写。     {.quiz .false}</p></li><li><p>函数式接口在Java中是指有且仅有一个抽象方法的接口。        {.quiz .true}</p></li><li><p>接口中只能定义常量和抽象方法。           {.quiz .false}</p><blockquote><p>还有默认方法，静态方法</p></blockquote></li></ol></li><li><p>简答题</p><ol><li><p>简述什么是方法重写。{.quiz .fill}</p><blockquote><p>在继承关系中，子类的方法与父类的某一方法具有相同的方法名、返回类型和参数列表，则称子类的该方法重写(覆盖)父类的方法。</p></blockquote></li><li><p>简述什么是多态。{.quiz .fill}</p><blockquote><p>多态意味着一个对象有着多种形态，可以在特定的情况下，表现不同的状态，从而对应着不同的属性和方法。简单的说，多态就是使用父类类型的变量引用子类对象，根据被引用子类对象的特性，程序会得到不同的运行效果。</p></blockquote></li><li><p>简述抽象类和接口的区别。{.quiz .fill}</p><blockquote><p>在Java中，使用abstract关键字修饰的类称之为抽象类。抽象类是不能被实例化的，通常需要写一个子类来继承抽象类，同时实例化子类来获得该类的对象。抽象类通常用于表示一种抽象的概念。<br> 接口可以说是一种特殊的抽象类，接口中只能定义常量、抽象方法、静态方法和默认方法。由于接口的特殊性，在定义时需要使用interface关键字。</p></blockquote></li></ol></li><li><p>程序题</p><ol><li>设计一个学生类Student和它的一个子类Undergraduate。要求如下：<br> 1）Student类有name、和age属性，一个包含两个参数的构造方法，用于给name和age属性赋值，一个show()方法打印Student的属性信息。<br> 2）本科生类Undergraduate增加一个degree（学位）属性。有一个包含三个参数的构造方法，前两个参数用于给继承的name和age属性赋值，第三个参数给degree专业赋值，一个show()方法用于打印Undergraduate的属性信息。<br> 3）在测试类中分别创建Student对象和Undergraduate对象，调用它们的show()。<br> 得分： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span>+name+<span class="string">&quot; age: &quot;</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnderGraduate</span> <span class="keyword">extends</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String degree;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UnderGraduate</span><span class="params">(String name,<span class="type">int</span> age,String degree)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.degree=degree;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span>+name+<span class="string">&quot; age: &quot;</span>+age+<span class="string">&quot; degree: &quot;</span>+degree);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">16</span>);</span><br><span class="line">    student.show();</span><br><span class="line">    <span class="type">UnderGraduate</span> <span class="variable">underGraduate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnderGraduate</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">20</span>, <span class="string">&quot;bechalor&quot;</span>);</span><br><span class="line">    underGraduate.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>设计一个Shape接口和它的两个实现类Square和Circle。要求如下：<br> 1）Shape接口中有一个抽象方法area()，方法接收有一个double类型的参数，返回一个double类型的结果。<br> 2）Square和Circle中实现了Shape接口的area()抽象方法，分别求正方形和圆形的面积并返回。<br> 3）在测试类中创建Square和Circle对象，计算边长为2的正方形面积和半径为3的圆形面积。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">area</span><span class="params">(<span class="type">double</span> givenValue)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">implements</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">(<span class="type">double</span> sideLength)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sideLength*sideLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">(<span class="type">double</span> r)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI*r*r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">square</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">circle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">        System.out.println(square.area(<span class="number">2</span>));</span><br><span class="line">        System.out.println(circle.area(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h1 id="第五章-Java中的常用类"><a href="#第五章-Java中的常用类" class="headerlink" title="第五章 Java中的常用类"></a>第五章 Java中的常用类</h1><ul><li><p>选择题</p><ol><li><p>以下都是Math类的常用方法，其中用于计算绝对值的方法是哪个？   {.quiz}</p><ul><li>ceil()  </li><li>floor() </li><li>abs()         {.correct}</li><li>random()<br>  {.options}</li></ul></li><li><p>String s &#x3D; “abcdedcba”;则s.substring(3，4)返回的字符串是以下选项中的哪个？    {.quiz}</p><ul><li>cd</li><li>de</li><li>d          {.correct}</li><li>e<br>  {.options}</li></ul></li><li><p>要产生[20，999]之间的随机整数可以使用以下哪个表达式？    {.quiz}</p><ul><li>(int)(20+Math.random()*97)</li><li>20+(int)(Math.random()*980)   {.correct}</li><li>(int)Math.random()*999</li><li>20+(int)Math.random()*980<br>  {.options}</li></ul></li><li><p>先阅读下面的程序片段：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str1=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;java&quot;</span>); </span><br><span class="line">String str2=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;java&quot;</span>); </span><br><span class="line">StringBuffer str3=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;java&quot;</span>);</span><br></pre></td></tr></table></figure><p> 对于上述定义的变量，以下表达式的值为true的是哪个？      {.quiz}</p><ul><li>str1&#x3D;&#x3D;str2;</li><li>str1.equals(str2);        {.correct}</li><li>str1&#x3D;&#x3D;str3;</li><li>以上都不对<br>  {.options}<blockquote><p>equals比较字符串的值是否相等，&#x3D;&#x3D;比较字符串对象的地址是否相等。</p></blockquote></li></ul></li><li><p>下面的程序段执行后，输出的结果是以下哪个选项？   {.quiz}</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer  buf=<span class="keyword">new</span>  <span class="title class_">StringBuffer</span>(<span class="string">&quot;Beijing2008&quot;</span>);</span><br><span class="line">buf.insert(<span class="number">7</span>,<span class="string">&quot;@&quot;</span>);</span><br><span class="line">System.out.println(buf.toString());</span><br></pre></td></tr></table></figure><ul><li>Beijing@2008              {.correct}</li><li>@Beijing2008</li><li>Beijing2008@</li><li>Beijing#2008<br>  {.options}</li></ul></li></ol></li><li><p>填空题</p><ol><li><p>在Java中定义了两个类来封装对字符串的操作，它们分别是[String]{.gap}和[StringBuffer]{.gap}。{.quiz .fill}</p></li><li><p>System类中所提供的属性和方法都是[静态]{.gap}的，想要引用这些属性和方法，直接使用System类调用即可。{.quiz .fill}</p></li><li><p>已知 sb 为 StringBuffer 的一个实例，且 sb.toString() 的值为 “abcde “， 则执行sb. reverse()后，sb.toString()的值为[edcba]{.gap}。     {.quiz .fill}</p></li><li><p>Java中操作日期的类有[Date]{.gap}、[Calender]{.gap}和[DateFormat]{.gap}。    {.quiz .fill}</p></li><li><p>Java中专门用于将日期格式化为字符串的类是[DateFormat]{.gap}。    {.quiz .fill}</p></li></ol></li><li><p>判断题</p><ol><li><p>String对象和StringBuffer对象都是字符串变量，创建后都可以修改。{.quiz .false}</p></li><li><p>用运算符“&#x3D;&#x3D;”比较字符串对象时，如果两个字符串的值相同，结果为true。{.quiz .false}</p></li><li><p>String类的方法 replace (CharSequence srt1, CharSequence srt2)返回一个新的字符串，它是通过用srt2替换此字符串中出现的所有srt1得到的。                  {.quiz .true}</p></li><li><p>System类中的currentTimeMillis()方法返回一个long类型的值。    {.quiz .true}</p></li><li><p>Date、Calender以及DateFormat类都位于java.util包里。      {.quiz .false}</p></li></ol></li><li><p>简答题</p><ol><li><p>简述String和StringBuffer有什么区别。 {.quiz .fill}</p><blockquote><p>String:<br> 是对象不是原始类型.<br> 为不可变对象,一旦被创建,就不能修改它的值.<br> 对于已经存在的String对象的修改都是重新创建一个新的对象,然后把新的值保存进去.<br> String 是final类,即不能被继承.<br> StringBuffer:<br> 是一个可变对象,当对他进行修改的时候不会像String那样重新建立对象<br> 它只能通过构造函数来建立,<br> StringBuffer sb &#x3D; new StringBuffer();不能通过赋值符号对他进行赋值.<br> 对象被建立以后,在内存中就会分配内存空间,并初始保存一个null.向StringBuffer<br> 中赋值的时候可以通过它的append方法.<br> 字符串连接操作中StringBuffer的效率要比String高:</p></blockquote></li><li><p>简述Date和Calender类有什么区别和联系。   {.quiz .fill}</p><blockquote><p>Date 类用来表示某个特定的瞬间,能够精确到毫秒。而在实际应用中,往往需要把一个日期中的年、月、日等信息单独返回进行显示或处理,这个类中的大部分方法都已被标记过时。 Calender 类基本取代了 Date 类,该类中定义了一系列用于完成日期和时间字段操作的方法 Calendar 的 getTime() 方法, getTime() 返回一个表示 Calendar 时间值的 Date 对象,同时 Calendar 有一个 setTime(Date date) 方法, setTime() 方法接收一个 Date 对象,将 Date 对象表示的时间值设置给 Calendar 对象,通过这两个方法就可以完成 Date 和 Calendar 对象之间的转换</p></blockquote></li><li><p>简述什么是自动装箱和自动拆箱。       {.quiz .fill}</p><blockquote><p>自动装箱是指将基本数据类型的变量赋给对应的包装类变量,反之,拆箱是指将包装类对象类型 直接赋给一个对应的基本数据类型变量。</p></blockquote></li></ol></li><li><p>程序题</p><ol><li>编写一个程序，实现字符串大小写的转换并倒序输出。要求如下<br> 1）使用for循环将字符串“HelloWorld”从最后一个字符开始遍历。<br> 2）遍历的当前字符如果是大写字符，就使用toLowerCase()方法将其转换为小写字符，反之则使用toUpperCase() 方法将其转换为大写字符；<br> 3）定义一个StringBuffer对象，调用append()方法依次添加遍历的字符，最后调用StringBuffer对象的toString()方法，并将得到的结果输出。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">`<span class="keyword">package</span> com.company.after;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 课后习题五、1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ex02</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    <span class="type">char</span>[] chars = s1.toCharArray();</span><br><span class="line"><span class="comment">//        reverse(chars);</span></span><br><span class="line">    System.out.println();</span><br><span class="line"><span class="comment">//        caseChange(s1, chars);</span></span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;chars.length;i++)&#123;</span><br><span class="line">        sb1.append(chars[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sb1.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">char</span>[] chars)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> chars.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        System.out.print(chars[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 大小写转换</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">caseChange</span><span class="params">(String s1, <span class="type">char</span>[] chars)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; s1.length(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (Character.isLowerCase(chars[i]))&#123;</span><br><span class="line">            chars[i]=Character.toUpperCase(chars[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Character.isUpperCase(chars[i]))&#123;</span><br><span class="line">            chars[i]=Character.toLowerCase(chars[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(chars[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>利用Random类来产生5个20~30之间的随机整数。<br> 提示：<a href="n%E3%80%81m%E5%9D%87%E4%B8%BA%E6%95%B4%E6%95%B0%EF%BC%8Cn%3Cm">n-m</a>之间的随机数的公式为n+(new Random()).nextInt(m-n+1) <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.after;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ex03</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">rd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">20</span>+rd.nextInt(<span class="number">11</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h1 id="第六章-集合"><a href="#第六章-集合" class="headerlink" title="第六章 集合"></a>第六章 集合</h1><ul><li><p>选择题</p><ol><li><p>使用Iterator时，判断是否存在下一个元素可以使用以下哪个方法？     {.quiz}</p><ul><li>next()</li><li>hash() </li><li>hasPrevious() </li><li>hasNext() {.correct}<br>  {.options}</li></ul></li><li><p>在程序开发中，经常会使用以下哪个类来存储程序中所需的配置？{.quiz}</p><ul><li>HashMap</li><li>TreeSet </li><li>Properties    {.correct}</li><li>TreeMap<br>  {.options}</li></ul></li><li><p>要想集合中保存没有重复的元素并且按照一定的顺序排列，可以使用以下哪个集合？{.quiz}</p><ul><li>LinkedList </li><li>ArrayList </li><li>hashSet</li><li>TreeSet   {.correct}<br>  {.options}</li></ul></li><li><p>要想保存具有映射关系的数据，可以使用以下哪些集合？   {.quiz .multi}</p><ul><li>ArrayList</li><li>TreeMap       {.correct}</li><li>HashMap       {.correct}</li><li>TreeSet<br>  {.options}</li></ul></li><li><p>以下哪些方法是LinkedList集合中定义的？   {.quiz .multi}</p><ul><li>getLast()             {.correct}</li><li>getFirst()            {.correct}</li><li>remove (int index)    {.correct} </li><li>next()<br>  {.options}</li></ul></li></ol></li><li><p>填空题</p><ol><li><p>在创建TreeSet对象时，可以传入自定义比较器，自定义比较器需实现[Comparator]{.gap}接口。    {.quiz .fill}</p></li><li><p>使用Iterator遍历集合时，首先需要调用[hasNext()]{.gap}方法判断是否存在下一个元素，若存在下一个元素，则调用[next()]{.gap}方法取出该元素。      {.quiz .fill}</p></li><li><p>Map集合中的元素都是成对出现的，并且都是以[键；key]{.gap}、[值；value]{.gap}的映射关系存在。  {.quiz .fill}</p></li><li><p>List集合的主要实现类有[ArrayList]{.gap}、[LinkedList]{.gap}，Set集合的主要实现类有[HashSet]{.gap}、[TreeSet]{.gap}Map集合的主要实现类有[HashMap]{.gap}、[TreeMap]{.gap}。          {.quiz .fill}</p></li><li><p>在JDK 8中，根据Lambda表达式特性还新增了一个[forEach(Consumer action)]{.gap}方法来遍历集合。 {.quiz .fill}</p></li></ol></li><li><p>判断题</p><ol><li><p>Set集合是通过键值对的方式来存储对象的。  {.quiz .false}</p></li><li><p>集合中不能存放基本数据类型，而只能存放引用数据类型。 {.quiz .true}</p></li><li><p>如果创建的TreeSet集合中没有传入比较器，则该集合中存入的元素需要实现Comparable接口。  {.quiz .true}</p></li><li><p>使用Iterator迭代集合元素时，可以调用集合对象的方法增删元素。     {.quiz .false}</p></li><li><p>JDK 8中新增一个Stream接口，该接口可以将集合、数组的中的元素转换为Stream流的形式。{.quiz .true}</p></li></ol></li><li><p>简答题</p><ol><li><p>简述什么是集合，请列举集合中常用的类和接口。{.quiz .fill}</p><blockquote><p>为了使程序能方便的存储和操作数目不固定的一组数据，JDK提供了一套类库，这些类都位于java.util包中，统称为集合。集合框架中常用的接口和类有，List、Set、ArrayList、HashSet、Map、HashMap、TreeMap。</p></blockquote></li><li><p>简述集合中的List、Set、Map有什么区别。  {.quiz .fill}</p><blockquote><p>List的特点是元素有序、可重复。List接口的主要实现类有ArrayList和LinkedList。<br>Set的特点是元素无序、不可重复。Set接口的主要实现类有HashSet和TreeSet。<br>Map的特点是存储的元素是键(Key)、值(Value)映射关系，元素都是成对出现的。Map接口的主要实现类有HashMap和TreeMap。</p></blockquote></li><li><p>简述Collection和Collections的有什么区别。    {.quiz .fill}</p><blockquote><p>Collection是一个单例集合接口。它提供了对集合对象进行基本操作的通用方法。<br> Collections是一个工具类。它包含各种有关集合操作的方法。</p></blockquote></li></ol></li><li><p>程序题</p><ol><li><p>在HashSet集合中添加三个Person对象，把姓名相同的人当做同一个人，禁止重复添加。要求如下：<br>  1） Person类中定义name和age属性，重写hashCode()方法和equals()方法，针对Person类的name属性进行比较，如果name相同，hashCode()方法的返回值相同，equals()方法返回true。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.after;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">    <span class="keyword">return</span> age == person.age &amp;&amp; Objects.equals(name, person.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.company.after;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ex01</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">HashSet</span> <span class="variable">hs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">    hs.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">19</span>));</span><br><span class="line">    hs.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lucy&quot;</span>,<span class="number">20</span>));</span><br><span class="line">    hs.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>,<span class="number">18</span>));</span><br><span class="line"><span class="comment">//        hs.add(new Person(&quot;Jack&quot;,18));</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> hs.iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">        System.out.println(it.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>选择合适的Map集合保存5位学员的学号和姓名，然后按学号的自然顺序的倒序将这些键值对一一打印出来。要求如下：<br> 1）创建TreeMap集合。<br> 2）使用put()方法将学号(“1”、“2”、“3”、“4”、“5”)和姓名(“Lucy”、“John”、“Smith”、“Aimee”、“Amanda”)存储到Map中，存的时候可以打乱顺序观察排序后的效果。<br> 3）使用 map.keySet()获取键的Set集合。<br> 4）使用Set集合的iterator()方法获得Iterator对象用于迭代键。<br> 5）使用Map集合的get()方法获取键所对应的值</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ex02</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key1</span> <span class="operator">=</span> (String) o1;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key2</span> <span class="operator">=</span> (String) o2;</span><br><span class="line">        <span class="keyword">return</span> key2.compareTo(key1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>(<span class="keyword">new</span> <span class="title class_">MyComparator</span>());</span><br><span class="line">    map.put(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;John&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;Lucy&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;Smith&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;5&quot;</span>,<span class="string">&quot;Amanda&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;4&quot;</span>,<span class="string">&quot;Aimee&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> map.keySet();</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> it.next();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">        System.out.println(key+<span class="string">&quot;:&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h1 id="第七章-I-x2F-O流"><a href="#第七章-I-x2F-O流" class="headerlink" title="第七章 I&#x2F;O流"></a>第七章 I&#x2F;O流</h1><ul><li><p>填空题</p><ol><li><p>Java中的I&#x2F;O流,按照传输数据不同,可分为[字节流]{.gap}和[字符流]{.gap}      {.quiz .fill}</p></li><li><p>在Buffer与Channel交互时,数据会从[Channel]{.gap}读取到[Buffer]{.gap}中,或从Bufer写人到Channel中。  {.quiz .fill}</p></li><li><p>用于将字节流转换为字符流的是[InputStreamReader]{.gap}和[InputStreamReader]{.gap}         {.quiz .fill}</p></li><li><p>NIO 主要有三大核心部分:[Buffer]{.gap}、[Channel]{.gap} 和[Selector]{.gap}   {.quiz .fill}</p></li><li><p>Java中提供了一个类[RandomAccessFile]{.gap},它不但具有读写文件的功能,而且可以随机灯件的任何位置开始执行读写数据的操作。    {.quiz .fill}</p></li></ol></li><li><p>判断题</p><ol><li><p>如果一个File表示目录下有文件或者子目录,调用 delete()方法也可以将其删除。       {.quiz .false}</p></li><li><p>对象序列化是指将一个Java对象转换成一个I&#x2F;O 流中字节序列的过程。       {.quiz .true}</p></li><li><p>Channel是一个接口对象,它类似于传统的流对象。                         {.quiz .true}</p></li><li><p>InputStream类的close()方法是用于关闭流并且释放流所占的系统资源。         {.quiz .true}</p></li><li><p>BufferedinputStream 和 BufferedOutputStream 不是字节缓冲流。         {.quiz .false}</p></li></ol></li><li><p>选择题</p><ol><li><p>下面选项中，那些是标准输入输出流     {.quiz .multi}</p><ul><li>System.In         {.correct}</li><li>System.Out        {.correct}</li><li>InputStream</li><li>OutputStream<br>  {.options}</li></ul></li><li><p>File类中以字符串形式返回文件绝对路径的方法是哪一项?      {.quiz}</p><ul><li>getParent()           </li><li>getName()</li><li>getAbsolutePath()         {.correct}</li><li>getPath()<br>  {.options}</li></ul></li><li><p>以下可建 RandomAccessFile类实例对象的代码,哪些是正确的?          {.quiz .multi}</p><ul><li>new RandomAccessFile(new File(“D:\itcast\dirl\test java”),”rw”);       {.correct}</li><li>new RandomAccessFile(“D:\itcast\dirl\test.java”,”r”);                  {.correct}</li><li>new RandomAccessFile(“D:\itcast\dirl\test.java”);</li><li>new RandomAccessFile(“D:\itcast\dirl\test.java”,”wr”);<br>  {.options}</li></ul></li><li><p>下面哪个流使用了缓冲区技术       {.quiz} </p><ul><li>BufferedOutputStream       {.correct}</li><li>FileInputStream</li><li>DataOutputStream</li><li>FileReader<br>  {.options}</li></ul></li><li><p>以下选项中,关于Java NIO中 Buffer类的常用说法正确的是哪一项?      {.quiz}</p><ul><li>clear()方法会清除缓冲区数据,并将 position 设置为0,limit设置为capacity </li><li>flip()方法先将 limit 设置为当前 position 位置,然后再将 position 设置为0       {.correct}</li><li>mark()方法用于设置 Buffer的标记(mark),只能在0与 limit之间做标记</li><li>rewind()方法将position设置为0，并设置mark标记<br>  {.options}</li></ul></li></ol></li><li><p>简答题</p><ol><li><p>简述I&#x2F;O流的概念  {.quiz .fill}</p><blockquote><p>Java 程序通过 I&#x2F;O 流来完成输入和输出,流是输入或输出信息的抽象。流通过 Java 的输入&#x2F;输出系统与外设连接进行数据通信。流是抽象的对象,具体实现代码在 <code>java.io </code>包中。</p></blockquote></li><li><p>简述字符流、字节流的区别     {.quiz .fill}</p><blockquote><p>字节流的两个基类是 InputStream 和 OutputStream;<br> 字符流的两个基类是 Reader 和 Writer 。<br> 它们都是 Object 类的直接子类,字节流是处理以 8 位字节为基本单位的字节流类;<br> Reader 和 Writer 类是专门处理 16 位字节的字符流类。</p></blockquote></li><li><p>简要说明什么是NIO        {.quiz .fill}</p><blockquote><p>Java 中的 NIO 是为替代传统标准的 I&#x2F; O 而出现的。<br> 与标准的 IO 相比, Java NIO 提供了一种与 I&#x2F;O 不同的工作方式。 NIO 采用<code>内存映射文件</code>的方式来处理输入 &#x2F; 输出,它将文件或文件的一段区域映射到内存中,这样就可以像访问内存一样来访问文件了。<br> 在标准IO中,使用的是字节流和字符流,而在 NIO 中,使用的是通道( C hannel )和缓冲区(B uffer )。数据总是从通道读入缓冲区,或从缓冲区写入通道。<br> NIO 主要有三大核心部分: Buffer 、 Channel 和 Selector 。其中 Buffer 可以被看成是一个容器,其本质是一个数组缓冲区,读入或写出到 Channel 中的所有对象都会先放在 Buffer 中; Channel 是对传统的输入 &#x2F; 输出的模拟,在 NIO 中,所有的数据都需要通过通道流的形式传输; Selector (选择器)用于监听多个通道的事件(例如:连接打开、数据到达等),主要用于多线程处理。</p></blockquote></li></ol></li><li><p>编程题</p><ol><li>编写一个程序,分别使用字节流和字符流拷贝一个文本文件。要求如下:<br> (1)使用FileInputStream、FileOutputStream和FileReader、FileWriter分别进行拷贝。<br> (2)使用字节流拷贝时，定义一个1024长度的字节数组作为缓冲区，使用字符流拷贝，使用BufferedReader和BufferedWriter 包装流进行包装。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 字节流拷贝 </span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:/src.txt&quot;</span>); </span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:/des1.txt&quot;</span>); </span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>]; </span><br><span class="line">        <span class="type">int</span> len; </span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            out.write(buf, <span class="number">0</span>, len); </span><br><span class="line">        &#125; </span><br><span class="line">            in.close(); </span><br><span class="line">            out.close(); </span><br><span class="line">        <span class="comment">// 字符流拷贝 </span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span>     <span class="title class_">FileReader</span>(<span class="string">&quot;E:/src.txt&quot;</span>)); </span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span>     <span class="title class_">FileWriter</span>(<span class="string">&quot;E:/des2.txt&quot;</span>)); </span><br><span class="line">        String str; </span><br><span class="line">        <span class="keyword">while</span> ((str = bf.readLine()) != <span class="literal">null</span>) &#123;  </span><br><span class="line">            bw.write(str);   </span><br><span class="line">            bw.newLine();     </span><br><span class="line">        &#125; </span><br><span class="line">            bf.close();</span><br><span class="line">            bw.close();&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>某人在玩游戏的时候输人密码123456后成功进人游戏(输错5次则被强行退出)，要求用程序实现密码验证的过程。要求如下:<br> (1)使用Sysytem.in包装为字符流读取键盘输人。<br> (2)BufferedReader对字符流进行包装。调用BufferedReader的readLine()方法每次读取一行。<br> (3)在for循环中判断输人的密码是否为123456,如果是则打印“恭喜你进人游戏”，并跳出循环，否则继续循环读取键盘输人。<br> (4)当循环完毕，密码还不正确,则打印“密码错误,结束游戏”,并调用System. exit(0)方法结束程序。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;     </span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));     </span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;     </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">false</span>;     </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;       </span><br><span class="line">            System.out.println(<span class="string">&quot;请输入密码:&quot;</span>);       </span><br><span class="line">            password = br.readLine();       </span><br><span class="line">            <span class="keyword">if</span> (password.equals(<span class="string">&quot;123456&quot;</span>)) &#123;         </span><br><span class="line">                System.out.println(<span class="string">&quot;恭喜你进入游戏&quot;</span>);         </span><br><span class="line">                b = <span class="literal">true</span>;         </span><br><span class="line">                <span class="keyword">break</span>;       </span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;     </span><br><span class="line">        <span class="keyword">if</span> (!b) &#123;       </span><br><span class="line">            System.out.println(<span class="string">&quot;密码错误，游戏结束&quot;</span>);       </span><br><span class="line">            System.exit(<span class="number">0</span>);     </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h1 id="第九章-JDBC"><a href="#第九章-JDBC" class="headerlink" title="第九章 JDBC"></a>第九章 JDBC</h1><ul><li><p>填空题</p><ol><li><p>JDBC是[Java Database Connectiivity]{.gap}的缩写，简称Java数据库连接。   {.quiz .fill}</p></li><li><p>JDBC API主要位于[java.sql]{.gap}包中。   </p></li><li><p>在编写JDBC程序时，必须要把所使用的数据库驱动程序或类库加载到项目的[classpath]{.gap}中。  {.quiz .fill}</p></li><li><p>DriverManeger类的[registerDriver]{.gap}方法可用于向DriverManeger中注册给定的JDBC驱动程序。     {.quiz .fill}</p></li><li><p>在ResultSet接口内部有一个指向表格数据行的游标（或指针），ResultSet对象初始化时，游标在表格的第一行之前，调用[next()]{.gap}方法可将游标移动到下一行。       {.quiz .fill}</p></li></ol></li><li><p>判断题</p><ol><li><p>JDBC,它是一套用于执行SQL语句的Java API。     {.quiz .true}</p></li><li><p>Statement是Java执行数据库操作的一个重要接口，它用于执行动态的SQL语句，并返回一个对象结果。   {.quiz .false}</p></li><li><p>PreparedStatement是Statement的子接口，用于执行预编译的SQL语句。      {.quiz .true}</p></li><li><p>PreparedStatement中的setDate()方法可以设置日期内容，但参数Date的类型必须是java.util.Date。 {.quiz .false}  </p></li><li><p>ResultSet接口既可以通过字段的名称来获取指定数据，也可以通过字段的索引来获取指定的数据，字段的索引是从0开始编号的。       {.quiz .false}</p></li></ol></li><li><p>选择题</p><ol><li><p>JDBC是一套用于执行什么的 Java API?   {.quiz}</p><ul><li>SQL语句           {.correct}</li><li>数据库连接</li><li>数据库操作</li><li>数据库驱动<br>  {.options}</li></ul></li><li><p>当应用程序使用JDBC访问特定的数据库时，只需要通过不同的什么与其对应的数据库进行连接,连接后即可对该数据库进行相应的操作?               {.quiz}</p><ul><li>Java API</li><li>JDBC API</li><li>数据库驱动            {.correct}</li><li>JDBC驱动<br>  {.options}</li></ul></li><li><p>JDBC API主要位于哪个包中,该包定义了一系列访问数据库的接口和类?       {.quiz}</p><ul><li>java .sql             {.correct}</li><li>java .util</li><li>java .jdbc</li><li>java .lang<br>  {.options}</li></ul></li><li><p>在编写JDBC程序时,必须要把所使用的数据库驱动程序或类库加载到项目的什么位置?   {.quiz}</p><ul><li>根目录下</li><li>JDBC程序所在目录下</li><li>任意目录下</li><li>classpath             {.correct}<br>  {.options}</li></ul></li><li><p>下面是Statement接口中常用的执行SQL语句的方法,哪些说明是正确的?   {.quiz .multi}</p><ul><li>execute(String sql) 用于执行各种SQL语句，该方法返回一个boolean 类型的值       {.correct}</li><li>executeUpdate(String sql)用于执行SQL中的query、insert、update和delete语句</li><li>executeQuery(String sql) 用于执行SQL中的select 语句                           {.correct}</li><li>exeuteUpdate(String sq)用于执行各种SQL并返回int类型结果<br>  {.options}</li></ul></li></ol></li><li><p>简答题</p><ol><li><p>请简述什么是JDBC。   {.quiz .fill}</p><blockquote><p>JDBC 是一套用于执行 SQL 语句的 Java API 。应用程序可通过这套 API 连接到关系型数据库,并使用 SQL 语句来完成对数据库中数据的查询、新增、更新和删除等操作。</p></blockquote></li><li><p>简述JDBC的编程步骤。 {.quiz .fill}</p><blockquote><p>(1)加载数据库驱动<br> (2)通过DriverManager获取数据库连接<br> (3)通过Connection对象获取Statement对象<br> (4)使用Statement执行SQL语句<br> (5)操作ResultSet结果集<br> (6)关闭连接,释放资源</p></blockquote></li><li><p>简述PreparedStatement相比Statement优点。 {.quiz .fill}</p><blockquote><p>(1)代码的可读性和可维护性<br> (2) PreparedStatement 尽最大可能提高性能,因为预编译语句有可能被重复调用 , 所以语句在被 DB 的编译器编译后的执行代码被缓存下来 , 那么下次调用时只要是相同的预编译语句就不需要编译 , 只要将参数直接传入编译过的语句执行代码中(相当于一个函数)就会得到执行。<br> (3)极大地提高了安全性传。递给 PreparedStatement 对象的参数可以被强制进行类型转换,使开发人员可以确保在插入或查询数据时与底层的数据库格式匹配;在公共 Web 站点环境下,防止 Sq 注入问题。</p></blockquote></li></ol></li></ul><h1 id="第十章-多线程"><a href="#第十章-多线程" class="headerlink" title="第十章 多线程"></a>第十章 多线程</h1><ul><li><p>选择题</p><ol><li><p>在以下哪种情况下，线程进入就绪状态？ {.quiz}</p><ul><li>线程调用了sleep(long millis)方法</li><li>线程调用了join()方法</li><li>线程调用了yield()方法         {.correct}</li><li>线程调用了notify()方法<br>  {.options}</li></ul></li><li><p>关于线程的创建过程，下面四种说法正确的有哪些？       {.quiz .multi}</p><ul><li>定义Thread类的子类，重写Thread类的run()方法，创建该子类的实例对象，调用对象的start()方法。    {.correct}</li><li>定义Thread类的子类，重写Thread类的run()方法，创建该子类的实例对象，调用对象的run()方法。</li><li>定义一个实现Runnable 接口的类并实现run()方法，创建该类实例对象，将其作为参数传递给Thread类的构造方法来 创建Thread对象，调用Thread对象的start()方法。      {.correct}</li><li>定义一个实现Runnable 接口的类并实现run()方法，创建该类对象，然后调用run()方法。<br>  {.options}</li></ul></li><li><p>对于线程的生命周期，下面四种说法正确的有哪些？       {.quiz .multi}</p><ul><li>调用了线程的start()方法，该线程就进入运行状态 </li><li>线程的run()方法运行结束或被未catch的InterruptedException等异常终结，那么该线程进入死亡状态        {.correct}</li><li>线程进入死亡状态，但是该线程对象仍然是一个Thread对象，在没有被垃圾回收器回收之前仍可以像引用其它对象一样引用它            {.correct}</li><li>线程进入死亡状态后，调用它的start()方法仍然可以重新启动<br>  {.options}</li></ul></li><li><p>下面四个选项中，哪些是线程进入阻塞或者等待状态的原因？       {.quiz .multi}</p><ul><li>线程试图获取某个对象的同步锁，而该锁被其它线程持有        {.correct}</li><li>线程调用了另一个线程的join()方法                          {.correct}</li><li>当线程调用了一个阻塞式的IO方法                            {.correct}</li><li>线程调用了setDaemon(boolean b)方法<br>  {.options}</li></ul></li><li><p>对于wait()方法，下面说法正确的是？      {.quiz .multi}</p><ul><li>wait()方法的调用者是同步锁对象                                            {.correct}</li><li>wait()方法使线程进入等待状态          {.correct}</li><li>调用同一锁对象的notify()或notifyAll()方法可以唤醒调用wait()方法等待的线程     {.correct}</li><li>调用wait()方法的线程会释放同步锁对象  {.correct}<br>  {.options}</li></ul></li></ol></li><li><p>填空题（共5题,25.0分）</p><ol><li><p>实现多线程有三种方式，一是通过继承[Thread]{.gap}类，二是通过实现[Runnable]{.gap}接口，三是通过实现[Callable]{.gap}接口。    {.quiz .fill}</p></li><li><p>在Java语言中，同步方法需要用到关键字[synchronized]{.gap}，对于同步方法而言无需指定同步锁，它的同步锁是方法所在的对象，也就是[this]{.gap}（关键字）。 {.quiz .fill}</p></li><li><p>线程的整个生命周期分为六个阶段，分别是[NEW；新建状态]{.gap}、[RUNNABLE；可运行状态]{.gap}、[BLOCKED；阻塞状态]{.gap}、[WAITING；等待状态]{.gap}、[TIMED_WAITING；定时等待状态]{.gap}和[TERMINATED；终止状态]{.gap}。    {.quiz .fill}</p></li><li><p>Thread类中的start()方法用于[开启一个新的线程]{.gap}，当新线程启动后，系统会自动调用[run()]{.gap}方法。 {.quiz .fill}</p></li><li><p>将某个线程设置为后台线程，需要调用线程的[setDaemon(true)]{.gap}方法，该方法必须在[start()]{.gap}方法之前调用。 {.quiz .fill}</p></li></ol></li><li><p>判断题</p><ol><li><p>当我们创建一个线程对象时，该对象表示的线程就立即开始运行。 {.quiz .false}</p></li><li><p>如果前台线程全部死亡，后台线程也会自动死亡。    {.quiz .true}</p></li><li><p>同步代码块中的锁对象可以是任意类型的对象。  {.quiz .true}</p></li><li><p>静态方法不能使用synchronized关键字来修饰。  {.quiz .false}</p></li><li><p>Java提供的线程池来创建多线程，进一步优化线程管理。  {.quiz .true}</p></li></ol></li><li><p>简答题</p><ol><li><p>Java中有几种方式可以实现多线程。 {.quiz .fill}</p><blockquote><p>一种是继承java.lang包下的Thread类，覆写Thread类的run()方法，在run()方法中实现运行在线程上的代码。<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure><br>另一种就是实现java.lang.Runnable接口，同样是在run()方法中实现运行在线程上的代码。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种就是实现java.util.concurrent.Callable接口，同样是在call()方法中实现运行在线程上的代码。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Object&gt;&#123;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>Java中sleep(long millis)方法和wait()方法有什么区别。     {.quiz .fill}</p><blockquote><p>调用sleep(long millis)方法，正在执行的线程主动让出CPU去执行其他线程，在sleep(long millis)方法指定的时间过后，CPU才会回到这个线程上继续往下执行，如果当前线程进入了同步锁，sleep(long millis)方法并不会释放锁，即使当前线程使用sleep(long millis)方法让出了CPU，但其他被同步锁挡住了的线程也无法得到执行。<br> wait()在一个已经进入了同步锁的线程内进行调用，让当前线程暂时让出同步锁，以便其它正在等待此锁的线程可以得到同步锁并运行。当其它线程调用了notify()或notifyAll()方法后，调用wait()方法的线程就会解除wait状态，当再次获得同步锁后，程序可以继续向下执行。</p></blockquote></li><li><p>简述为什么要使用多线程？         {.quiz .fill}</p><blockquote><ol><li>单线程的程序都是从main()方法入口开始执行到程序结束,整个过程只能顺序执行,如果程序在某个地方出现问题,那么整个程序就会崩溃,所以这就说明了单线程在某些方面的脆弱性和局限性。 </li><li>现实世界很多事物的发展都是并行的,单线程无法很好地表示复杂世界的并行性。</li></ol></blockquote></li></ol></li><li><p>程序题</p><ol><li>模拟传智播客的三个老师同时分发80份学习笔记，每个老师相当于一个线程（15.0分）  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(t, <span class="string">&quot;老师1&quot;</span>).start();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(t, <span class="string">&quot;老师2&quot;</span>).start();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(t, <span class="string">&quot;老师3&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">notes</span> <span class="operator">=</span> <span class="number">80</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        dispatchNotes(); <span class="comment">// 调用售票方法</span></span><br><span class="line">        <span class="keyword">if</span> (notes &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">dispatchNotes</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (notes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>); <span class="comment">// 经过的线程休眠10毫秒</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---发出的笔记&quot;</span> + notes--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编写10个线程，第一个线程从1加到10，第二个线程从11加到20…第十个线程从91加到100，最后再把十个线程结果相 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Accumulator</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> stratNum;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> sum;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Accumulator</span><span class="params">(<span class="type">int</span> startNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stratNum = startNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        sum += num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            sum += stratNum + i;</span><br><span class="line">        &#125;</span><br><span class="line">        add(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Thread[] threadList = <span class="keyword">new</span> <span class="title class_">Thread</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            threadList[i] = <span class="keyword">new</span> <span class="title class_">Accumulator</span>(<span class="number">10</span> * i + <span class="number">1</span>);</span><br><span class="line">            threadList[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            threadList[i].join();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sum is : &quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言编程题03</title>
      <link href="/2021/11/13/study/c/practice03/"/>
      <url>/2021/11/13/study/c/practice03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="函数相关"><a href="#函数相关" class="headerlink" title="函数相关"></a>函数相关</h1><ul><li>素数表（函数专题）<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//素数表（函数专题）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">prime</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> k=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> m,n;</span><br><span class="line">cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=m;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">prime</span>(i))cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>求组合数<blockquote><p>计算从n个人中选择k个人组成一个委员会的不同组合数。显然，这个组合数是n!&#x2F;(k!(n-k)!)。要求编写函数fact()，实现求一个数的阶乘功能，在主函数中调用此函数。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求组合数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fact</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> m=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)m=m*i;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">cout&lt;&lt;<span class="built_in">fact</span>(n)/<span class="built_in">fact</span>(k)/<span class="built_in">fact</span>(n-k);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>计算退票费<blockquote><p>12306网站火车票退票收费规定：票面乘车站开车时间前48小时以上的按票价5%计退票费。同时，车票退票费的计算方法不再四舍五入到元为单位，而是以5角为单位：尾数小于0.25元的舍去、不小于0.25元且小于0.75元的计为0.5元、不小于0.75元的进为1元。假定退票时间举例开车时间在48小时以上，请编写一个函数计算退票费。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算退票费</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">CancelFree</span><span class="params">(<span class="type">double</span> price)</span></span>&#123;</span><br><span class="line"><span class="type">double</span> real=price*<span class="number">0.05</span>;</span><br><span class="line"><span class="type">double</span> k;</span><br><span class="line"><span class="keyword">if</span>(real-(<span class="type">int</span>)real&lt;<span class="number">0.25</span>)<span class="keyword">return</span> (<span class="type">int</span>)real;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(real-(<span class="type">int</span>)real&gt;=<span class="number">0.75</span>)<span class="keyword">return</span> <span class="built_in">ceil</span>(real);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">return</span> (<span class="type">int</span>)real+<span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">double</span> price;</span><br><span class="line">cin&gt;&gt;price;</span><br><span class="line"><span class="type">double</span> k=<span class="built_in">CancelFree</span>(price);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.1f&quot;</span>,k);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>回文数<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回文数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">hw</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> num=n,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(num)&#123;</span><br><span class="line">sum=sum*<span class="number">10</span>+num%<span class="number">10</span>;</span><br><span class="line">num=num/<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum==n)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> m,n;</span><br><span class="line">cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=m;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">hw</span>(i))cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li>不确定进制转换<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不确定进制转换</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">string <span class="title">change</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="type">char</span> a;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line">a=n%k+<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">s=a+s;</span><br><span class="line">n=n/k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=<span class="number">0</span>)</span><br><span class="line">cout&lt;&lt;<span class="built_in">change</span>(n,k);</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;-&quot;</span>&lt;&lt;<span class="built_in">change</span>(-n,k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>求最大数（函数的嵌套调用）<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求最大数（函数的嵌套调用）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmax</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> m=a&gt;b?a:b;</span><br><span class="line"><span class="keyword">if</span>(c&gt;m)m=c;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a,b,c,max;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">cout&lt;&lt;<span class="built_in">qmax</span>(a,b,c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><ul><li>求n!<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gc</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gc</span>(n<span class="number">-1</span>)*n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">cout&lt;&lt;<span class="built_in">gc</span>(n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li>汉诺塔<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hnt</span><span class="params">(<span class="type">int</span> n,<span class="type">char</span> a,<span class="type">char</span> b,<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">cout&lt;&lt;a&lt;&lt;<span class="string">&quot;-&gt;&quot;</span>&lt;&lt;c&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">hnt</span>(n<span class="number">-1</span>,a,c,b);</span><br><span class="line">cout&lt;&lt;a&lt;&lt;<span class="string">&quot;-&gt;&quot;</span>&lt;&lt;c&lt;&lt;endl;</span><br><span class="line"><span class="built_in">hnt</span>(n<span class="number">-1</span>,b,a,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> a=<span class="string">&#x27;A&#x27;</span>,b=<span class="string">&#x27;B&#x27;</span>,c=<span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">hnt</span>(n,a,b,c);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li>最大公约数<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gys</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>)<span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gys</span>(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">cout&lt;&lt;<span class="built_in">gys</span>(a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter04-网络层</title>
      <link href="/2021/11/08/study/network/chapter04/"/>
      <url>/2021/11/08/study/network/chapter04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="4-1-网络层的几个重要概念"><a href="#4-1-网络层的几个重要概念" class="headerlink" title="4.1 网络层的几个重要概念"></a>4.1 网络层的几个重要概念</h2><h3 id="4-1-1-网络层提供的两种服务"><a href="#4-1-1-网络层提供的两种服务" class="headerlink" title="4.1.1 网络层提供的两种服务"></a>4.1.1 网络层提供的两种服务</h3><ul><li>问题提出：在计算机通信中，可靠交付应由谁来负责？网络还是端系统？<ul><li>网络方（虚电路服务）<ul><li>传统电信网的主要业务是提供电话服务，采用面向连接的通信方式，使电信网络向用户提供可靠传输的服务</li><li>因此，计算机应模仿打电话使用的面向连接的通信方式<ul><li>先建立连接（虚电路VC）</li><li>双方沿着已建立的虚电路发送分组，不需要填写完整的目的主机地址，只需填写虚电路的编号，减少了分组开销</li><li>再使用可靠传输的网络协议，就可使分组无差错按序到达终点且不丢失，不乱序。<br>  <img src="https://z3.ax1x.com/2021/11/08/IGp9yt.png" alt="虚电路服务"></li></ul></li></ul></li><li>端系统方（数据报服务）<ul><li>端系统不再局限于电话了，我们用计算机，计算机有很强的差错处理能力。</li><li>新的设计思路<ul><li>&#x3D;&#x3D;网路层要设计的尽量简单，向其上层只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。&#x3D;&#x3D;</li><li>好处<ul><li>网络造价大大降低</li><li>运行方式灵活，能适应多种应用</li></ul></li></ul></li><li>发送分组时不需要先建立连接，分组独立发送，不分先后。</li><li>网络层不提供服务质量的承诺，分组可能出错、丢失、重复和失序；不保证交付的时限；不提供端到端的可靠传输服务</li><li>若主机间需要进行可靠的通信，则由主机中的运输层负责。<br>  <img src="https://z3.ax1x.com/2021/11/08/IGpmSs.png" alt="数据报服务"><br><img src="https://z3.ax1x.com/2021/11/08/IGpNlR.png" alt="虚电路服务与数据报服务的区别"></li></ul></li></ul></li></ul><h3 id="4-1-2-网络层的两个层面"><a href="#4-1-2-网络层的两个层面" class="headerlink" title="4.1.2 网络层的两个层面"></a>4.1.2 网络层的两个层面</h3><p>不同网络中的两个主机间的通信，要经过若干个路由器转发分组来完成，分组查找路由器中的转发表，从指明的接口转发到下一个路由器。</p><ul><li>转发表是如何得出的？<ul><li>从路由表导出的。路由表是怎么产生的？<ul><li>路由表是由互联网许多的路由器按照共同选定的路由选择协议，提供多次交换路由信息而产生的。</li></ul></li></ul></li><li>路由器之间传送的信息<ol><li>转发源主机和目的主机之间的所传送的数据</li><li>传送路由信息，目的是为了在路由器中创建路由表</li></ol></li><li>网络层抽象地划分为<code>数据层面</code>和<code>控制层面</code><ul><li>数据层面（分组转发）<ul><li>路由器根据转发表把收到的分组从对应接口转发出去。</li><li>用硬件转发，加快速率，转发一个分组的时间为$10^{-9}$秒</li></ul></li><li>控制层面（路由选择）<ul><li>路由器必须和相邻的路由器经常交换路由信息，才能创建出本路由器的路由表</li><li>必须依靠路由器协同动作</li><li>生产厂家在制造路由器是，已经在路由器内部嵌入了路由选择的通信模块<br><img src="/" alt="数据层面与控制层面"></li></ul></li></ul></li><li>为什么要划分两个层面？<ul><li>软件定义网络SDN的出现<ul><li>传统的互联网中，每一个路由器中既有转发表也有路由选择软件。也就是说，每个路由器既有数据层面也有控制层面。</li><li>SDN结构中，路由器中的路由选择软件没有了，因此路由器间不再互相交换路由信息。</li><li>在网络的控制层面有一个在逻辑上集中的<code>远程控制器</code>,掌握各主机与整个网络的状态，为每一个分组计算出最佳的路由，然后在路由器中生成正确的转发表</li><li>路由器的工作变简单了，即收到分组、查路由表、转发分组<br><img src="/" alt="SDN中的数据层面与控制层面"></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言周赛01</title>
      <link href="/2021/10/29/study/c/match01/"/>
      <url>/2021/10/29/study/c/match01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>探姬同学去上课<ul><li>探姬同学所住的宿舍是一幢很高的摩天大楼，每次上课前，探姬同学会和大家一样乘电梯涌向一楼，已知电梯运行中直接通过一层的时间为2秒 如果在某一层电梯有开关门，通过这一层的时间是5秒，问探姬从乘上电梯到一楼所用的时长。注意：电梯是处于下行阶段，探姬下到一层前电梯不会上行<blockquote><p>输入<br>  第一行输入一个整数，探姬所在的楼层，取值范围为[1, 100]。<br>  接着输入一个整数n（0&lt;&#x3D;n&lt;&#x3D;100），为探姬乘电梯时，有n个楼层有人按下了下楼键，接着输入n个整数,取值范围为[2, 100]，为按键的楼层号。<br>   输出<br>  输出探姬从乘上电梯后到一楼所用时长。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    cin&gt;&gt;b;</span><br><span class="line">    <span class="type">int</span> n,sum=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> a[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;           <span class="comment">//将按电梯的层数存入数组</span></span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">2</span>;i--)&#123;          <span class="comment">//电梯开始下降      1层有人按也不多花费时间</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;       <span class="comment">//遍历按电梯的数组</span></span><br><span class="line">            <span class="keyword">if</span>(a[j]=i)sum+=<span class="number">3</span>;       <span class="comment">//a[j]=i即在i层有人按了电梯，多花费了三秒</span></span><br><span class="line">        &#125;</span><br><span class="line">        sum+=<span class="number">2</span>;                     <span class="comment">//正常每下降一层要两秒</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;sum;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>探姬帮助同学解决问题<ul><li>探姬同学的数学虽然不好，编程水平还是不错，一位女同学向探姬同学请教编程问题，探姬随口说：约会，这位女同学生气的拧着探姬的耳朵问：你什么意思，探姬连忙解释说：这道题我大约会做。问题是这位女同学在用C程序输出一行由字母、数字、空格、标点符号组成的字符串时，把字符都按字符的ASCII码输出了，她想知道原字符串的内容，探姬同学陷入了沉思，于是，听到探姬同学喊救命的声音。请你根据输出的内容，恢复原字符串的内容。 <blockquote><p>输入<br>  输入一行由数字组成的字符串，长度小于1000.<br>  输出<br>  输出原字符串的内容。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line"></span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">char</span> a[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">1000</span>&lt;<span class="number">256</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">1000</span>&gt;=<span class="number">100</span>) &#123;</span><br><span class="line">a[j++] = (<span class="type">char</span>)(n%<span class="number">1000</span>);</span><br><span class="line">n/=<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">1000</span> &lt; <span class="number">100</span> &amp;&amp; n%<span class="number">1000</span>&gt;=<span class="number">10</span>) &#123;</span><br><span class="line">a[j++] = (<span class="type">char</span>)(n%<span class="number">100</span>);</span><br><span class="line">n/=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">1000</span>&lt;<span class="number">10</span>)&#123;</span><br><span class="line">a[j++] = (<span class="type">char</span>)(n%<span class="number">10</span>);</span><br><span class="line">n/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">100</span>&gt;=<span class="number">10</span>) &#123;</span><br><span class="line">a[j++] = (<span class="type">char</span>)(n%<span class="number">100</span>);</span><br><span class="line">n/=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">a[j++] = (<span class="type">char</span>)(n%<span class="number">10</span>);</span><br><span class="line">n/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=j<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">cout&lt;&lt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言编程题02</title>
      <link href="/2021/10/29/study/c/practice02/"/>
      <url>/2021/10/29/study/c/practice02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数组相关"><a href="#数组相关" class="headerlink" title="数组相关"></a>数组相关</h2><ul><li>十进制转二进制<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,i,a[<span class="number">100</span>];</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;n!=<span class="number">0</span>;i++)&#123;</span><br><span class="line">a[i]=n%<span class="number">2</span>;</span><br><span class="line">n=n/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i--;i&gt;=<span class="number">0</span>;i--)cout&lt;&lt;a[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>一个非递减有序的整型数组有n个元素，给定一个整数num，将num插入该序列的适当位置，使序列仍保持非递减有序。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,num,n,a[<span class="number">1000</span>];</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;num;</span><br><span class="line"><span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>&amp;&amp;a[i]&gt;num;i--)&#123;</span><br><span class="line">a[i+<span class="number">1</span>]=a[i];</span><br><span class="line">&#125;</span><br><span class="line">a[i+<span class="number">1</span>]=num;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>数组排序<figure class="highlight cpp"><figcaption><span>选择排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span><span class="comment">//选择排序 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,n,a[<span class="number">100</span>];</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> min=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[min]&gt;a[j])min=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> t=a[min];</span><br><span class="line">a[min]=a[i];</span><br><span class="line">a[i]=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span>冒泡排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span><span class="comment">//冒泡排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,a[<span class="number">100</span>],i,j,temp;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;            <span class="comment">//外层循环控制轮数</span></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)&#123;           <span class="comment">//内层循环控制每轮比较的次数</span></span><br><span class="line"><span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])&#123;</span><br><span class="line">temp=a[j];</span><br><span class="line">a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">a[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span>插入排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span><span class="comment">//插入排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,a[<span class="number">100</span>],i,j,k,temp;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;a[j])<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(j!=i<span class="number">-1</span>)&#123;</span><br><span class="line">temp=a[i];</span><br><span class="line"><span class="keyword">for</span>(k=i<span class="number">-1</span>;k&gt;j;k--)a[k+<span class="number">1</span>]=a[k];</span><br><span class="line">a[k+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>已知数组a中有m个按升序排列的元素，数组b中有n个按降序排列的元素，编程将a 与b中的所有元素按降序存入数组c中。<blockquote><p>输入：输入有两行，第一行首先是一个正整数<br>  m，然后是m个整数；第二行首先是一个正整<br>  数n，然后是n个整数，m, n均小于等于<br>  1000000。<br>输出：输出合并后的m+n个整数，数据之间用<br>  空格隔开。输出占一行。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> N=<span class="number">1000000</span>;</span><br><span class="line"><span class="type">int</span> a[N],b[N],c[<span class="number">2</span>*N]</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,k,m,n;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)cin&gt;&gt;a[i];</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;b[i];</span><br><span class="line">    i=m<span class="number">-1</span>;j=<span class="number">0</span>;k=<span class="number">0</span>;             <span class="comment">// i为a[]的最后一位（a[]中最大），j为b[]的第一位（b[]中最大），j为c[]的下标</span></span><br><span class="line">    <span class="keyword">while</span>(i&gt;=<span class="number">0</span>&amp;&amp;j&lt;n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;b[j])c[k++]=a[i--];     <span class="comment">//如果a[]的最后一位&gt;b[]的第一位,a[]作为c[]的第一位。k++,i--</span></span><br><span class="line">        <span class="keyword">else</span> c[k++]=b[j++];             <span class="comment">//如果a[]的最后一位&lt;b[]的第一位,b[]作为c[]的第一位。k++,j++</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;=<span class="number">0</span>)c[k++]=a[i--];           <span class="comment">//如果a[]的长度大于b[],即a[]中还有剩余的数，放到c[]的后面</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;n)c[k++]=b[j++];            <span class="comment">//如果a[]的长度小于b[],即b[]中还有剩余的数，放到c[]的后面</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m+n;i++)cout&lt;&lt;c[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>数组a有n个元素，请输出n个元素的最小值及其下标。若最小值有多个，请输出下标最小的一个。注意，有效下标从0开始。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">1000</span>],n,min=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;a[min])min=i;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;a[min]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>学校推出了10名歌手，每个歌手都有唯一编号。校学生会想知道这些歌手受欢迎的程度，设了一个投票箱，让每一个同学给自己喜欢的歌手投票，同学们使用歌手编号进行投票。现在学生会找你帮忙统计一下每位歌手获得的票数，并颁发“最受欢迎歌手奖”，该奖项颁发给得票最多的歌手。若有多名歌手并列第一，则均可获奖。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">11</span>],num;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;num&amp;&amp;num&gt;<span class="number">0</span>)a[num]++;</span><br><span class="line"><span class="type">int</span> max=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;max)max=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">11</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(max==a[i])cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="comment">//输出下标</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>输入从小到大排好序的n个元素，找出某元素第一次出现的位置。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, x;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="type">int</span> low = <span class="number">1</span>, high = n, mid;</span><br><span class="line"><span class="keyword">while</span> (low &lt;= high)</span><br><span class="line">&#123;</span><br><span class="line">mid = (low + high) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (a[mid] == x) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (x &gt; a[mid]) low = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> high = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (low &gt; high) cout &lt;&lt; <span class="string">&quot;-1&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (mid &gt; <span class="number">1</span> &amp;&amp; a[mid] == a[mid<span class="number">-1</span>])mid--;</span><br><span class="line">cout &lt;&lt; mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>输入一个以回车结束的字符串，该字符串由数字和字母组成。请过滤掉所有非数字字符，然后将数字字符串转换成十进制整数后乘以2输出。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">char</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//gets(a);</span></span><br><span class="line">cin.<span class="built_in">getline</span>(a,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">sizeof</span>(a);i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;a[i]&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;a[i]!=<span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">res=res*<span class="number">10</span>+a[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;res*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>报数字说英文<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string week[<span class="number">8</span>]=&#123;<span class="string">&quot;&quot;</span>,<span class="string">&quot;Mon&quot;</span>,<span class="string">&quot;Tue&quot;</span>,<span class="string">&quot;Wed&quot;</span>,<span class="string">&quot;Thur&quot;</span>,<span class="string">&quot;Fri&quot;</span>,<span class="string">&quot;Sat&quot;</span>,<span class="string">&quot;Sun&quot;</span>&#125;;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">cin&gt;&gt;a;</span><br><span class="line">cout&lt;&lt;week[a];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li>二进制转十六进制<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string s,ans=<span class="string">&quot;&quot;</span>;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=s.<span class="built_in">size</span>();i&gt;<span class="number">0</span>;i=i<span class="number">-4</span>)&#123;</span><br><span class="line"><span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="built_in">max</span>(<span class="number">0</span>,i<span class="number">-4</span>);j&lt;i;j++)</span><br><span class="line">t=t*<span class="number">2</span>+(s[j]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(t&lt;<span class="number">10</span>)ans=<span class="built_in">char</span>(t+<span class="string">&#x27;0&#x27;</span>)+ans;</span><br><span class="line"><span class="keyword">else</span> ans=<span class="built_in">char</span>(t+<span class="string">&#x27;A&#x27;</span><span class="number">-10</span>)+ans;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>单词统计<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>,word=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">getline</span>(cin,s);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;s[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27; &#x27;</span>)word=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(word==<span class="number">0</span>)&#123;</span><br><span class="line">sum++;</span><br><span class="line">word=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure></li><li>求最大字符串<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string s,str[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)cin&gt;&gt;str[i];</span><br><span class="line"><span class="keyword">if</span>(str[<span class="number">0</span>]&gt;str[<span class="number">1</span>])s=str[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> s=str[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(s&gt;str[<span class="number">2</span>])s=s;</span><br><span class="line"><span class="keyword">else</span> s=str[<span class="number">2</span>];</span><br><span class="line">cout&lt;&lt;s;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>上三角矩阵<ul><li>输入一个正整数n和n阶方阵a中的元素，如果a是上三角矩阵则输出“YES”，否则输出“NO”。上三角矩阵的主对角线(不包含主对角线)以下元素均为0。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a[N][N],n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;YES&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>矩阵乘积<ul><li>计算两个矩阵A和B的乘积。<blockquote><p>输入<br>  第一行三个正整数m、p、n(0&lt;&#x3D;M,N,P&lt;&#x3D;10)，表示矩阵A是m行p列，矩阵B是p行n列；接下来的m行是矩阵A的内容，每行 p个整数，以空格隔开；最后的p行是矩阵B的内容，每行n个整数，以空格隔开。<br>   输出<br>  输出乘积矩阵，输出占m行，每行n个数据，以空格隔开。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">10</span>,N=<span class="number">10</span>,P=<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a[M][P],b[P][N],c[M][N];</span><br><span class="line"><span class="type">int</span> m,p,n;</span><br><span class="line">cin&gt;&gt;m&gt;&gt;p&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;<span class="comment">//向a[][]输入数 a[][]m行p列</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0l</span>j&lt;p;j++)&#123;</span><br><span class="line">cin&gt;&gt;a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;p;i++)&#123;<span class="comment">//向b[][]输入数 b[][]p行n列</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">cin&gt;&gt;a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;<span class="comment">//向c[][]写入数 c[][]m行n列</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">c[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;p;k++)&#123;</span><br><span class="line">c[i][j]=c[i][j]+a[i][k]+b[k][j];<span class="comment">//c[][]每个元素等于a[][]每行的每一个元素与b[][]每一列</span></span><br><span class="line"><span class="comment">//每个元素的乘积之和</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>;j++)&#123;</span><br><span class="line">cout&lt;&lt;c[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="comment">//输出每行的前几个元素（不输出最后一个元素）</span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;c[i][n<span class="number">-1</span>];<span class="comment">//输出每行的最后一个元素</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>输入一个字符串，输出字符串中出现次数最多的字母。<blockquote><p>输入<br>  输入一个只含有大小写字母和空格的字符串，长度不超过100，以回车结束。<br>  输出<br>  输出一个小字字母，表示该字符串中出现次数最多的字母。若有多个则只输出ASCII码最小的那个字母。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string s;</span><br><span class="line"><span class="built_in">getline</span>(cin,s);</span><br><span class="line"><span class="type">int</span> a[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//下标代表字母的位置，值代表字母出现的个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;z&#x27;</span>)a[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;Z&#x27;</span>)a[s[i]-<span class="string">&#x27;A&#x27;</span>]++;</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[max]&lt;a[i])max=i;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="built_in">char</span>(max+<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>所在年第几天<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">2</span>][<span class="number">13</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> year,month,day,leap=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;year&gt;&gt;month&gt;&gt;day;</span><br><span class="line"><span class="keyword">if</span>((year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>)||(year%<span class="number">400</span>==<span class="number">0</span>))leap=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;month;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(leap==<span class="number">1</span>)</span><br><span class="line">day+=a[leap][i];</span><br><span class="line"><span class="keyword">else</span> day+=a[leap][i];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;day;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li>选美大赛<ul><li>某地区选美大赛总共有 n 个选手(编号从1到 n )， m 个评委。每个评委只能拿到一张选票，每张选票可为编号 L 到 R 的选手加上一分。现在让您找出得分最高的选手。<blockquote><p>输入<br>  第一行两个正整数 n, m (均≤105) ，随后m行每行两个整数 L, R (1≤L≤R≤n)。<br>  输出<br>  得分最高的选手编号，若有多位选手得最高分则按递增顺序输出每个选手的编号（各选手编号间以空格分隔，注意不要有行末空格）。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100050</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt; m; i++) &#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">a[r + <span class="number">1</span>]--;</span><br><span class="line">a[l]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">a[i] = a[i] + a[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; max) max = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] == max)</span><br><span class="line"> <span class="keyword">if</span> (flag == <span class="number">0</span>) cout &lt;&lt; i, flag = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;i ; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>杨辉三角(输出n列杨辉三角)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a[N][N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//最外层都是1 </span></span><br><span class="line">a[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">a[i][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;n;i++)&#123;<span class="comment">//从第三行开始 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i<span class="number">-1</span>;j++)&#123; <span class="comment">//从第二列开始，到每行的倒数第二列</span></span><br><span class="line">a[i][j]=a[i<span class="number">-1</span>][j<span class="number">-1</span>]+a[i<span class="number">-1</span>][j]; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-8d&quot;</span>,a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li>矩阵对角线元素之和<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">3</span>],sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">cin&gt;&gt;a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">sum+=a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li>字符统计（二）<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">char</span> c[<span class="number">80</span>];</span><br><span class="line">string s[<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> characters=<span class="number">0</span>,numbers=<span class="number">0</span>,spaces=<span class="number">0</span>,others=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">cin.<span class="built_in">getline</span>(c,<span class="number">80</span>);</span><br><span class="line">s[i]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">string a=s[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;a.<span class="built_in">length</span>();k++)&#123;</span><br><span class="line"><span class="keyword">if</span>((a[k]&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;a[k]&lt;=<span class="string">&#x27;z&#x27;</span>)||(a[k]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;a[k]&lt;=<span class="string">&#x27;Z&#x27;</span>))&#123;</span><br><span class="line">characters++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[k]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;a[k]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">numbers++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[k]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">spaces++;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[k]==<span class="string">&#x27;\0&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> others++;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;characters&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;numbers&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;spaces&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;others&lt;&lt;endl;</span><br><span class="line">characters=<span class="number">0</span>;numbers=<span class="number">0</span>;spaces=<span class="number">0</span>;others=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>译密码（二）<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string s;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;z&#x27;</span>) </span><br><span class="line">s[i]=<span class="string">&#x27;a&#x27;</span>+<span class="number">26</span>-(s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>); </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">s[i]=<span class="string">&#x27;A&#x27;</span>+<span class="number">26</span>-(s[i]-<span class="string">&#x27;A&#x27;</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">cout&lt;&lt;s[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>据说，90%的弗罗什希望自己的成绩高于班上平均水平。你要提供一个现实的检查。<blockquote><p>输入的第一行包含一个整数C，即测试用例数。C数据集如下。每个数据集都以一个整数N开始，N表示班级人数（1&lt;&#x3D;N&lt;&#x3D;1000）。然后是N个整数，用空格或换行符分隔，每个整数给出该班学生的最终分数（0到100之间的整数）。<br>  输出<br>  对于每种情况，输出一行，给出成绩高于平均水平的学生百分比，四舍五入至小数点后3位。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> score[N];</span><br><span class="line"><span class="type">int</span> classs[N];<span class="comment">//每班人数和每个人的分数</span></span><br><span class="line"><span class="type">double</span> sum=<span class="number">0</span>,num=<span class="number">0</span>;<span class="comment">//百分比//总成绩 </span></span><br><span class="line"><span class="type">double</span> avg;</span><br><span class="line"><span class="type">double</span> percent[N];<span class="comment">//平均分 </span></span><br><span class="line">cin&gt;&gt;a;    <span class="comment">//班级数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a;i++)&#123;</span><br><span class="line">cin&gt;&gt;classs[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;classs[i];j++)&#123;</span><br><span class="line">cin&gt;&gt;score[j];</span><br><span class="line">sum+=score[j];</span><br><span class="line">avg=sum/classs[i]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;classs[i];j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(score[j]&gt;avg)num++;</span><br><span class="line">&#125;</span><br><span class="line">percent[i]=num/classs[i];</span><br><span class="line">num=<span class="number">0</span>;</span><br><span class="line">avg=<span class="number">0</span>;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.3f&quot;</span>,percent[i]*<span class="number">100</span>);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;%&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>-ACSII-7</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//The Decoder</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">char</span> a[<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">while</span>(cin.<span class="built_in">getline</span>(a,<span class="number">200</span>))&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">sizeof</span>(a);i++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(a[i]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"> a[i]=a[i]<span class="number">-7</span>;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">sizeof</span>(a);i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">cout&lt;&lt;a[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>位数循环相加<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Summing Digits</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sumDigit</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a&lt;<span class="number">10</span>)<span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">while</span>(a&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">sum+=a%<span class="number">10</span>;</span><br><span class="line">a=a/<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum+=a;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">long</span> a[<span class="number">100</span>],sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(a[i]&gt;=<span class="number">10</span>&amp;&amp;a[i]!=<span class="number">0</span>)</span><br><span class="line">a[i]=<span class="built_in">sumDigit</span>(a[i]);</span><br><span class="line"><span class="keyword">if</span>(a[i]!=<span class="number">0</span>)</span><br><span class="line">cout&lt;&lt;a[i]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>平方数<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Square Numbers</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> k,sum=<span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> a[<span class="number">10</span>],b[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i]&gt;&gt;b[i];</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="number">0</span>&amp;&amp;b[i]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> d=<span class="number">0</span>;d&lt;<span class="number">10</span>;d++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=a[d];i&lt;=b[d];i++)&#123;</span><br><span class="line">k=<span class="built_in">sqrt</span>(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j*j==i)sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[d]!=<span class="number">0</span>&amp;&amp;b[d]!=<span class="number">0</span>)&#123;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>B2序列<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//B2-Sequence</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10000</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for(int i=0;i&lt;100;i++)&#123;</span></span><br><span class="line"><span class="comment">//while(scanf(&quot;%d&quot;,&amp;a[i])!=EOF)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="type">int</span> a,z=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;a) &#123;</span><br><span class="line"><span class="type">int</span> b[N],sum=<span class="number">0</span>,flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;a; i++) &#123;</span><br><span class="line">cin&gt;&gt;b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;a; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i; j&lt;a<span class="number">-1</span>; j++) &#123;</span><br><span class="line">sum=b[j]+b[j+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>; k&lt;a; k++) &#123;</span><br><span class="line"><span class="keyword">if</span>(sum == b[k]) &#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>)cout&lt;&lt;<span class="string">&quot;Case #&quot;</span>&lt;&lt;z++&lt;&lt;<span class="string">&quot;: It is a B2-Sequence.&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Case #&quot;</span>&lt;&lt;z++&lt;&lt;<span class="string">&quot;: It is not a B2-Sequence.&quot;</span>&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>字母（两个）位置乘积求和<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Quicksum</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">char</span> c[<span class="number">300</span>];</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(cin.<span class="built_in">getline</span>(c,<span class="number">300</span>))&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(c[<span class="number">0</span>]!=<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">sizeof</span>(c);i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i]==<span class="string">&#x27;\0&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(c[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;c[i]&lt;=<span class="string">&#x27;Z&#x27;</span>)a=c[i]<span class="number">-65</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c[i]=<span class="string">&#x27; &#x27;</span>)a=<span class="number">0</span>;</span><br><span class="line">sum=sum+a*(i+<span class="number">1</span>);</span><br><span class="line">a=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>WERTYU<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WERTYU</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">char</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="type">char</span> c[]=&#123;<span class="string">&quot;1234567890-=QWERTYYUIOP[]\ASDFGHJKL;&#x27;ZXCVBNM,./&quot;</span>&#125;;</span><br><span class="line">cin.<span class="built_in">getline</span>(a,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">sizeof</span>(a);i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">sizeof</span>(c);j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==c[j])a[i]=c[j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">&#x27; &#x27;</span>)a[i]==<span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">&#x27;\0&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">sizeof</span>(a);i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">cout&lt;&lt;a[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li>整数前缀<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Integer Prefix</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200000</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">char</span> a[N],b[N];</span><br><span class="line">cin.<span class="built_in">getline</span>(a,N);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">sizeof</span>(a);i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;a[i]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">b[i]=a[i];</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">sizeof</span>(b);i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i]!=<span class="string">&#x27;\0&#x27;</span>)cout&lt;&lt;b[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b[<span class="number">0</span>]==<span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;-1&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter03-数据链路层</title>
      <link href="/2021/10/17/study/network/chapter03/"/>
      <url>/2021/10/17/study/network/chapter03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>数据链路层使用的信道<ol><li>点对点信道<ul><li>使用一对一的点对点通信方式</li></ul></li><li>广播信道。<ul><li>使用一对多的广播通信方式，过程比较复杂。</li><li>连接的主机很多，因此必须使用专用的共享信道协议来协调这些数据发送数据。</li></ul></li></ol></li><li>两台主机通过互联网进行通信时数据链路层所处的地位<ul><li>H1与H2通过路由器进行通信<br>  <img src="https://z3.ax1x.com/2021/10/12/5mLtJO.png" alt="H1与H2通过路由器进行通信"><br>  H1到H2所经过的网路可以是多种的。</li><li>从层次上来看数据的流动<br>  <img src="https://z3.ax1x.com/2021/10/12/5mL7kV.png" alt="数据链路层的地位"></li><li>只考虑数据在数据链路层的流动<br>  <img src="https://z3.ax1x.com/2021/10/12/5mO11g.png" alt="只考虑数据在数据链路层的流动"></li></ul></li></ul><h2 id="3-1-使用点对点信道的数据链路层"><a href="#3-1-使用点对点信道的数据链路层" class="headerlink" title="3.1 使用点对点信道的数据链路层"></a>3.1 使用点对点信道的数据链路层</h2><h3 id="3-1-1-数据链路和帧"><a href="#3-1-1-数据链路和帧" class="headerlink" title="3.1.1 数据链路和帧"></a>3.1.1 数据链路和帧</h3><ul><li>链路：从一个结点到++相邻结点++的一段物理链路，中间无交换站点。++(物理链路)++{.wavy}</li><li>数据链路：把实现控制数据传输的通信协议的硬件和软件++(网络适配器)++{.wavy}加到链路，就构成了数据链路。++(逻辑链路&#x3D;物理链路+协议)++{.wavy}</li><li>帧：点对点信道的数据链路层的协议数据单元。</li><li>数据链路层的任务<ol><li>把网络层交下来数据++(网络层协议数据单元IP数据报)++{.wavy}的++构成帧++{.wavy}发送到链路上。</li><li>把接收到的帧中的数据取出并上交给网络层</li></ol><ul><li>三层简化模型<br>  <img src="https://z3.ax1x.com/2021/10/12/5mzGTA.png" alt="三层简化模型"></li><li>只考虑数据链路层<br>  <img src="https://z3.ax1x.com/2021/10/12/5mzWlT.png" alt="只考虑数据链路层"></li></ul></li><li>点对点信道的数据链路层在进行通信时的主要步骤<ol><li>结点A的数据链路层把网络层交下来的IP数据报天骄首部和尾部封装成帧。</li><li>结点A把封装好的帧发送给结点B。</li><li>若结点B的数据链路层收到的帧无差错，则从接收到的帧中提取出数据报上交给网络层；否则丢弃。</li></ol></li></ul><h3 id="3-1-2-三个基本问题"><a href="#3-1-2-三个基本问题" class="headerlink" title="3.1.2 三个基本问题"></a>3.1.2 三个基本问题</h3><ol><li>封装成帧<ul><li>在一段数据（IP数据报）的前后分别加上首部和尾部</li><li>首部和尾部的重要作用就是++帧定界++{.wavy}。</li><li>为了提高帧的传输效率，帧的数据部分要尽可能大于首部和尾部的长度</li><li>每一种链路层协议都规定了所能传送的帧的数据部分上限长度——&#x3D;&#x3D;最大传送单元MTU(Maximum Transfer Unit)&#x3D;&#x3D;<br>  <img src="https://z3.ax1x.com/2021/10/12/5niAeO.png" alt="封装成帧"></li><li>当数据是由ASCII码组成的文本文件时，帧定界可以使用特殊的++帧定界符。++<ul><li>帧开始符SOH作为帧的首部开始：01（十六进制编码），00000001（二进制编码）</li><li>帧结束符EOT表示帧的结束：04（十六进制编码），00000100（二进制编码）<br>  <img src="https://z3.ax1x.com/2021/10/12/5nFjPJ.png" alt="控制字符"></li></ul></li><li>若接收端收到不完整的帧（只有开始符SOH而没有结束符EOT）必须丢弃。</li></ul></li><li>透明传输</li></ol><ul><li>“透明”：++某一个实际存在的事物看起来却好像不存在一样++{.wavy}。</li><li>透明传输：在数据链路层的透明传输数据，表示无论什么样的比特组合的数据，都能按照原样没有差错地通过数据链路层。大致的意思就是，数据经过数据链路层后不会产生差错，即数据链路层对这些数据来说是透明的。</li><li>透明传输问题<ul><li>当传送的帧是用文本文件组成的帧时（文本文件中的字符都是从键盘上输入的），其数据部分不会出现帧定界控制字符。数据可以无差错的传输过去，这就是透明传输。</li><li>但当数据时非ASCII码的文本文件时，若传输的数据中任何8比特的组合与帧定界的控制字符的比特编码一样，就会出现帧定界的错误。<br>  <img src="https://z3.ax1x.com/2021/10/12/5nZr0x.png" alt="帧定界错误"></li></ul></li><li>解决办法<br>  字节填充&#x2F;字符填充：<ul><li>在数据中的控制字符的前面插入++转义字符”ESC”(1B,00011011)++{.wavy}。</li><li>若数据中也有转义字符，那么在转义字符前再加一个转义字符，接收端收到连续两个转义字符时，删掉前面的一个。<br>  <img src="https://z3.ax1x.com/2021/10/12/5ne0PS.png" alt="字节填充"></li></ul></li></ul><ol start="3"><li>差错检测</li></ol><ul><li>为什么需要差错检测<ul><li>现实中的通信链路不是理想的。比特在传输过程中会出现差错，比如0变成1，1变成0。</li><li>误码率：传输错误的比特占传输比特总数的比率。与信噪比有很大的关系。</li><li>为保证数据传输的可靠性，必须采用差错检测措施。</li></ul></li><li>循环冗余检验CRC检错技术<ul><li>在数据M（k比特）后添加供差错检测的n位冗余码，构成一个帧发出去，共发送（k+n）位。</li><li>增大了传输开销，但是可以进行差错检测，是必要的。</li></ul></li><li>计算<ul><li>数据M：k比特</li><li>被除数：通过<code>模2运算</code>进行$2^n$乘M的运算相当于在数据M后加n个0得到（k+n）位的被除数</li><li>除数：收发双方事先商定好的除数P,长度为（n+1）位</li><li>冗余码：被除数除以除数求得的余数R作为n位冗余码，称为++帧检验序列FCS++{.wavy}</li><li>最后发出去的数据有（k+n）位<br>  <img src="https://z3.ax1x.com/2021/10/12/5nKGJf.png" alt="例子"></li><li>接收端对接收到的每一帧经过CRC检验后<ol><li>若余数R&#x3D;0,帧没有差错，接收。</li><li>若余数R≠0,帧出现差错，丢弃。</li></ol></li><li>关于除数P<ul><li>用多项式表示<ul><li>ex:P(X)&#x3D;$X^{3}$ + $X^{2}$ + 1代表除数P&#x3D;1101</li></ul></li><li>常用的生成多项式<ul><li>CRC-16&#x3D;$X^{16}$ + $X^{15}$ +  $X^{2}$ + 1</li><li>CRC-CCITT&#x3D;$X^{15}$ + $X^{12}$ + $X^{5}$ + 1</li><li>CRC-32&#x3D;$X^{32}$ + $X^{26}$ + $X^{23}$ + $X^{22}$ + $X^{16}$ + $X^{12}$ + $X^{11}$ + $X^{10}$ + $X^{8}$ + $X^{7}$ + $X^{5}$ + $X^{4}$ + $X^{2}$ + X + 1</li></ul></li></ul></li></ul></li><li>数据链路层仅仅使用循环冗余检验CRC差错检测技术，只能做到++对帧的无差错接收++，即&#x3D;&#x3D;凡是接收端数据链路层接受的帧，我们都认为这些帧在传输过程中没有产生差错&#x3D;&#x3D;</li><li>可靠传输：数据链路层在发送端发送什么，接收端就收到什么。在CRC检错的基础上，再加上帧编号、确认和重传机制。</li><li>传输差错<ul><li>比特差错</li><li>传输差错<ul><li>帧丢失</li><li>帧重复</li><li>帧失序</li></ul></li></ul></li><li>在数据链路层实现了++无比特差错的传输++，但并不是可靠传输</li></ul><h2 id="3-2-点对点协议PPP"><a href="#3-2-点对点协议PPP" class="headerlink" title="3.2 点对点协议PPP"></a>3.2 点对点协议PPP</h2><p>通信线路较差的年代，流行的数据链路层协议是++高级数据链路控制HDLC++<br>现在，对于点对点的链路，++点对点协议PPP++使用的最为广泛</p><h3 id="3-2-1-PPP协议的特点"><a href="#3-2-1-PPP协议的特点" class="headerlink" title="3.2.1 PPP协议的特点"></a>3.2.1 PPP协议的特点</h3><ul><li>PPP协议就是用户计算机和ISP进行通信时所使用的数据链路层协议。</li><li>PPP协议在1994年就已经成为互联网的正式标准。<br><img src="https://z3.ax1x.com/2021/10/14/51Zx5n.png" alt="PPP协议"></li></ul><ol><li>PPP协议应满足的需求<ul><li>简单：作为首要的需求。提高了不同厂商的互操作性。</li><li>封装成帧：必须规定特殊的字符作为++帧定界符++</li><li>透明性：必须保证数据传输的透明性。</li><li>多种网络协议：在同一条物理链路上同时支持多种网络层协议。</li><li>多种类型链路：能够在多种链路上运行</li><li>差错检测：必须对接收端接到的帧进行检测，并立即丢弃有差错的帧。</li><li>检测连接状态：能够即使自动检测出链路是否处于正常工作状态。</li><li>最大传送单元：必须对每一种类型的点对点链路设置++最大传送单元MTU++(数据部分的最大长度)的标准默认值。</li><li>网络层地址协商：必须提供一种机制使通信的两个网络层的实体能够通过协商知道或能够配置彼此的网络层地址。</li><li>数据压缩协商：必须提供一种方法来协商使用数据压缩算法</li></ul></li><li>PPP不需要的功能<ul><li>纠错</li><li>设置序号</li><li>流量控制</li><li>多点链路</li><li>单工和半双工链路</li></ul></li><li>PPP协议的组成<ul><li>一个将IP数据报封装到串行链路的方法。</li><li>链路控制协议LCP:建立、配置和测试数据链路连接。</li><li>一套网络控制协议NCP:支持不同的网络层协议。</li></ul></li></ol><h3 id="3-2-2-PPP协议的帧格式"><a href="#3-2-2-PPP协议的帧格式" class="headerlink" title="3.2.2 PPP协议的帧格式"></a>3.2.2 PPP协议的帧格式</h3><ol><li>各字段的意义<ul><li>PPP帧格式如图所示<br> <img src="https://z3.ax1x.com/2021/10/17/5Y3Z38.png" alt="PPP帧格式"></li><li>首部四个字段<ul><li>第一个字段为标志字符<code>F(Flag)</code>,规定为<code>0x7E</code>(二进制为01111110)，1字节</li><li>第二个字段<code>A</code>规定为<code>0xFF</code>(11111111),地址字段，1字节</li><li>第三个字段<code>C</code>规定为<code>0x03</code>(00000011),控制字段，1字节</li><li>第四个字段为协议字段，2字节</li></ul></li></ul></li></ol><table><thead><tr><th>协议字段</th><th>PPP帧信息字段</th></tr></thead><tbody><tr><td>0x0021</td><td>IP数据报</td></tr><tr><td>0xC021</td><td>PPP链路控制协议LCP的数据</td></tr><tr><td>0x8021</td><td>网络层的控制数据</td></tr></tbody></table><ul><li>信息字段的长度可变，不超过1500字节。</li><li>尾部两个字段</li><li>第一个字段是使用&#x3D;&#x3D;CRC的帧检验序列FCS&#x3D;&#x3D;,2字节</li><li>第二个字段为标志字符<code>F(Flag)</code>,规定为<code>0x7E</code>(二进制为01111110)，1字节，与首部的第一个字段构成PPP帧的定界符</li><li>连续两帧之间只需要用一个标志字段，如果出现两个连续的标志字段，表示这是一个空帧，应当丢弃。</li></ul><ol start="2"><li>字节填充<ul><li>当信息字段中出现和标志字符<code>0x7E</code>一样的比特组合时，要采取一定的措施使这种比特组合不出现在信息字段中</li><li>当PPP使用异步传输（逐个字符传送），转义字符定义为<code>0x7D</code>,RFC1662规定的填充方法：<ul><li><code>0x7E</code>→2字节序列<code>(0x7D,0x5E)</code></li><li><code>0x7D</code>→2字节序列<code>(0x7D,0x5D)</code></li><li>若出现ASCLL码的控制字符（数值小于<code>0x20</code>的字符），则在字符前加入一个<code>0x7D</code>字节<ul><li>如<code>0x03</code>(为控制字符<code>ETX</code>代表传输结束)→2字节序列<code>(0x7D,0x23)</code></li></ul></li></ul></li><li>接收端进行相反的变换，就可以恢复出原来的数据</li></ul></li><li>零比特传输<ul><li>PPP协议在使用<code>SONET/SDH</code>链路时，使用同步传输（一连串的比特连续发送），采用零比特填充实现透明传输</li><li>具体做法：<ol><li>发送端扫描整个信息字段，发现5个连续的1，即在后面填充一个0，以保证不会出现6个连续的1，即不会出现标志字符<code>F(0x7E)</code>的比特组合</li><li>接收端首先通过标志字段确定的边界，接着扫描比特流，每当遇到5个连续的1时，删除后面的0<br> <img src="https://z3.ax1x.com/2021/10/17/5YYOS0.png" alt="零比特传输"></li></ol></li></ul></li></ol><h3 id="3-2-3-PPP协议的工作状态"><a href="#3-2-3-PPP协议的工作状态" class="headerlink" title="3.2.3 PPP协议的工作状态"></a>3.2.3 PPP协议的工作状态</h3><p>PPP链路一开始是怎样被初始化的？</p><ul><li>简单概述<ol><li>用户拨号接入ISP,建立<code>物理连接</code></li><li>个人电脑向ISP发送<code>链路控制协议LCP分组(多个PPP帧)</code>,协商将要使用的PPP参数,协商成功后建立<code>LCP连接</code></li><li>进行网络层配置，网络控制协议NCP给接入的个人电脑分配一个临时的IP地址</li><li>通信结束后，NCP释放网络层连接，收回IP地址；LCP释放数据链路层连接；最后释放物理层的连接<br>  PPP链路的起始和终止状态永远是“链路静止”状态，这是个人电脑和ISP的路由器之间并不存在物理层的连接<br>  <img src="https://z3.ax1x.com/2021/10/17/5Yc3IP.png" alt="PPP协议的状态图"></li></ol></li><li>详细过程<ol><li>个人电脑通过调制解调器呼叫路由器时，路由器检测到调制解调器发出的载波信号。双方建立<code>物理连接</code>,PPP进入<code>链接建立(Link Establish)</code>状态，目的是建立++链路层的LCP连接++</li><li>LCP开始协商配置选项，发送LCP的<code>配置请求帧(Configure-Request)</code>(PPP帧)<ul><li>协议字段为LCP对应的代码</li><li>信息字段包含特定的配置请求，LCP配置选项包括：<ul><li>链路上的最大帧长</li><li>所使用的<code>鉴别协议</code>的规约</li><li>不使用PPP帧的地址和控制字段（固定，无信息量，可省略）</li></ul></li><li>另一端的响应<ol><li>[配置确认帧(Configure-Ack)]{.aqua}：所有选项都接受</li><li>[配置否认帧(Configure-Nak)]{.aqua}：所有选项都理解但不能接受</li><li>[配置拒绝帧(Configure-Reject)]{.aqua}：选项有的不能识别或不能接受，需要协商</li></ol></li></ul></li><li>协商结束后建立LCP链路，进入<code>鉴别(Authentication Protocol)</code>状态<ul><li>只允许传送LCP协议的分组、鉴别协议的分组、监测链路质量的分组</li><li>若使用<code>口令鉴别协议PAP</code>,需要发起通信的一方发送身份标识符和口令（用户名，密码）</li><li>若需要更好安全性，可使用复杂的<code>口令握手鉴别协议CHAP</code></li><li>若鉴别身份失败，进入<code>链路终止(Link Terminate)</code>状态；鉴别成功，则进入<code>网络层协议(Network-Layer Protocol)</code>状态</li></ul></li><li>在<code>网络层协议</code>状态，PPP链路两端的<code>网络控制协议NCP</code>根据网络层的不同协议互相交换网络层特定的网络控制分组<ul><li>PPP两端的网络层可以允许不同的网络层协议，但仍可以使用同一个PPP协议进行通信</li><li>如：若在PPP链路上运行的是IP协议，则对PPP链路的每一端配置<code>IP协议模块</code>时要使用NCP中支持IP的协议<code>IP控制协议IPCP</code><ul><li>IPCP分组也封装为PPP帧（协议字段为0x8021）在PPP链路上传送，双方可协商使用压缩的IP和TCP首部，减少发送的比特</li></ul></li></ul></li><li>网络层配置完毕后，链路就进入了可以进行数据通信的<code>链路打开</code>状态，链路两端可向彼此发送分组，还可发送<code>回送请求LCP分组</code>和<code>回送回答LCP分组</code>检测链路的状态</li><li>传输结束后，链路的一端发出<code>终止请求LCP分组</code>，收到另一端的<code>终止确认LCP分组</code>后，转到<code>链路终止</code>状态；若链路发生故障，也转到<code>链路终止</code>状态。当调制解调器的载波停止后，回到<code>链路静止</code>状态</li></ol></li><li>总结：设备之间无链路→建立物理链路→建立链路控制协议LCP链路→经过鉴定后建立网络控制协议NCP链路→交换数据。<br>PPP协议不单单是数据链路层协议，还包含了物理层和网络层的内容</li></ul><h2 id="3-3-使用广播信道的数据链路层"><a href="#3-3-使用广播信道的数据链路层" class="headerlink" title="3.3 使用广播信道的数据链路层"></a>3.3 使用广播信道的数据链路层</h2><h3 id="3-3-1-局域网的数据链路层"><a href="#3-3-1-局域网的数据链路层" class="headerlink" title="3.3.1 局域网的数据链路层"></a>3.3.1 局域网的数据链路层</h3><ul><li>局域网最主要的特点<br>  网络为一个单位所拥有，且地理范围和站点的数目均受限。</li><li>局域网的优点<ul><li>具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。</li><li>便于系统的扩展和逐渐的演变，各设备的位置可灵活调制和改变</li><li>提高了系统的可靠性、可用性和生存性</li></ul></li><li>局域网按网络拓扑分类<ol><li>星型网：由于<code>集线器(hub)</code>的出现，类似结构的局域网以太网广泛应用</li><li>环形网</li><li>总线网<br>  <img src="https://z3.ax1x.com/2021/10/18/5UjnRf.png" alt="局域网分类"></li></ol></li><li>如何使众多的用户能够合理而方便地共享通信媒体资源？<ul><li>静态划分信道<ul><li>频分复用</li><li>时分复用</li><li>码分复用</li><li>波分复用<br>  代价较高，不适合于局域网。</li></ul></li><li>动态媒体接入控制<ul><li>随机接入：所有用户可随机地发送消息。会产生碰撞，需要解决碰撞的网络协议(CSMA&#x2F;CD)</li><li>受控接入：用户发送信息必须受一定的控制。目前在局域网中使用的较少。</li></ul></li></ul></li><li>以太网的两个标准<ol><li>DIX Ethernet V2：由DIX三个公司联合提出并修订，成为世界上第一个局域网产品的规约</li><li>IEEE 802.3：是第一个IEEE的以太网标准</li></ol><ul><li>两种标准只有很小的差别，因此很多人把802.3局域网简称为以太网</li><li>为了使数据链路层能更好地适应多种局域网标准，IEEE 802委员会把局域网的数据链路层拆成两个子层<ul><li>逻辑链路控制LLC(Logical Link Control)子层<ul><li>与传输媒体无关</li></ul></li><li>媒体接入控制MAC(Medium Link Control)子层<ul><li>存放与接入到传输媒体有关的内容</li></ul></li></ul></li><li>不管采用何种传输媒体和MAC子层的局域网对LLC子层来说都是透明的<br>  <img src="https://z3.ax1x.com/2021/10/18/5UxG80.png" alt="LLC"></li><li>目前使用最多的局域网只剩下DIX Ethernet V2;IEEE802委员会制定的逻辑链路控制子层LLC的作用已经消失了，很多厂商生产的适配器上仅装有MAC协议而没有LLC协议</li></ul></li><li>适配器的作用<ul><li>适配器用来计算机与外界局域网进行连接<br>  作用：</li></ul><ol><li>++进行数据串行传输和并行传输的转换++：适配器和局域网之间的通信是通过电缆或双绞线以串行传输方式进行的；适配器和计算机之间的通信是通过计算机主板上的I&#x2F;O总线以并行传输方式进行的。</li><li>++对数据进行缓存++：网络上的数据率和计算机总线上的数据率并不相同</li><li>++在计算机的操作系统安装设备驱动程序。++</li><li>++实现以太网协议。++<br>  <img src="https://z3.ax1x.com/2021/10/18/5UzfyT.png" alt="适配器"></li></ol></li></ul><h3 id="3-3-2-CSMA-x2F-CD协议"><a href="#3-3-2-CSMA-x2F-CD协议" class="headerlink" title="3.3.2 CSMA&#x2F;CD协议"></a>3.3.2 CSMA&#x2F;CD协议</h3><ul><li>总线的特点<ul><li>当一台计算机发送数据时，总线上的所有计算机都能检测到这个数据。这就是广播通信方式。</li><li>为了实现一对一通信，可以使每台计算机的适配器都拥有一个不同于其他适配器的地址。</li></ul></li><li>如何实现通信的简便？<ol><li>采用无连接的工作方式</li><li>发送的数据都使用曼彻斯特编码的信号（缺点是所占的频带宽度比原始的基带信号增加了一倍）</li></ol></li><li>CSMA&#x2F;CD协议：载波监听多点接入&#x2F;碰撞检测<ul><li>多点接入：总线型网络。</li><li>协议的实质是[载波监听]{.aqua}和[碰撞检测]{.aqua}<ul><li>载波监听：边发送边监听。++不管在想要发送数据之前，还是在发送数据之中，每个站必须不停地检测信道++</li><li>碰撞检测：适配器边发送数据边检测信道上的信号电压的变化情况。也称冲突检测<ul><li>当有主机在总线上发送数据时，总线上的信号电压变化幅度会增大</li><li>当信号变化幅度超过一定的门限值时，表明产生了碰撞</li><li>一旦总线上出现了碰撞，适配器立即停止发送数据，等待一段随机时间后重新发送</li></ul></li></ul></li></ul></li><li>为什么要进行碰撞检测？<ul><li>++由于电磁波在总线上的传播速率是有限的，++当某个站监听到总线是空闲时，也可能总线++并非真正是空闲的。++ <ul><li>A 向 B 发出的信息，要经过一定的时间后才能传送到 B。</li><li>B 若在 A 发送的信息到达 B 之前发送自己的帧 (因为这时 B 的载波监听检测不到 A 所发送的信息)，则必然要在某个时间和 A 发送的帧发生碰撞。</li><li>碰撞的结果是两个帧都变得无用。所以需要在发送期间进行碰撞检测，以检测冲突。<br>  <img src="https://z3.ax1x.com/2021/10/19/5wX0fI.png" alt="传播时延对载波监听的影响"></li></ul></li><li>在使用CSMA&#x2F;CD协议时，一个站不能同时发送和接收；因此使用CSMA&#x2F;CD协议的以太网不可能进行券商股通信而只能进行++半双工通信++</li><li>&#x3D;&#x3D;电磁波在1km电缆的传播时延约为5μs&#x3D;&#x3D;</li></ul></li><li>争用期<ul><li>每一个站在自己发送数据之后的一小段时间内，存在着遭遇碰撞的可能性；以太网不能保证在检测到信道空闲后的某一段时间内，一定能把自己的数据帧成功发送出去。称为++发送的不确定性.++</li><li>端到端的往返时间2$\tau$为争用期，也称碰撞窗口。</li><li>&#x3D;&#x3D;经过争用期这段时间还未检测到碰撞，才能肯定这次发送不会发生碰撞。&#x3D;&#x3D;</li><li>具体的争用期时间为51.2μs。对于10Mbit&#x2F;s以太网，在争用期可发送512比特，即64字节。因此也可以说争用期时512&#x3D;&#x3D;比特时间&#x3D;&#x3D;或512&#x3D;&#x3D;比特&#x3D;&#x3D;</li></ul></li><li>阶段二进制指数退避<ul><li>++确定碰撞后的重传时机，退避一个随机时间++</li><li>如果大家都同时重传，生成最小退避时间的站将最先获得发送权</li><li>从离散的整数集合[0,1,…,($2^k$-1)]中随机取出一个数，记为r,重传时间为r倍的争用期。<br>  k&#x3D;Min[重传次数，10];</li><li>当重传次数达16次仍不成功，则丢弃此帧，并向高层报告。</li></ul></li><li>最短有效帧长<ul><li>若一个站发送一个非常小的帧，在帧到达目的地之前发生了碰撞，而发送方却不知道，不会发起重传，这种情况是我们不希望的。</li><li>以太网规定一个最短帧长64字节，即512比特，即在10Mbit&#x2F;s的以太网中，在争用期期间发送的比特数。</li><li>若发送的数据非常少，要加入填充字符。</li><li>&#x3D;&#x3D;如果在发送了64字节没有发生碰撞，那么后续发送的数据就一定不会发生冲突&#x3D;&#x3D;</li><li>&#x3D;&#x3D;凡长度小于64字节的帧都是由于冲突而异常中止的无效帧&#x3D;&#x3D;</li><li>&#x3D;&#x3D;最短帧长为信道在争用期发送的字节数&#x3D;&#x3D;</li></ul></li><li>强化碰撞<ul><li>当发送数据的站一旦发现发生了碰撞时，除了立即停止发送数据之外，&#x3D;&#x3D;还需要继续发送32比特或48比特的人为干扰信号&#x3D;&#x3D;,以便让所有用户都知道发生了碰撞。</li><li>对于10Mbit&#x2F;s以太网，发送32或48比特需要3.2或4.8μs<br>  <img src="https://z3.ax1x.com/2021/10/19/50pWAU.png" alt="人为干扰信号"></li><li>总线被占用的时间：$T_B+T_J$+$\tau$</li></ul></li><li>帧间最小间隔为9.6μs，96比特时间。使刚刚收到数据帧的站的接收缓存来得及清理。</li><li>CSMA&#x2F;CD的要点<ol><li>准备发送。但在发送之前，必须先检测信道。</li><li>检测信道。若检测到信道忙，则应不停地检测，一直等待信道转为空闲。若检测到信道空闲，并在 96 比特时间内信道保持空闲（保证了帧间最小间隔），就发送这个帧。</li><li>检查碰撞。在发送过程中仍不停地检测信道，即网络适配器要边发送边监听。这里只有两种可能性：<ul><li>发送成功：在争用期内一直未检测到碰撞。这个帧肯定能够发送成功。发送完毕后，其他什么也不做。然后回到 1。</li><li>发送失败：在争用期内检测到碰撞。这时立即停止发送数据，并按规定发送人为干扰信号。适配器接着就执行指数退避算法，等待 r 倍 512 比特时间(争用期)后，返回到步骤 (2)，继续检测信道。但若重传达 16 次仍不能成功，则停止重传而向上报错。</li></ul></li></ol></li></ul><h3 id="3-3-3-使用集线器的星形拓扑"><a href="#3-3-3-使用集线器的星形拓扑" class="headerlink" title="3.3.3 使用集线器的星形拓扑"></a>3.3.3 使用集线器的星形拓扑</h3><ul><li>传统以太网最初使用粗同轴电缆，演化到比较便宜的细同轴电缆，最后使用更加便宜和灵活的双绞线</li><li>这种以太网采用++星形拓扑++，在星型的中心增加了一种可靠性非常高的设备集线器（hub）</li><li>每个站需要用两对无屏蔽双绞线（放在一根电缆里），用于发送和接收，两端使用RJ-45插头</li><li>1990年IEEE制定出星形以太网10BASE-T的标准802.3i<ul><li>10：10Mbit&#x2F;s数据率</li><li>BASE：基带信号</li><li>T：双绞线</li></ul></li><li>10BASE-T以太网的通信距离稍短，每个站到集线器的距离不超过100m</li><li>10BASE-T双绞线以太网的出现，是局域网发展史上一个重要的里程碑，占据了统治地位</li><li>使双绞线能够传送高速数据的主要措施是把双绞线的绞合度做的非常精确<br><img src="https://z3.ax1x.com/2021/10/20/5DIigU.png" alt="使用集线器的双绞线以太网"></li><li>集线器的特点<ol><li>使用集线器的局域网在物理上是一个星形网，但由于集线器使用电子器件来模拟实际电缆线的工作，因此整个系统仍像传统以太网那样运行。使用集线器的以太网在逻辑上仍然是一个总线网，各站共享逻辑上的总线，使用的还是CSMA&#x2F;CD协议，在同一时刻至多只允许一个站发送数据</li><li>一个集线器有许多端口（8至16个，RJ-45插头），像一个多端口的转发器</li><li>工作在物理层，不进行碰撞检测</li><li>采用了专门的芯片，进行自适应串音回波抵消<br><img src="https://z3.ax1x.com/2021/10/20/5DT96U.png" alt="三个端口的集线器"></li></ol></li><li>IEEE 802.3标准还可使用光纤作为传输媒体，标准为10BASE-F系列，F代表光纤，用作集线器的远程连接</li></ul><h3 id="3-3-4-以太网的信道利用率"><a href="#3-3-4-以太网的信道利用率" class="headerlink" title="3.3.4 以太网的信道利用率"></a>3.3.4 以太网的信道利用率</h3><ul><li>当扣除碰撞所造成的信道损失后，以太网的信道利用率并不能达到100%</li><li>一个站在发送帧时出现了碰撞，经过一个争用期2$\tau$后，可能又出现了碰撞，经过了若干个争用期后，一个站就发送成功了</li><li>假设发送帧需要的时间为$T_0$,发送时间为帧长除以发送速率<br><img src="https://z3.ax1x.com/2021/10/20/5D7Haj.png" alt="以太网的信道被占用的情况"></li><li>发送一个帧需要占用信道的时间是$T_0$+$\tau$,经过$T_0$+$\tau$后以太网的没有才完全进入空闲状态</li><li>参数α：以太网单程端到端的时延$\tau$与帧的发送时间$T_0$之比<ul><li>α&#x3D; $\frac\tau{T_0}$</li><li>要提高以太网的信道利用率，必须减小 $\tau$ 与$T_0$之比</li><li>α →0，表示一发生碰撞就立即可以检测出来， 并立即停止发送，因而信道利用率很高。</li><li>α 越大，表明争用期所占的比例增大，每发生一次碰撞就浪费许多信道资源，使得信道利用率明显降低。 </li><li>为提高利用率，以太网的参数a的值应当尽可能小些。<ul><li>对以太网参数 α 的要求是：<ul><li>当数据率一定时，以太网的连线的长度受到限制，否则 α 的数值会太大。</li><li>以太网的帧长不能太短，否则 $T_0$ 的值会太小，使 α 值太大。</li></ul></li></ul></li></ul></li><li>现在考虑一种理想化情况，假定以太网上的各站发送数据都不会产生碰撞，并且能够非常有效的利用网络的传输资源，即总线一旦空闲就有某一站立即发送数据，这样，发送一帧占用线路的时间是$T_0$ +$\tau$，而帧本身的发送时间是$T_0$ ，我们可以计算出极限信道利用率$S_{max}$为：<ul><li><p>$S_{max}&#x3D; \frac{T_0}{T_0+\tau} &#x3D; \frac 1{1+α}$</p></li><li><p>&#x3D;&#x3D;只有当参数α远小于1才能得到尽可能高的极限信道利用率&#x3D;&#x3D;</p></li><li><p>当以太网的利用率达到30%时就已经处于++重载++的情况，很多网络容量被网上的碰撞消耗掉了。</p></li></ul></li></ul><h3 id="3-3-5-以太网的MAC层"><a href="#3-3-5-以太网的MAC层" class="headerlink" title="3.3.5 以太网的MAC层"></a>3.3.5 以太网的MAC层</h3><ol><li>MAC层的硬件地址<ul><li>硬件地址又称为物理地址或MAC地址</li><li>地址就是识别某个系统的一个非常重要的标识符</li><li>&#x3D;&#x3D;名字指出我们所要寻找的那个资源，地址指出那个资源在何处，路由告诉我们如何到达该处&#x3D;&#x3D;</li><li>名字应当与系统的所在地无关</li><li>IEEE802为局域网规定了一种48位的全球地址，即固化在适配器的ROM中的地址<ol><li>一台计算机更换了一个适配器，那么这台计算机的“地址”也就变了</li><li>一台计算机的地理位置改变，局域网中的“地址”不变</li></ol></li><li>局域网的“地址”应当时每一个站的“名字”或标识符</li><li>若一个主机或路由器安装有多个适配器，那么它有多个“地址”，因此实际上，这种48位的“地址”应当是某个接口的标识符</li><li>IEEE802标准规定MAC地址字段可采用6字节（48位）或2字节（16位）</li><li>48位的MAC地址<ul><li>IEEE的注册管理机构RA&#x3D;&#x3D;负责分配地址地段的6个字节的前三个字节&#x3D;&#x3D;，称为++组织唯一标识符OUI++,也叫做公司标识符</li><li>后三个字节由厂家自行指派，称为++扩展标识符++</li><li>购买一个OUI,就可以生成出2^24个不同的6字节MAC地址，这种地址称为EUI-48，EUI表示扩展的唯一标识符</li><li>IEEE规定地址字段的第一字节的最低有效位为&#x3D;&#x3D;I&#x2F;G(Individual&#x2F;Group)&#x3D;&#x3D;位<ul><li>I&#x2F;G位为0时，表示一个++单个站地址++</li><li>I&#x2F;G位为1时，表示一个++组地址++，用来进行多播</li><li>IEEE 802.4标准把最低位写在最左边</li></ul></li><li>所有 48 位都为 1 时，为广播地址。只能作为目的地址使用。</li><li>IEEE把地址字段第一字节的第二低位为&#x3D;&#x3D;G&#x2F;L(Global&#x2F;Local)&#x3D;&#x3D;位<ul><li>G&#x2F;L位为0时，表示全球管理，厂商向IEEE购买的OUI都属于全球管理</li><li>G&#x2F;L位为1时，表示本地管理，用户可以任意分配网络上的地址</li></ul></li></ul></li><li>适配器检查MAC地址<ul><li>适配器有过滤功能，适配器从网络上每收到一个MAC帧就先用硬件检查MAC帧中的目的地址，如果是本站的帧就收下，否则就丢弃</li><li>发往本站的帧包括：<ol><li>单播帧（一对一）：收到的帧的MAC地址与本站的MAC地址相同</li><li>广播帧（一对全体）：即发送给本局域网上所有站点的帧（全1地址）</li><li>多播帧（一对多）：发送给本局域网上一部分站点的帧</li></ol></li><li>所有的适配器都至少应当能识别前两种帧，即能够识别单播和广播地址；只有目的地址才能时延广播地址和多播地址</li><li>适配器的一种特殊工作方式——混杂方式（嗅探器）<ul><li>工作在混杂方式的适配器只要听到以太网上有帧就悄悄接收下来，实际上是“窃听”其他站点的通信而不中断其他站点的通信</li><li>双刃剑：<ul><li>黑客非法获取网上用户的口令</li><li>监视和分析以太网上的流量；帮助学习网络的人更理解各种网络协议的工作原理。</li></ul></li></ul></li></ul></li></ul></li><li>MAC帧的格式</li></ol><ul><li>两种标准  <ul><li>DIX Ethernet V2标准。使用的最多</li><li>IEEE 的 802.3 标准<br><img src="https://z3.ax1x.com/2021/10/21/5y0faD.png" alt="MAC帧格式"></li></ul></li><li>五个字段<ul><li>第一个字段：目的地址，6字节</li><li>第二个字段：源地址，6字节</li><li>第三个字段：类型字段（上层使用的协议），2字节<ul><li>0x0800:IP数据报</li></ul></li><li>第四个字段：数据字段，长度在46~1500字节（46字节&#x3D;最小长度64字节-18字节的首部和尾部）</li><li>第五个字段：帧检验序列FCS,4字节<ul><li>当传输媒体的误码率为1×$10^{-8}$时，MAC子层可使未检测到的差错小于1×$10^{-14}$</li><li>FCS检验的范围从目的地址到FCS这五个字段</li></ul></li></ul></li><li>MAC子层如何知道数据部分的长度？<ul><li>曼彻斯特编码的每一个码元的正中间一定有一次电压的变化</li><li>若帧传送完成，适配器上的接口上的电压也不再发生变化，即找到帧的结束位置</li><li>在结束位置往前数4个字节，确定数据字段的结束位置</li></ul></li><li>IP层如何知道有没有填充字节？<ul><li>IP协议的首部有一个“总长度”字段</li><li>如果“总长度”超过或等于46字节，那么没有填充字节；反之，则有填充字节</li></ul></li><li>物理层插入的8个字节<ul><li>两个字段<ul><li>第一个字段：前同步码，用来迅速实现 MAC 帧的比特同步。7字节</li><li>第二个字段：帧开始定界符，表示后面的信息就是 MAC 帧。1字节</li></ul></li></ul></li><li>无效的MAC帧<ul><li>帧的长度不是整数个字节</li><li>FCS查到有差错</li><li>数据字段的长度不在46-1500字节之间，MAC帧的长度不在64-1518之间</li><li>数据字段的长度与长度字段的值不一致</li></ul></li><li>IEEE 802.3标准MAC帧（与V2的区别）<ol><li>(IEEE 802.3 规定的 MAC 帧的第三个字段是“长度 &#x2F; 类型”。<br> 当这个字段值大于 0x0600 时（相当于十进制的1536），就表示“类型”。这样的帧和以太网V2 MAC 帧完全一样。<br> 当这个字段值小于 0x0600 时才表示“长度”。</li><li>当“长度&#x2F;类型”字段值小于 0x0600 时，数据字段必须装入上面的逻辑链路控制 LLC 子层的 LLC 帧</li></ol></li></ul><h2 id="3-4-扩展的以太网"><a href="#3-4-扩展的以太网" class="headerlink" title="3.4 扩展的以太网"></a>3.4 扩展的以太网</h2><p>&#x3D;&#x3D;我们希望把以太网的范围扩展&#x3D;&#x3D;</p><h3 id="3-4-1-在物理层扩展以太网"><a href="#3-4-1-在物理层扩展以太网" class="headerlink" title="3.4.1 在物理层扩展以太网"></a>3.4.1 在物理层扩展以太网</h3><ul><li>用光纤扩展<ul><li>一对光纤和一对光纤调制解调器<br>  <img src="https://z3.ax1x.com/2021/10/22/5cO6yj.png" alt="主机使用光纤和一对光纤调制解调器连接到集线器"></li><li>光纤调制解调器的作用就是进行光信号和电信号的转换，可以很容易地使主机和几公里以外的集线器相连接</li></ul></li><li>用集线器扩展<ul><li>用多个集线器，可以连接成覆盖范围更大范围的多级星形结构的以太网</li><li>例如，一个学院的三个系各有一个10BASE-T以太网，可通过一个主干集线器把各系的以太网连接起来，成为一个更大的以太网<br>  <img src="https://z3.ax1x.com/2021/10/22/5cXBH1.png"></li><li>优点：<ol><li>使学院不同系的以太网上的计算机能够跨系通信。实际上三个独立碰撞域变成一个更大的碰撞域。</li><li>扩大了以太网覆盖的地理范围</li></ol></li><li>缺点<ol><li>碰撞域增大，总吞吐量并未提高</li><li>若以太网的数据率不同，则不能用集线器连接起来</li></ol></li></ul></li></ul><h3 id="3-4-2-在数据链路层扩展以太网"><a href="#3-4-2-在数据链路层扩展以太网" class="headerlink" title="3.4.2 在数据链路层扩展以太网"></a>3.4.2 在数据链路层扩展以太网</h3><ul><li>最初人们使用网桥对收到的帧根据其MAC帧的目的地址进行转发和过滤</li><li>1990年，交换机集线器（第二代交换机）问世，工作在数据链路层，淘汰了网桥</li></ul><ol><li>以太网交换机的特点<ul><li>多端口（十几个或更多），级联端口</li><li>全双工</li><li>具有并行性，可同时连接多对端口，多对主机可同时通信。通信主机&#x3D;&#x3D;独占传输媒体，无碰撞的传输数据&#x3D;&#x3D;</li><li>端口具有存储器，可对帧进行缓存</li><li>即插即用，通过自[学习算法]{.aqua}建立&#x3D;&#x3D;帧交换表（内容可寻址存储器CAM）&#x3D;&#x3D;</li><li>使用专用的交换结构芯片，用硬件转发帧，转发速率高于用软件转发的网桥。</li><li>用户独享带宽，增加了总容量</li><li>从共享总线以太网转到交换式以太网是，所有接入设备的软件和硬件、适配器等都不需要做任何改动</li><li>具有多种速率的端口</li><li>交换方式<ol><li>大多数采用存储转发方式进行转发</li><li>直通<ul><li>不对数据帧进行缓存，立即按目的MAC地址绝对帧的转发端口，提高了转发速度</li><li>缺点是不检查差错，会转发无效帧到其他站</li><li>当需要进行速率匹配、协议转换或差错检测时仍要采用基于软件的存储转发方式进行交换。</li></ul></li></ol></li></ul></li><li>以太网交换机的自学习能力<br><img src="https://z3.ax1x.com/2021/11/07/Il57lR.png" alt="建立交换表"></li></ol><ul><li>学习过程<ul><li>A-&gt;B</li></ul><ol><li>A 先向 B 发送一帧，从接口 1 进入到交换机。</li><li>交换机收到帧后，先查找交换表，没有查到应从哪个接口转发这个帧。</li><li>交换机把这个帧的源地址 A 和接口1  写入交换表中，并向除接口1以外的所有的接口广播这个帧。</li><li>C 和 D 将丢弃这个帧，因为目的地址不对。只有 B 才收下这个目的地址正确的帧。这也称为过滤。</li><li>重新写入交换表的项目 (A, 1) 可以看出，以后不管从哪一个接口收到帧，只要其目的地址是A，就应当把收到的帧从接口1转发出去。</li></ol><ul><li>B-&gt;A</li></ul><ol><li>B 通过接口 3 向 A 发送一帧。</li><li>交换机查找交换表，发现交换表中的 MAC 地址有 A。表明要发送给A的帧（即目的地址为 A 的帧）应从接口1转发。于是就把这个帧传送到接口 1 转发给 A。显然，现在已经没有必要再广播收到的帧。</li><li>交换表这时新增加的项目 (B, 3)，表明今后如有发送给 B 的帧，就应当从接口 3 转发出去。</li><li>经过一段时间后，只要主机 C 和 D 也向其他主机发送帧，以太网交换机中的交换表就会把转发到 C 或 D 应当经过的接口号（2 或 4）写入到交换表中。</li></ol><ul><li>若交换表中给出的接口就是该帧进入交换机的接口，则应丢弃这个帧（因为这时不需要经过交换机进行转发）。</li></ul></li><li>写入时间<ul><li>考虑到可能在交换机的端口更换主机，或者主机更换了网络适配器，交换表中的内容会失效，因此，交换表写入一个项目时会记下当前时间，超过设定的时间后被自动删除。交换表实际有三列，MAC地址、端口和写入时间。</li></ul></li><li>生成树协议STP<ul><li>增加冗余链路时，自学习过程可能导致以太网帧在网络的某个链路无限制的兜圈子<br>  <img src="https://z3.ax1x.com/2021/11/07/IloXJe.png" alt="兜圈子"></li><li>如图，假定开始时，交换机 #1 和 #2 的交换表都是空的，主机 A 通过接口交换机  #1 向主机 B 发送一帧。</li><li>按交换机自学习和转发方法，该帧的某个走向如下：离开交换机 #1 的接口 3 → 交换机 #2 的接口 1 → 接口 2 → 交换机 #1 的接口 4 → 接口 3 → 交换机 #2 的接口 1 →……。</li><li>这样就无限制地循环兜圈子下去，白白消耗了网络资源。</li><li>为解决这种问题，IEEE的802.1D标准制定了&#x3D;&#x3D;生成树协议STP&#x3D;&#x3D;<ul><li>要点：不改变网络的实际拓扑，在逻辑上切断某些链路，使得从一台主机到所有其他主机的路径是无环路的树状结构，从而消除了兜圈子现象</li></ul></li></ul></li></ul><ol start="3"><li>从总线以太网到星形以太网<ul><li>早期，采用无源的总线结构 <ul><li>使用CSMA&#x2F;CD协议，以半双工方式工作</li></ul></li><li>以太网交换机的星形拓扑成为以太网的首选拓扑<ul><li>不使用共享总线，因此不使用CSMA&#x2F;CD协议，以全双工方式工作</li><li>帧结构未改变，仍然采用以太网的帧结构</li></ul></li></ul></li></ol><h3 id="3-4-3-虚拟局域网"><a href="#3-4-3-虚拟局域网" class="headerlink" title="3.4.3 虚拟局域网"></a>3.4.3 虚拟局域网</h3><ul><li>利用以太网交换机可以很方便地实现虚拟局域网 VLAN (Virtual LAN)。</li><li>虚拟局域网 VLAN 是由一些局域网网段构成的与物理位置无关的逻辑组，而这些网段具有某些共同的需求。每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的计算机是属于哪一个 VLAN。</li><li>虚拟局域网其实只是局域网给用户提供的一种服务，而并不是一种新型局域网。</li><li>由于虚拟局域网是用户和网络资源的逻辑组合，因此可按照需要将有关设备和资源非常方便地重新组合，使用户从不同的服务器或数据库中存取所需的资源。<br><img src="https://z3.ax1x.com/2021/11/07/I1yRf0.png" alt="虚拟局域网"></li><li>如图10 台计算机划分为三个虚拟局域网： VLAN1, VLAN2 和 VLAN3</li><li>当 B1 向 VLAN2 工作组内成员发送数据时，工作站 B2 和 B3 将会收到广播的信息。</li><li>B1 发送数据时，工作站 A1，A2 和 C1都不会收到 B1 发出的广播信息。 </li><li>虚拟局域网限制了接收广播信息的工作站数，使得网络不会因传播过多的广播信息(即“广播风暴”)而引起性能恶化。</li><li>802.1Q 帧<br><img src="https://z3.ax1x.com/2021/11/07/I1yeoR.png" alt="802.1Q"></li><li>IEEE 批准了 802.3ac 标准，该标准定义了以太网的帧格式的扩展，以支持虚拟局域网。</li><li>虚拟局域网协议允许在以太网的帧格式中插入一个4字节的标识符，称为 VLAN 标记 (tag)，用来指明发送该帧的计算机属于哪一个虚拟局域网。</li><li>插入 VLAN 标记得出的帧称为 802.1Q 帧 或 带标记的以太网帧。</li></ul><h2 id="3-5-高速以太网"><a href="#3-5-高速以太网" class="headerlink" title="3.5 高速以太网"></a>3.5 高速以太网</h2><h3 id="3-5-1-100BASE-T以太网"><a href="#3-5-1-100BASE-T以太网" class="headerlink" title="3.5.1 100BASE-T以太网"></a>3.5.1 100BASE-T以太网</h3><ul><li>速率达到或超过 100 Mbit&#x2F;s 的以太网称为高速以太网。</li><li>100BASE-T 在双绞线上传送 100 Mbit&#x2F;s 基带信号的星形拓扑以太网，仍使用 IEEE 802.3 的CSMA&#x2F;CD 协议。</li><li>100BASE-T 以太网又称为快速以太网 (Fast Ethernet)。</li><li>1995 年IEEE已把 100BASE-T 的快速以太网定为正式标准，其代号为 IEEE 802.3u。</li><li>特点<ul><li>可在全双工方式下工作而无冲突发生。在全双工方式下工作时，不使用 CSMA&#x2F;CD 协议。</li><li>MAC 帧格式仍然是 802.3 标准规定的。</li><li>保持最短帧长不变，但将一个网段的最大电缆长度减小到 100 m。</li><li>帧间时间间隔从原来的 9.6 μs 改为现在的 0.96 μs。<br><img src="https://z3.ax1x.com/2021/11/07/I16yjO.png"></li></ul></li></ul><h3 id="3-5-2-吉比特以太网"><a href="#3-5-2-吉比特以太网" class="headerlink" title="3.5.2 吉比特以太网"></a>3.5.2 吉比特以太网</h3><ul><li>允许在 1 Gbit&#x2F;s 下全双工和半双工两种方式工作。</li><li>使用 IEEE 802.3 协议规定的帧格式。</li><li>在半双工方式下使用 CSMA&#x2F;CD 协议，全双工方式不使用 CSMA&#x2F;CD 协议。</li><li>与 10BASE-T 和 100BASE-T 技术向后兼容。</li><li>吉比特以太网可用作现有网络的主干网，也可在高带宽（高速率）的应用场合中。</li><li>吉比特以太网的物理层 ,两种成熟的技术：    <ul><li>一种来自现有的以太网，</li><li>另一种则是美国国家标准协会 <code>ANSI </code>制定的光纤通道 <code>FC  (Fiber Channel)</code>。<br><img src="https://z3.ax1x.com/2021/11/07/I16OEj.png"></li></ul></li><li>吉比特以太网工作在半双工方式时，就必须进行碰撞检测。</li><li>为保持 64 字节最小帧长度，以及 100 米的网段的最大长度，吉比特以太网增加了两个功能：<ul><li>载波延伸 (carrier extension)<ul><li>使最短帧长仍为 64 字节（这样可以保持兼容性），同时将争用时间增大为 512 字节。</li><li>凡发送的 MAC 帧长不足 512 字节时，就用一些特殊字符填充在帧的后面，使MAC 帧的发送长度增大到 512 字节。接收端在收到以太网的 MAC 帧后，要将所填充的特殊字符删除后才向高层交付。<br>  <img src="https://z3.ax1x.com/2021/11/07/I1cMrD.png" alt="载波延伸"></li></ul></li><li>分组突发 (packet bursting)<ul><li>当很多短帧要发送时，第一个短帧要采用载波延伸方法进行填充，随后的一些短帧则可一个接一个地发送，只需留有必要的帧间最小间隔即可。这样就形成可一串分组的突发，直到达到 1500 字节或稍多一些为止。<br>  <img src="https://z3.ax1x.com/2021/11/07/I1cwqg.png" alt="分组突发"></li></ul></li></ul></li><li>当吉比特以太网工作在全双工方式时（即通信双方可同时进行发送和接收数据），不使用载波延伸和分组突发。<br><img src="https://z3.ax1x.com/2021/11/07/I1cRMT.png" alt="配置举例"></li></ul><h3 id="3-5-3-10吉比特以太网和更快的以太网"><a href="#3-5-3-10吉比特以太网和更快的以太网" class="headerlink" title="3.5.3 10吉比特以太网和更快的以太网"></a>3.5.3 10吉比特以太网和更快的以太网</h3><ul><li>10 吉比特以太网的物理层<ul><li>10 吉比特以太网（10GE）并非把吉比特以太网的速率简单地提高到10倍，其主要特点有：<ul><li>与 10 Mbit&#x2F;s、100 Mbit&#x2F;s 和 1 Gbit&#x2F;s 以太网的帧格式完全相同。</li><li>保留了 802.3 标准规定的以太网最小和最大帧长，便于升级。</li><li>不再使用铜线而只使用光纤作为传输媒体。</li><li>只工作在全双工方式，因此没有争用问题，也不使用 CSMA&#x2F;CD 协议。<br><img src="https://z3.ax1x.com/2021/11/07/I1giSP.png"></li></ul></li></ul></li><li>更快的以太网<ul><li>以太网的技术发展得很快。</li><li>在 10GE 之后又制订了 40GE&#x2F;100GE（即 40 吉比特以太网和 100 吉比特以太网）的标准 IEEE 802.3ba-2010 和 802.3bm-2015。</li><li>40GE&#x2F;100GE 只工作在全双工的传输方式（因而不使用 CSMA&#x2F;CD协议），并仍保持了以太网的帧格式以及 802.3 标准规定的以太网最小和最大帧长。</li><li>100GE 在使用单模光纤传输时，仍然可以达到 40 km的传输距离，但这是需要波分复用（使用 4 个波长复用一根光纤，每一个波长的有效传输速率是 25 Gbits&#x2F;s）<br><img src="https://z3.ax1x.com/2021/11/07/I1gYTJ.png"></li></ul></li><li>端到端的以太网传输 <ul><li>以太网的工作范围已经从局域网（校园网、企业网）扩大到城域网和广域网，从而实现了端到端的以太网传输。</li><li>这种工作方式的好处有： <ul><li>技术成熟；</li><li>互操作性很好；</li><li>在广域网中使用以太网时价格便宜；</li><li>采用统一的以太网帧格式，简化了操作和管理。</li></ul></li></ul></li><li>以太网从 10 Mbit&#x2F;s 到 100 Gbit&#x2F;s 的演进证明了以太网是：<ul><li>可扩展的（从 10 Mbit&#x2F;s 到 100 Gbit&#x2F;s）；</li><li>灵活的（多种传输媒体、全&#x2F;半双工、共享&#x2F;交换）；</li><li>易于安装；</li><li>稳健性好。</li></ul></li></ul><h3 id="3-5-4-使用以太网进行宽带接入"><a href="#3-5-4-使用以太网进行宽带接入" class="headerlink" title="3.5.4 使用以太网进行宽带接入"></a>3.5.4 使用以太网进行宽带接入</h3><ul><li>IEEE 在 2001 年初成立了 802.3EFM 工作组，专门研究高速以太网的宽带接入技术问题。</li><li>以太网宽带接入具有以下特点：<ul><li>可以提供双向的宽带通信。</li><li>可以根据用户对带宽的需求灵活地进行带宽升级。</li><li>可以实现端到端的以太网传输，中间不需要再进行帧格式的转换。这就提高了数据的传输效率且降低了传输的成本。</li><li>但是不支持用户身份鉴别。</li></ul></li><li>PPPoE<ul><li>PPPoE (PPP over Ethernet) 的意思是“在以太网上运行 PPP”，它把 PPP 协议与以太网协议结合起来 —— 将 PPP 帧再封装到以太网中来传输。</li><li>现在的光纤宽带接入 FTTx 都要使用 PPPoE 的方式进行接入。在 PPPoE 弹出的窗口中键入在网络运营商购买的用户名和密码，就可以进行宽带上网了。</li><li>利用 ADSL 进行宽带上网时，从用户个人电脑到家中的 ADSL 调制解调器之间，也是使用 RJ-45 和 5 类线（即以太网使用的网线）进行连接的，并且也是使用 PPPoE 弹出的窗口进行拨号连接的。</li></ul></li></ul><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><img src="https://z3.ax1x.com/2021/11/07/I1H16H.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter03-语法结构</title>
      <link href="/2021/10/12/study/c/chapter03/"/>
      <url>/2021/10/12/study/c/chapter03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="选择分支结构"><a href="#选择分支结构" class="headerlink" title="选择分支结构"></a>选择分支结构</h2><h3 id="二路分支（if…else…）"><a href="#二路分支（if…else…）" class="headerlink" title="二路分支（if…else…）"></a>二路分支（if…else…）</h3><ol><li>简单的if语句 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式) 语句;</span><br></pre></td></tr></table></figure><ul><li>如果表达式值非0，执行该语句，然后执行if的下一个语句；否则直接执行if的下一个语句。</li></ul></li><li>if…else <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式) 语句<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> 语句<span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>如果表达式值非0，执行语句1，否则执行语句2。</li></ul></li><li>if语句的嵌套 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span>(表达式<span class="number">2</span>) 语句<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> 语句<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>(表达式<span class="number">3</span>) 语句<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">else</span> 语句<span class="number">4</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="多路分支（switch语句）"><a href="#多路分支（switch语句）" class="headerlink" title="多路分支（switch语句）"></a>多路分支（switch语句）</h3><pre><code><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">1</span>: 语句序列<span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">2</span>: 语句序列<span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">3</span>: 语句序列<span class="number">3</span>; <span class="keyword">break</span>;</span><br><span class="line">            ......</span><br><span class="line">    <span class="keyword">case</span> 常量n: 语句序列n; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: 语句序列n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ul><li>首先计算表达式的值, 若该值与某个case后面的常量相等,  则执行其后的语句序列, 遇到break语句时, 跳出switch 语句;  如果表达式的值与所有常量都不相等,若存在default则执行其后的语句序列,否则什么也不做。</li><li>switch语句中的表达式一般为整型或字符型, 相应地常量的类型应与其相同。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter02-CSS样式属性</title>
      <link href="/2021/10/02/study/web/chapter02/"/>
      <url>/2021/10/02/study/web/chapter02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>  <code>&lt;span&gt;</code>标签：无语义的行标签，便于添加属性一添加样式。</p><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a><strong>字体样式</strong></h3><table><thead><tr><th>属性名</th><th>含义</th><th>属性</th></tr></thead><tbody><tr><td>font-family</td><td>设置字体类型</td><td>如：”Times New Roman”, “Times”  &amp;宋体</td></tr><tr><td>font-size</td><td>设置字体大小</td><td>单位：px,em等</td></tr><tr><td>font-style</td><td>设置字体风格</td><td><code>normal</code>:默认<br><code>italic</code>:斜体字<br><code>oblique</code>:倾斜</td></tr><tr><td>font-weight</td><td>设置字体的粗细</td><td><code>normal</code>:默认<br><code>bold</code>:加粗<br><code>lighter</code>:变细</td></tr><tr><td>font</td><td>在一个声明中设置所有字体属性</td><td>顺序：<code>font-style</code>,<code>font-weight</code>,<code>font-size</code>,<code>font-family</code></td></tr><tr><td>word-wrap</td><td>用于实现长单词和URL地址的自动换行。</td><td></td></tr></tbody></table><h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a><strong>文本样式</strong></h3><table><thead><tr><th>属性名</th><th>含义</th><th>属性</th></tr></thead><tbody><tr><td>color</td><td>设置文本颜色</td><td><code>RGB</code>:十六进制方法表示颜色:前两位表示红色分量，中间两位表示绿色分量，最后两位表示蓝色分量<br>rgb(r,g,b):正整数的取值为0～255<br><code>RGBA</code>:在RGB基础上增加了控制<code>alpha</code>透明度的参数，其中这个透明通道值为0～1</td></tr><tr><td>text-align</td><td>设置元素水平对齐方式</td><td><code>left</code>:左对齐<br><code>right</code>:右对齐<br><code>center</code>:居中<br><code>justify</code>:两端对齐<br></td></tr><tr><td>text-indent</td><td>设置首行文本的缩进</td><td>单位：em</td></tr><tr><td>line-height</td><td>设置文本的行高</td><td>2em</td></tr><tr><td>text-decoration</td><td>设置文本的装饰</td><td><code>none</code>:默认值<br><code>underline</code>:下划线<br><code>overline</code>:上划线<br><code>line-through</code>:删除线<br></td></tr><tr><td>text-shadow</td><td>文本阴影</td><td><code>color</code>:阴影颜色<br><code>x-offset</code>:x轴位移<br><code>y-offset</code>:y轴位移<br><code>blur-radius</code>:阴影模糊范围<br></td></tr><tr><td>letter-spacing</td><td>定义字间距，字符与字符间</td><td>默认normal,允许为负</td></tr><tr><td>word-spacing</td><td>定义英文单词之间的间距，中文无效</td><td>默认normal,允许为负</td></tr><tr><td>text-transform</td><td>控制英文字母的大小写</td><td><code>none</code>:不转换，默认<br><code>capitalize</code>:首字母大写<br><code>uppercase</code>:全部字符转换为大写<br><code>lowercase</code>:全部字符转换为小写<br></td></tr><tr><td>white-space</td><td>设置空白符的处理方式</td><td><code>normal</code>:文本中的空格、空行无效，满行（到达区域边界）后自动换行<br><code>pre</code>:预格式化，按文档的书写格式保留空格、空行原样显示<br><code>nowrap</code>:空格空行无效，强制文本不能换行，除非遇到换行标签<code>&lt;br /&gt;</code>。内容超出元素的边界也不换行，若超出浏览器页面则会自动增加滚动条<br></td></tr></tbody></table><h3 id="CSS3新增文本外观属性"><a href="#CSS3新增文本外观属性" class="headerlink" title="CSS3新增文本外观属性"></a>CSS3新增文本外观属性</h3><ul><li><code>text-shadow</code>:为文本添加阴影效果,可加多个，用逗号隔开<ul><li>h-shadow:垂直偏移量</li><li>v-shadow:水平偏移量</li><li>blur:阴影扩展半径</li><li>color:阴影颜色</li></ul></li><li><code>text-overflow</code>:用于标示对象内溢出的文本<ul><li>clip:修剪溢出文本，不显示省略标签“…”</li><li>ellipsis:用省略标签“…”标示被修剪文本，省略标签插入的位置是最后一个字符。<ul><li>定义包含文本的对象宽度</li><li>应用<code>white-space:nowrap;</code>”&#96;样式强制文本不能换行。</li><li>应用<code>overflow:hidden;</code>样式隐藏溢出文本。</li><li>应用<code>text-overflow:ellipsis;</code>样式显示省略标签。</li></ul></li></ul></li></ul><h3 id="超链接伪类"><a href="#超链接伪类" class="headerlink" title="超链接伪类"></a><strong>超链接伪类</strong></h3><table><thead><tr><th>伪类名</th><th>含义</th></tr></thead><tbody><tr><td>link</td><td>未单击访问时超链接样式</td></tr><tr><td>visited</td><td>单机访问后超链接样式</td></tr><tr><td>hover</td><td>鼠标悬浮其上时的超链接样式</td></tr><tr><td>active</td><td>鼠标单击未释放的超链接样式</td></tr><tr><td>设置伪类的顺序：link&gt;visit&gt;hover&gt;active</td><td></td></tr></tbody></table><h3 id="列表样式"><a href="#列表样式" class="headerlink" title="列表样式"></a><strong>列表样式</strong></h3><table><thead><tr><th><code>list-style-type</code></th><th>none:无标记符号<br>disc:实心圆，默认类型<br>circle:空心圆<br>square:实心正方形<br>decimal:数字</th></tr></thead></table><h3 id="背景样式"><a href="#背景样式" class="headerlink" title="背景样式"></a><strong>背景样式</strong></h3><table><thead><tr><th>属性名</th><th>含义</th><th>使用</th></tr></thead><tbody><tr><td>background-color</td><td>设置背景颜色</td><td>十六进制 - 如：”#ff0000”<br>RGB - 如：”rgb(255,0,0)”<br>颜色名称 - 如：”red”</td></tr><tr><td>background-image</td><td>设置背景图片</td><td>url(图片路径)</td></tr><tr><td>background-repeat</td><td>设置背景图片的平铺方式</td><td>repeat:向水平和垂直方向平铺<br>repeat-x:水平平铺<br>repeat-y:垂直平铺<br>no-repeat:不平铺</td></tr><tr><td>background-position</td><td>设置背景图片的位置</td><td>X  Y:X表示水平位置，Y表示垂直位置<br>X%  Y%：用百分比控制在水平和垂直方向的位置<br>关键字：水平方向：left,center,right;垂直方向：top,center,bottom</td></tr><tr><td>background-size</td><td>设置背景图片的大小</td><td></td></tr><tr><td>background-attachment</td><td>背景图像是否固定或者随着页面的其余部分滚动</td><td><code>auto</code>:默认值，维持原样<br><code>percentage</code>:相对于元素宽度来计算<br><code>cover</code>:放大背景图片填充整个元素<br><code>contain</code>:让背景图片保持本身的宽高比例，将背景图片缩放到宽度或者高度正好适应所定义背景的区域</td></tr></tbody></table><pre><code>简写背景样式：`background` 当使用简写属性时，属性值的顺序为：:background-colorbackground-imagebackground-repeatbackground-attachmentbackground-position</code></pre><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><ul><li><p>线性渐变：颜色沿着一条直线过渡:从左到右、从右到左、从上到下等<br>css3渐变兼容：</p><ul><li>IE: <code>-ms-</code></li><li>Chrome:<code>-webkit</code></li><li>Safari:<code>-webkit</code></li><li>Opera:<code>-o-</code></li><li>Firefox:<code>-moz-</code></li></ul><pre><code>举例：-webkit-linear-gradient ( position,color1，color2,...)posion为渐变方向</code></pre></li></ul><h3 id="引用样式"><a href="#引用样式" class="headerlink" title="引用样式"></a>引用样式</h3><ol><li>行内样式表<br> 使用 <code>style</code> 属性定义在标签上</li><li>内部样式表<br> 使用 <code>style</code> 标签定义在当前 HTML 页面内部,一般在<code>head</code>标签内</li><li>外部样式表<br> 将样式定义在外部 <code>*.css</code> 文件中，通过 <code>link</code> 标签或者 <code>@import </code>指令导入本页面。<br> 链接式与导入式的区别:<br> - link 方式，导入时会停止 HTML 页面解析，直到 css 文件导入之后，才继续解析；<br> -    import 方式，运行到 import 指令时，页面会继续解析(即：显示)；css 文件异步加载，直到加载后才会显示出样式效果。</li></ol><h3 id="样式的优先级"><a href="#样式的优先级" class="headerlink" title="样式的优先级"></a>样式的优先级</h3><ul><li>分别在不同位置(外部、内部、行内)定义的同名的样式(比如：标签、类样式名称相同)，遵从“就近原则”</li><li>名称不同，但重复选中的标签的样式，效果遵循“特殊者有限原则”(id&gt;class&gt;标签&gt;*);选择器优于书写位置。</li><li>如果定义了 2 个类标签，其中包含相同的样式，但值不同。比如：定义类 <code>.red&#123;color:red&#125; .green&#123;color:green&#125;。</code><br>  如果这两个类都作用于同一个标签上，比如：<code>&lt;p class=&quot;green red&quot; &gt;xxx&lt;/p&gt;</code><br>  那么按照书写时的顺序(并非引用时的顺序)，后者优先。如上则颜色为 green。</li><li>更复杂的情况，可以通过计算标签被不同方式选中的次数来判断优先级。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Web前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter03-CSS选择器</title>
      <link href="/2021/10/02/study/web/chapter03/"/>
      <url>/2021/10/02/study/web/chapter03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><ol><li>标签选择器<br> <code>标签名&#123;属性名: 属性值....&#125;</code></li><li>类选择器<br> <code>.类名&#123;属性名: 属性值....&#125;</code></li><li>id选择器<br> <code>.id名&#123;属性名: 属性值....&#125;</code></li><li>通配符选择器<br> <code>*&#123;属性名: 属性值....&#125;</code></li><li>属性选择器</li></ol><table><thead><tr><th>选择器</th><th>例子</th><th>例子描述</th></tr></thead><tbody><tr><td><strong>类选择器</strong></td><td></td><td></td></tr><tr><td>.class</td><td>.intro</td><td>选择 class&#x3D;”intro” 的所有元素。</td></tr><tr><td>.class1.class2</td><td>.name1.name2</td><td>选择 class 属性中同时有 name1 和 name2 的所有元素。</td></tr><tr><td>.class1 .class2</td><td>.name1 .name2</td><td>选择作为类名 name1 元素后代的所有类名 name2 元素。</td></tr><tr><td><strong>id选择器</strong></td><td></td><td></td></tr><tr><td>#id</td><td>#firstname</td><td>选择 id&#x3D;”firstname” 的元素。</td></tr><tr><td><strong>通配符选择器</strong></td><td></td><td></td></tr><tr><td>*</td><td>*</td><td>选择所有元素。</td></tr><tr><td><strong>标签选择器</strong></td><td></td><td></td></tr><tr><td>element</td><td>p</td><td>选择所有 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td><strong>后代选择器</strong></td><td></td><td></td></tr><tr><td>element.class</td><td>p.intro</td><td>选择 class&#x3D;”intro” 的所有 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td>element,element</td><td>div, p</td><td>选择所有 <code>&lt;div&gt;</code> 元素和所有 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td>element element</td><td>div p</td><td>选择 <code>&lt;div&gt; </code>元素内的所有 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td><strong>关系选择器</strong></td><td></td><td></td></tr><tr><td>element&gt;element</td><td>div &gt; p</td><td>选择父元素是 <code>&lt;div&gt;</code> 的所有 <code>&lt;p&gt; </code>元素。</td></tr><tr><td>element+element</td><td>div + p</td><td>选择紧跟 <code>&lt;div&gt; </code>元素的首个 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td>element1~element2</td><td>p ~ ul</td><td>选择前面有 <code>&lt;p&gt; </code>元素的每个 <code>&lt;ul&gt; </code>元素。</td></tr><tr><td><strong>属性选择器</strong></td><td></td><td></td></tr><tr><td>[attribute]</td><td>[target]</td><td>选择带有 target 属性的所有元素。</td></tr><tr><td>[attribute&#x3D;value]</td><td>[target&#x3D;_blank]</td><td>选择带有 target&#x3D;”_blank” 属性的所有元素。</td></tr><tr><td>[attribute~&#x3D;value]</td><td>[title~&#x3D;flower]</td><td>选择 title 属性包含单词 “flower” 的所有元素。</td></tr><tr><td>[attribute&#96;</td><td>&#96;&#x3D;value]</td><td>[lang&#96;</td></tr><tr><td>[attribute^&#x3D;value]</td><td>a[href^&#x3D;”https”]</td><td>选择其 src 属性值以 “https” 开头的每个 <code>&lt;a&gt;</code> 元素。</td></tr><tr><td>[attribute$&#x3D;value]</td><td>a[href$&#x3D;”.pdf”]</td><td>选择其 src 属性以 “.pdf” 结尾的所有 <code>&lt;a&gt;</code> 元素。</td></tr><tr><td>[attribute*&#x3D;value]</td><td>a[href*&#x3D;”w3schools”]</td><td>选择其 href 属性值中包含 “abc” 子串的每个 <code>&lt;a&gt;</code> 元素。</td></tr><tr><td>:active</td><td>a:active</td><td>选择活动链接。</td></tr><tr><td>::after</td><td>p::after</td><td>在每个 <code>&lt;p&gt;</code> 的内容之后插入内容。</td></tr><tr><td>::before</td><td>p::before</td><td>在每个 <code>&lt;p&gt;</code> 的内容之前插入内容。</td></tr><tr><td>:checked</td><td>input:checked</td><td>选择每个被选中的 <code>&lt;input&gt;</code> 元素。</td></tr><tr><td>:default</td><td>input:default</td><td>选择默认的 <code>&lt;input&gt;</code> 元素。</td></tr><tr><td>:disabled</td><td>input:disabled</td><td>选择每个被禁用的 <code>&lt;input&gt;</code> 元素。</td></tr><tr><td>:empty</td><td>p:empty</td><td>选择没有子元素的每个 <code>&lt;p&gt;</code> 元素（包括文本节点）。</td></tr><tr><td>:enabled</td><td>input:enabled</td><td>选择每个启用的 <code>&lt;input&gt;</code> 元素。</td></tr><tr><td>:first-child</td><td>p:first-child</td><td>选择属于父元素的第一个子元素的每个 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td>::first-letter</td><td>p::first-letter</td><td>选择每个 <code>&lt;p&gt;</code> 元素的首字母。</td></tr><tr><td>::first-line</td><td>p::first-line</td><td>选择每个 <code>&lt;p&gt;</code> 元素的首行。</td></tr><tr><td>:first-of-type</td><td>p:first-of-type</td><td>选择属于其父元素的首个 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td>:focus</td><td>input:focus</td><td>选择获得焦点的 input 元素。</td></tr><tr><td>:fullscreen</td><td>:fullscreen</td><td>选择处于全屏模式的元素。</td></tr><tr><td>:hover</td><td>a:hover</td><td>选择鼠标指针位于其上的链接。</td></tr><tr><td>:in-range</td><td>input:in-range</td><td>选择其值在指定范围内的 input 元素。</td></tr><tr><td>:indeterminate</td><td>input:indeterminate</td><td>选择处于不确定状态的 input 元素。</td></tr><tr><td>:invalid</td><td>input:invalid</td><td>选择具有无效值的所有 input 元素。</td></tr><tr><td>:lang(language)</td><td>p:lang(it)</td><td>选择 lang 属性等于 “it”（意大利）的每个 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td>:last-child</td><td>p:last-child</td><td>选择属于其父元素最后一个子元素每个 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td>:last-of-type</td><td>p:last-of-type</td><td>选择属于其父元素的最后 <code>&lt;p</code>&gt; 元素的每个 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td>:link</td><td>a:link</td><td>选择所有未访问过的链接。</td></tr><tr><td>:not(selector)</td><td>:not(p)</td><td>选择非 <code>&lt;p&gt;</code> 元素的每个元素。</td></tr><tr><td>:nth-child(n)</td><td>p:nth-child(2)</td><td>选择属于其父元素的第二个子元素的每个 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td>:nth-last-child(n)</td><td>p:nth-last-child(2)</td><td>同上，从最后一个子元素开始计数。</td></tr><tr><td>:nth-of-type(n)</td><td>p:nth-of-type(2)</td><td>选择属于其父元素第二个 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td>:nth-last-of-type(n)</td><td>p:nth-last-of-type(2)</td><td>同上，但是从最后一个子元素开始计数。</td></tr><tr><td>:only-of-type</td><td>p:only-of-type</td><td>选择属于其父元素唯一的 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td>:only-child</td><td>p:only-child</td><td>选择属于其父元素的唯一子元素的每个 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td>:optional</td><td>input:optional</td><td>选择不带 “required” 属性的 input 元素。</td></tr><tr><td>:out-of-range</td><td>input:out-of-range</td><td>选择值超出指定范围的 input 元素。</td></tr><tr><td>::placeholder</td><td>input::placeholder</td><td>选择已规定 “placeholder” 属性的 input 元素。</td></tr><tr><td>:read-only</td><td>input:read-only</td><td>选择已规定 “readonly” 属性的 input 元素。</td></tr><tr><td>:read-write</td><td>input:read-write</td><td>选择未规定 “readonly” 属性的 input 元素。</td></tr><tr><td>:required</td><td>input:required</td><td>选择已规定 “required” 属性的 input 元素。</td></tr><tr><td>:root</td><td>:root</td><td>选择文档的根元素。</td></tr><tr><td>::selection</td><td>::selection</td><td>选择用户已选取的元素部分。</td></tr><tr><td>:target</td><td>#news:target</td><td>选择当前活动的 #news 元素。</td></tr><tr><td>:valid</td><td>input:valid</td><td>选择带有有效值的所有 input 元素。</td></tr><tr><td>:visited</td><td>a:visited</td><td>选择所有已访问的链接。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Web前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter04-盒子模型</title>
      <link href="/2021/10/02/study/web/chapter04/"/>
      <url>/2021/10/02/study/web/chapter04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><p><strong>什么是盒子模型？</strong><br>盒子模型<br>    CSS 将网页看做是由一个一个的盒子(box)组成<br>    主要的盒子属性有(由外到内)：<code>margin</code>(外边距), <code>border</code>(边框),<code> padding</code>(内边距), <code>width</code>(宽)&#x2F;<code>height</code>(高)</p><h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><table><thead><tr><th>属性名</th><th>含义</th><th>使用</th><th>取值</th></tr></thead><tbody><tr><td>border-color</td><td>设置边框颜色</td><td><code>border-top-color</code>:上边框颜色<br><code>border-right-color</code>:右边框颜色<br><code>border-bottom-color</code>:下边框颜色<br><code>border-left-color</code>:左边框颜色<br>简写：<code>border-color</code>:border-top-color,border-right-color,border-bottom-color,border-left-color<br>(即：上右下左，顺时针方向；另外，上和下，左和右对应，如果上下或者左右颜色相同，写一边即可)</td><td>color</td></tr><tr><td>border-width</td><td>设置边框粗细</td><td><code>border-top-width</code>:上边框粗细<br><code>border-right-width</code>:右边框粗细<br><code>border-bottom-width</code>:下边框粗细<br><code>border-left-width</code>:左边框粗细<br>简写：<code>border-width</code>:border-top-width,border-right-width,border-bottom-width,border-left-width<br>(即：上右下左，顺时针方向；另外，上和下，左和右对应，如果上下或者左右粗细相同，写一边即可)</td><td><code>&lt;length&gt;</code>： 用长度值来定义边框的厚度。不允许负值 <br><code>medium</code>： 定义默认厚度的边框。 <br><code>thin</code>： 定义比默认厚度细的边框。<br><code>thick</code>： 定义比默认厚度粗的边框。</td></tr><tr><td>border-style</td><td>设置边框风格</td><td><code>border-top-style</code>:上边框风格<br><code>border-right-style</code>:右边框风格<br><code>border-bottom-style</code>:下边框风格<br><code>border-left-style</code>:左边框风格<br>简写：<code>border-style</code>:border-top-style,border-right-style,border-bottom-style,border-left-style<br>(即：上右下左，顺时针方向；另外，上和下，左和右对应，如果上下或者左右风格相同，写一边即可)</td><td><code>none</code>： 无轮廓。border-color与border-width将被忽略 <br><code>hidden</code>： 隐藏边框。IE7及以下尚不支<br><code>dotted</code>： 点状轮廓。IE6下显示为dashed效果 <br><code>dashed</code>： 虚线轮廓。 <br><code>solid</code>： 实线轮廓 <br><code>double</code>： 双线轮廓。两条单线与其间隔的和等于指定的border-width值</td></tr><tr><td>border-image</td><td>图片边框</td><td><code>border-image-source</code>:指定图片路径<br><code>border-image-slice</code>:指定四边偏移量<br><code>border-image-width</code>:指定边框宽度<br><code>border-image-outset</code>:指定边框背景向盒子外部延伸的距离<br><code>border-image-repeat</code>:<br>指定平铺方式</td><td></td></tr><tr><td><code>border</code>简写：同时设置边框的颜色、粗细和风格；<code>border:border-width   border-style  border-color</code></td><td></td><td></td><td></td></tr></tbody></table><h3 id="内边距与外边距"><a href="#内边距与外边距" class="headerlink" title="内边距与外边距"></a>内边距与外边距</h3><table><thead><tr><th>边距</th><th>含义</th><th>使用</th><th>取值</th></tr></thead><tbody><tr><td>margin</td><td>外边距</td><td><code>magin-top</code>:边框上边框与上面边框的距离<br><code>magin-right</code>:边框右边框与右面边框的距离<br><code>magin-bottom</code>:边框下边框与下面边框的距离<br><code>magin-left</code>:边框左边框与左面边框的距离</td><td><code>&lt;length&gt;</code></td></tr><tr><td>padding</td><td>内边距</td><td><code>padding-top</code>:内容与上边框的距离<br><code>magin-right</code>:内容与右边框的距离<br><code>magin-bottom</code>:内容与下边框的距离<br><code>magin-left</code>:内容与左边框的距离</td><td><code>&lt;length&gt;</code></td></tr></tbody></table><ul><li>margin简写：顺序上右下左，另外，上和下，左和右对应，如果上下或者左右外边距相同，写一边即可</li><li>padding简写：顺序上右下左，另外，上和下，左和右对应，如果上下或者左右内边距相同，写一边即可</li><li>网页居中对齐：<code>margin:0px auto;</code></li></ul><h3 id="盒子模型的尺寸"><a href="#盒子模型的尺寸" class="headerlink" title="盒子模型的尺寸"></a>盒子模型的尺寸</h3><table><thead><tr><th>盒子尺寸</th><th>取值</th></tr></thead><tbody><tr><td>box-sizing</td><td><code>content-box</code>： <strong>padding</strong>和<strong>border</strong>不被包含在定义的<strong>width</strong>和<strong>height</strong>之内。对象的实际宽度等于设置的width值和border、padding之和，即 ( <code>Element width = width + border + padding </code>) 此属性表现为<strong>标准模式</strong>下的盒模型。<br><code>border-box</code>： <strong>padding</strong>和<strong>border</strong>被包含在定义的<strong>width</strong>和<strong>height</strong>之内。对象的实际宽度就等于设置的width值，即使定义有border和padding也不会改变对象的实际宽度，即 ( <code>Element width = width</code> ) 此属性表现为<strong>怪异模式</strong>下的盒模型。</td></tr><tr><td><img src="https://img-blog.csdnimg.cn/20201229092046990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></td><td></td></tr></tbody></table><h3 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h3><ul><li><code>border-redius</code>:Hlength1&#x2F;Vlength1&amp;nbsp;&amp;nbsp;Hlength2&#x2F;Vlength2&amp;nbsp;&amp;nbsp;Hlength3&#x2F;Vlength3&amp;nbsp;&amp;nbsp;Hlength4&#x2F;Vlength4&amp;nbsp;&amp;nbsp;<br>水平半径(Hlength)：如果提供全部四个参数值，将按上左(top-left)、上右(top-right)、下右(bottom-right)、下左(bottom-left)的顺序作用于四个角。<br>如果只提供一个，将用于全部的于四个角。<br>如果提供两个，第一个用于上左(top-left)、下右(bottom-right)，第二个用于上右(top-right)、下左(bottom-left)。<br>如果提供三个，第一个用于上左(top-left)，第二个用于上右(top-right)、下左(bottom-left)，第三个用于下右(bottom-right)。<br>垂直半径(Vlength)也遵循以上4点。 </li><li>也可以用百分比设置圆角半径</li></ul><h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><ul><li><code>box-shadow</code>：inset&amp;nbsp;&amp;nbsp;&amp;nbsp;length1&amp;nbsp;&amp;nbsp;&amp;nbsp;length2&amp;nbsp;&amp;nbsp;&amp;nbsp;length3&amp;nbsp;&amp;nbsp;&amp;nbsp;length4&amp;nbsp;&amp;nbsp;&amp;nbsp;color<ul><li><code>inset</code>:设置阴影类型，默认为none无阴影，inset为内阴影，若不填则为外阴影。<br>   <img src="https://img-blog.csdnimg.cn/20201229094608104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">      </li><li>length1：X轴位移</li><li>length2：Y轴位移</li><li>length3：阴影模糊值</li><li>length4：阴影外延值</li><li>color：阴影颜色</li></ul></li></ul><h2 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h2><ol><li><code>background-color</code></li><li><code>background-image</code><ul><li><code>background-repeat</code><ul><li><code>repeat</code>:沿水平和垂直两个方向平铺</li><li><code>no-repeat</code>:不平铺</li><li><code>repeat-x</code>:只沿水平方向平铺</li><li><code>repeat-y</code>:只沿垂直方向平铺</li></ul></li><li><code>background-position</code><ul><li>数值：px</li><li>关键字<ul><li>水平：left、center、right</li><li>垂直：top、center、bottom</li></ul></li><li>百分比</li></ul></li><li><code>background-attachment</code><ul><li><code>scroll</code>:图像随页面元素滚动</li><li><code>fixed</code>:图像固定</li></ul></li><li><code>background-size</code><ul><li>像素值</li><li>百分比</li><li><code>cover</code></li><li><code>contain</code></li></ul></li><li><code>background-origin</code>：定义背景图像的相对位置<ul><li><code>padding-box</code>:相对于内边距定位</li><li><code>border-box</code>:相对于边框定位</li><li><code>content-box</code>:相对于内容框定位</li></ul></li><li><code>background-clip</code>:定义背景图像裁剪区域<ul><li><code>border-box</code>:从边框区域向外裁剪背景</li><li><code>padding-box</code>:从内边距区域向外裁剪背景</li><li><code>content-box</code>:从内容区域向外裁剪背景</li></ul></li></ul></li></ol><h2 id="元素类型转换"><a href="#元素类型转换" class="headerlink" title="元素类型转换"></a>元素类型转换</h2><ul><li>块元素<ul><li>可以设置宽、高、对齐等属性。</li><li><code>&lt;div&gt;</code></li></ul></li><li>行内元素<ul><li>依靠字体大小和图像尺寸支撑结构</li><li>不可以设置宽、高、对齐等属性。</li><li><code>&lt;span&gt;</code>、 <code>&lt;a&gt;</code> 、<code>&lt;em&gt;</code></li></ul></li><li>行内块元素<ul><li>依靠字体大小和图像尺寸支撑结构</li><li>可以设置宽、高、对齐等属性。</li><li><code>&lt;img&gt;</code> <code>&lt;input&gt;</code></li></ul></li><li>display<ul><li>inline:行内元素</li><li>block:块元素</li><li>inline-block:行内块元素</li><li>none:被隐藏，不显示也不占用页面空间。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Web前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter01-HTML</title>
      <link href="/2021/09/27/study/web/chapter01/"/>
      <url>/2021/09/27/study/web/chapter01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="HTML基本标签"><a href="#HTML基本标签" class="headerlink" title="HTML基本标签"></a>HTML基本标签</h2><ul><li><code>&lt;!DOCTYPE&gt;</code>:位于文档的最前面，用于向浏览器说明当前文档使用哪种HTML或XHTML标准规范。</li><li><code>&lt;html&gt;...&lt;/html&gt;</code>:告知浏览器是一个HTML文档。</li><li><code>&lt;head&gt;...&lt;/head&gt;</code>:定义文档的头部信息。</li><li><code>&lt;body&gt;...&lt;/body&gt;</code>:主体标签，定义文档要显示的内容。</li><li><code>&lt;title&gt;&lt;/title&gt;</code>:定义HTML页面的标题。</li><li><code>&lt;mate/&gt;</code>:定义页面的元信息，可重复出现。</li><li><code>&lt;link&gt;</code>:引用外部文件，可用多个。<ul><li>href<ul><li>URL:指定外部文档位置。</li></ul></li><li>rel<ul><li>stylesheet:指定当前文档与引用外部文档的关系，该属性值通常为<code>stylesheet</code>，表示定义一个外部样式表</li></ul></li><li>type:<ul><li>text&#x2F;css:引用外部文档的类型为CSS样式表</li><li>text&#x2F;javascript:引用外部文档的类型为javascript脚本</li></ul></li></ul></li><li><code>&lt;style&gt;...&lt;/style&gt;</code>:定义样式信息。</li><li><code>&lt;hn&gt;...&lt;/hn&gt;</code>:n取1<del>6，依次表示1</del>6级标题。<ul><li>align<ul><li>left</li><li>center</li><li>right</li></ul></li></ul></li><li><code>&lt;p&gt;...&lt;/p&gt;</code>:段落标签。</li><li><code>&lt;hr/&gt;</code>:水平线<ul><li>align</li><li>size:粗细</li><li>color:颜色</li><li>width:宽度</li></ul></li><li><code>&lt;br/&gt;</code>:强制换行。</li><li><code>&lt;font&gt;...&lt;/font&gt;</code>:文本样式标签<ul><li>face:字体</li><li>size:大小，1~7</li><li>color:颜色</li></ul></li><li><code>&lt;b&gt;&lt;/b&gt;</code>、<code>&lt;strong&gt;&lt;/strong&gt;</code>:文字粗体。</li><li><code>&lt;i&gt;&lt;/i&gt;</code>、<code>&lt;em&gt;&lt;/em&gt;</code>:文字斜体</li><li><code>&lt;s&gt;&lt;/s&gt;</code>、<code>&lt;del&gt;&lt;/del&gt;</code>:文字删除线</li><li><code>&lt;u&gt;&lt;/u&gt;</code>、<code>&lt;ins&gt;&lt;/ins&gt;</code>:文字下划线</li><li>特殊字符</li></ul><table><thead><tr><th>特殊字符</th><th>描述</th><th>代码</th></tr></thead><tbody><tr><td></td><td>空格符</td><td><code>&amp;nbsp;</code></td></tr><tr><td>&lt;</td><td>小于号</td><td><code>&amp;lt;</code></td></tr><tr><td>&gt;</td><td>大于号</td><td><code>&amp;gt;</code></td></tr><tr><td>&amp;</td><td>和号</td><td><code>&amp;amp;</code></td></tr><tr><td>￥</td><td>人民币</td><td><code>&amp;yen;</code></td></tr><tr><td>©</td><td>版权</td><td><code>&amp;copy;</code></td></tr><tr><td>®</td><td>注册商标</td><td><code>&amp;reg;</code></td></tr><tr><td>°</td><td>摄氏度</td><td><code>&amp;deg;</code></td></tr><tr><td>±</td><td>正负号</td><td><code>&amp;plusmn;</code></td></tr><tr><td>×</td><td>乘号</td><td><code>&amp;times;</code></td></tr><tr><td>÷</td><td>除号</td><td><code>&amp;divide;</code></td></tr><tr><td>²</td><td>平方2（上标2）</td><td><code>&amp;sup2;</code></td></tr><tr><td>³</td><td>立方3（上标3）</td><td><code>&amp;sup3;</code></td></tr></tbody></table><ul><li>无序列表  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        .....</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>有序列表  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        .....</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>定义列表  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><code>&lt;img/&gt;</code>:图像标签<ul><li>src:指定图像路径</li><li>alt:图像的替换文本属性</li><li>width:图像宽度</li><li>height:图像高度</li><li>border：添加边框，设置边框的宽度</li></ul></li><li>绝对路径：计算机上的磁盘位置，带盘符或网址。</li><li>相对路径：与文档目录相同。</li><li><code>&lt;a&gt;&lt;/a&gt;</code>:超链接<ul><li>href:跳转目标</li><li>target<ul><li>_self:在原窗口打开</li><li>_blank:在新窗口打开</li></ul></li></ul></li><li>锚点连接  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#id名&quot;</span>&gt;</span>链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p><code>table-tr-td</code>:    用于显示规整的数据，没有明确的语义</p><ul><li><p>表格的边框：border&#x3D;”1”</p></li><li><p>表格的宽高：width, height</p></li><li><p>表格的对齐方式：left, center, right</p></li><li><p>cellspacing：单元格间距</p></li><li><p>cellpadding：单元格填充<br>单元格的对齐方式</p></li><li><p>水平对齐(align)：left, center, right</p></li><li><p>垂直对齐(valign)：top, middle, bottom, baseline</p></li><li><p>跨行跨列属性<br>   <code> colspan (column span)</code>: 跨列<br>  <code>rowspan (row span)</code>: 跨行</p></li></ul><p><strong>1.基本表格</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>1.基本结构<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">&quot;top&quot;</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201222155116942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>2.特殊属性</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>2.特殊属性<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;5&quot;</span> <span class="attr">cellpacing</span>=<span class="string">&quot;10&quot;</span> <span class="attr">width</span> =<span class="string">&quot;800px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201222155237396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>3.跨列</strong><br><code>colspan</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>3.跨列<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>青青草原成绩单<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>喜羊羊<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>美羊羊<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>95<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>沸羊羊<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>98<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201222155345404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>4.跨行</strong><br><code>rowspan</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>4.跨行<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020122215551477.png" alt="在这里插入图片描述"><br><strong>5.跨行跨列</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>5.跨行跨列<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>= <span class="string">&quot;300px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> &gt;</span>成绩单<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>孙浩<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201222155644985.png" alt="在这里插入图片描述"><br><strong>6.带语义的表格</strong><br>表格语义标签</p><ul><li><code>caption</code>：表格标题</li><li><code>thead</code>：表格头部</li><li><code>tbody</code>：表格主体</li><li><code>tfoot</code>：表格脚部</li><li><code>th</code>：表格标题 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>6.带语义的表格<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">300px</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">caption</span>&gt;</span>青青草原成绩单<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>喜羊羊<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>美羊羊<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>95<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>沸羊羊<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>98<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>总计<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>298<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>295<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20201222155846899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p><code>iframe</code> 内联框架<br>    在网页中打开的一个小窗口，可以引入其他网页<br>    属性：</p><ul><li>src:引用页面地址</li><li>name：框架标识名<br>* frameborder：边框<br>* width, height：框架宽高<br>* scrolling(yes&#x2F;no)：是否出现滚动条<br> * noresize：是否能调整大小</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>内联框架<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>1.基本应用<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400px&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;yes&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>2.命名框架<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.sina.com.cn&quot;</span> <span class="attr">target</span>=<span class="string">&quot;win&quot;</span>&gt;</span>新浪<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.sohu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;win&quot;</span>&gt;</span>搜狐<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;win&quot;</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://www.sohu.com&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400px&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">scrolling</span>=<span class="string">&quot;yes&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">name</span>=<span class="string">&quot;win&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="HTML5新标签"><a href="#HTML5新标签" class="headerlink" title="HTML5新标签"></a>HTML5新标签</h2><ul><li><code>article</code>:表示一篇文章的主题内容，一般为文字集中显示的区域。</li><li><code>header</code>:页面主体的头部</li><li><code>nav</code>:用于菜单导航、链接导航</li><li><code>section</code>:用于区域的章节表述。</li><li><code>footer</code>:页面的底部</li><li><code>video</code>:视频标签</li><li><code>audio</code>:音频标签</li><li><code>source</code>:媒介标签</li><li>表单标签</li></ul><h2 id="一、表单的基本语法"><a href="#一、表单的基本语法" class="headerlink" title="一、表单的基本语法"></a>一、表单的基本语法</h2><ul><li><p>form：表单标签<br>  内含表单元素，所有要向服务器提交的数据都必须放入表单标签中。</p></li><li><p>属性：<br>  <code>method(get/post)</code>：提交方式</p><ul><li><code>get</code>：参数在地址栏可见，不安全；长度有限制(255)</li><li><code>post</code>：参数在地址栏不可见，安全；长度不限</li></ul><p>  <code>action</code>：服务器地址（将表单中的数据提交给服务器）<br> <code>name</code>：表单的内部引用名</p></li></ul><p>示例：</p><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://www.sohu.com&quot;</span>&gt;</span></span><br><span class="line">   名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;pass&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重填&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201223140155794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70)</code></pre><h2 id="二、表单元素"><a href="#二、表单元素" class="headerlink" title="二、表单元素"></a>二、表单元素</h2><ol><li><p><strong>文本框（text）</strong>:    用于用户输入字符信息</p><ul><li><p>属性：<br> <code>value</code>：表示用户输入的值或者初始值。<br> <code>size</code>：表示文本框长度<br> <code>maxlength</code>：表示可接受的字符数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span> <span class="attr">size</span>=<span class="string">&quot;10&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;6&quot;</span>  &gt;</span></span><br></pre></td></tr></table></figure></li><li><p>效果：<br> <img src="https://img-blog.csdnimg.cn/20201223142010359.png" alt="在这里插入图片描述"></p></li></ul></li><li><p><strong>密码框（password）</strong>：用于用户输入密码信息</p><ul><li><p>属性：<br> <code>value</code>：表示用户输入的密码或者初始密码。<br> <code>size</code>：表示文本框长度<br> <code>maxlength</code>：表示可接受的字符数</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPassword&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">size</span>=<span class="string">&quot;10&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;6&quot;</span>  &gt;</span></span><br></pre></td></tr></table></figure></li><li><p>效果：<br> <img src="https://img-blog.csdnimg.cn/2020122314221669.png" alt="在这里插入图片描述"></p></li></ul></li><li><p><strong>单选按钮（radio）</strong>:便于用户选择单个信息</p><ul><li><p>属性：<br> 单选按钮通常是一组，同一组的单选按钮名称必须相同，但值要不同，这样在选中一个按钮时，其他按钮会自动取消<br> <code>name</code>：单选按钮的名字，同一组的名称相同<br> <code>value</code>：选中本按钮时，提交的值<br> <code>checked</code>：默认选中本按钮</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> &gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">checked</span>&gt;</span>女</span><br></pre></td></tr></table></figure></li><li><p>效果：<br> <img src="https://img-blog.csdnimg.cn/20201223142821332.png" alt="在这里插入图片描述"></p></li></ul></li><li><p><strong>复选框（checkbox）</strong>:便于用户选择多个信息</p><ul><li><p>属性：<br> 复选框通常是一组，同一组的单选按钮名称必须相同，但值要不同，复选框可同时选择多个<br> <code>name</code>：复选框的名字，同一组的名称相同<br> <code>value</code>：选中本按钮时，提交的值<br> <code>checked</code>：默认选中本按钮</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 爱好：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;football&quot;</span> &gt;</span>足球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;basketball&quot;</span> <span class="attr">checked</span>&gt;</span>篮球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;volleyball&quot;</span> <span class="attr">checked</span>&gt;</span>排球</span><br></pre></td></tr></table></figure></li><li><p>效果<br><img src="https://img-blog.csdnimg.cn/20201223143131663.png" alt="在这里插入图片描述"></p></li></ul></li><li><p><strong>文件域（file）</strong>:    用于用户提交文件<br> 文件域通常显示为一个文本框和一个文件选择按钮<br> <code>name</code>：文件域的名字<br> 若想提交文件，必须为 form 表单添加属性：<code>method=&quot;post&quot;, enctype=&quot;multipart/form-data&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">头像：</span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;logo&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><p>   效果：<br>   <img src="https://img-blog.csdnimg.cn/20201223143518385.png" alt="在这里插入图片描述"></p></li><li><p><strong>提交按钮（submit）</strong>:用于提交表单中的数据，点击提交按的默认动作就是提交数据。</p><ul><li><p>属性：<br><code>value</code>：按钮上显示的文字<br><code>name</code>：按钮的名字，通常没什么用，省略</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> <span class="attr">name</span>=<span class="string">&quot;login&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure></li><li><p>效果<br>   <img src="https://img-blog.csdnimg.cn/20201223143852596.png" alt="在这里插入图片描述"></p></li></ul></li><li><p><strong>重置按钮（reset）</strong>：用于提交表单中的表单元素恢复到初始状态。</p><ul><li><p>属性：<br> <code>value</code>：按钮上显示的文字<br> <code>name</code>：按钮的名字，通常没什么用，省略</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure></li><li><p>效果：<br>   <img src="https://img-blog.csdnimg.cn/20201223144156932.png" alt="在这里插入图片描述"></p></li></ul></li><li><p><strong>图片提交按钮（image）</strong>：和 submit 按钮的作用相同，只不过显示为一张图片.</p><ul><li><p>属性：<br> <code>src</code>:引用图片的位置<br> <code>name</code>：按钮的名字，通常没什么用，省略</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;page/images/login.gif&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure></li><li><p>效果：<br>   <img src="https://img-blog.csdnimg.cn/20201223144730441.png" alt="在这里插入图片描述"></p></li></ul></li><li><p><strong>普通按钮（button）</strong>:没有默认动作的按钮,可以添加自定义点击事件</p><ul><li>属性：<br> <code>value</code>:按钮文字<br> <code>name</code>：按钮的名字<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure></li><li>效果：<br>   <img src="https://img-blog.csdnimg.cn/20201223145108770.png" alt="在这里插入图片描述"></li></ul></li><li><p><strong>隐藏域（hidden）</strong> :用于在页面上隐藏一些信息，这些信息不显示出来，但是会提交到服务器.</p><ul><li><p>属性:<br><code>name</code>：隐藏域名称<br>   <code>value</code>:隐藏域提交的值</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1000&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>下拉列表(select-option)</strong>:提供给用户多个选项，供用户选择</p><ul><li><code>select</code>属性：<br> <code>name</code>：下拉列表名称<br> <code>size</code>:下拉列表显示的个数，如果没有内容，则是空白。 </li><li><code>option</code> 标签说明一个选项：标签内容是显示的文字<ul><li><p>属性：<br> <code> value</code>：表示选择本选项时提交的值<br> <code> selected</code>：默认选中本选项</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;grade&quot;</span> <span class="attr">size</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>一年级<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">selected</span>&gt;</span>二年级<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>三年级<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>* 效果：![在这里插入图片描述](https://img-blog.csdnimg.cn/20201223150344471.png)</code></pre></li><li><p><strong>文本域(textarea)</strong>:用于提交多行文本信息</p><ul><li>属性：<br><code>name</code>：文本域名称<br><code>cols</code>：列数<br><code>rows</code>：行数<br><code>style=&quot;resize:none&quot;</code>:设置文本域不可调整大小。 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;40&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;4&quot;</span>&gt;</span>初始化内容<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>效果：<br>  <img src="https://img-blog.csdnimg.cn/20201223151045563.png" alt="在这里插入图片描述"></li></ul></li><li><p><strong>按钮标签（button）</strong>:    与普通按钮的功能类似<br>按钮中包含的内容表示按钮上的文字<br><code>type</code> 表示按钮类型：submit, button</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="三、HTML5新增表单元素"><a href="#三、HTML5新增表单元素" class="headerlink" title="三、HTML5新增表单元素"></a>三、HTML5新增表单元素</h2><ol><li><p><strong>Email标签（email）</strong>:    与文本框功能类似<br> 自动进行邮箱格式验证。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Email:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201223151806802.png" alt="在这里插入图片描述"> </p></li><li><p><strong>URL标签（url）</strong>:自动进行 URL 地址格式验证。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">个人主页：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201223152041769.png" alt="在这里插入图片描述"></p></li><li><p>**number 标签 (number)**：    自动进行数字验证<br> 设定数字<code>最大值(max)</code>, <code>最小值(min)</code>，<code>步长(step)</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">年龄：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">min</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">max</span>=<span class="string">&#x27;130&#x27;</span> <span class="attr">step</span>=<span class="string">&#x27;1&#x27;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201223152120109.png" alt="在这里插入图片描述"></p></li><li><p><strong>数字范围标签(range)</strong>:    自动进行数字验证，通过滑块设置数字<br> 设定数字最大值(max), 最小值(min)，步长(step)</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">音量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;range&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <img src="https://img-blog.csdnimg.cn/20201223152815696.png" alt="在这里插入图片描述"></p></li><li><p>**日历标签 (date)**：    日历选择控件，类型：month,week,time,datetime,datetime-local<br> 可设置日期的默认值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日期：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;2020-12-23&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201223153034410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p><strong>时间标签（time）</strong>：选择时间，几点几分，可设置时间的默认值。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">时间：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;14:30&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201223153253721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>**搜索框标签 (search)**：    用于设定搜索关键字<br> 与文本框的区别在于输入后自动显示关闭按钮，点击可删除关键字，可设置默认值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关键字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;号外号外&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201223153530642.png" alt="在这里插入图片描述"></p></li><li><p><strong>颜色标签（color）</strong>：选择颜色。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">颜色：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">id</span>=<span class="string">&quot;color&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201223153732763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol><h2 id="四、表单元素的特殊属性"><a href="#四、表单元素的特殊属性" class="headerlink" title="四、表单元素的特殊属性"></a>四、表单元素的特殊属性</h2><table><thead><tr><th>属性名</th><th>含义</th><th>适用范围</th></tr></thead><tbody><tr><td>disabled</td><td>禁用表单元素</td><td>适用于各类标签</td></tr><tr><td>readonly</td><td>只读</td><td>适用于输入标签:text,textarea,password</td></tr><tr><td>checked</td><td>默认选中某选项</td><td>radio,checkbox</td></tr><tr><td>selected</td><td>默认选中某选项</td><td>select</td></tr><tr><td>style&#x3D;”resize:none”</td><td>锁定文本域的大小</td><td>textarea</td></tr><tr><td>required</td><td>表示该项为必填项</td><td>适用于输入标签:text,textarea,password</td></tr><tr><td>pattern</td><td>对输入的内容进行自定义正则表达式验证</td><td>适用于输入标签:text,textarea,password</td></tr><tr><td>placeholder</td><td>提供可描述输入字段预期值的提示信息</td><td>text, search, url, telephone, email 以及 password。</td></tr></tbody></table><h2 id="五、语义化的表单"><a href="#五、语义化的表单" class="headerlink" title="五、语义化的表单"></a>五、语义化的表单</h2><ol><li><strong><code>lable</code></strong><br> 将表单元素和说明文字关联起来(例如我们在定义一个单选按钮时，将文字与按钮关联起来后，我们就可以通过点文字选中按钮。)<br> 属性：<br> <code>for</code>：指明和文字关联的表单元素的 id <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">性别：</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">id</span>=<span class="string">&quot;boy&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;boy&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">checked</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;girl&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>2.<strong><code>fieldset-legend</code></strong></p><p>   用于将表单元素归类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单元素<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;url?name1=value1&amp;name2=value2&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;tese.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">legend</span>&gt;</span>基本信息<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;哇咔咔&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span> <span class="attr">size</span>=<span class="string">&quot;40&quot;</span> <span class="attr">readonly</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upwd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                性别：</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">id</span>=<span class="string">&quot;boy&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;boy&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">checked</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;girl&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                爱好：</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">id</span>=<span class="string">&quot;eat&quot;</span> <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;eat&quot;</span>&gt;</span>美食<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sleep&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sleep&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sleep&quot;</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">disabled</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">id</span>=<span class="string">&quot;game&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;game&quot;</span>&gt;</span>游戏<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">id</span>=<span class="string">&quot;study&quot;</span> <span class="attr">value</span>=<span class="string">&quot;study&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;study&quot;</span>&gt;</span>学习<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                头像：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                年级：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;grade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">selected</span>&gt;</span>一年级<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>二年级<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>三年级<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                协议：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">style</span>=<span class="string">&quot;resize:none&quot;</span> <span class="attr">name</span>=<span class="string">&quot;xieyi&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">readonly</span>&gt;</span>是否同意？<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                邮箱：</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email2&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;\w+@\w(\.\w+)&#123;1,2&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                个人主页：</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                电话：</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;119&quot;</span> <span class="attr">required</span> <span class="attr">pattern</span>=<span class="string">&quot;(0[0-9]&#123;2,3&#125;-?)?[1-9]\d&#123;6,7&#125;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                年龄：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span> <span class="attr">max</span>=<span class="string">&quot;60&quot;</span> <span class="attr">min</span>=<span class="string">&quot;16&quot;</span> <span class="attr">step</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                颜色：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">id</span>=<span class="string">&quot;color&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                日期：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                时间：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime-local&quot;</span> <span class="attr">name</span>=<span class="string">&quot;datetime&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                音量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;range&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                关键字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;OK&#x27;)&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>注册2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;OK2&#x27;)&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201223155609659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="六、关于正则表达式"><a href="#六、关于正则表达式" class="headerlink" title="六、关于正则表达式"></a>六、关于正则表达式</h2><p>虽然HTML中提供了对某些输入内容进行验证的表单元素，但在实际应用中，我们还应根据实际情况自定义验证格式，这就需要用到正则表达式对输入内容进行验证，这里简单介绍一些正则表达式：</p><ul><li>正则表达式间的运算：<ul><li><code>+</code>    :   拼接字符，可省略。</li><li><code>或 []</code>：在给定区间随便取一个数。</li><li><code>幂 &#123;&#125;</code> :取规定数量的字符</li></ul></li></ul><p> <code>\d</code>:表示匹配0~9的任何数字，等价于[0-9]<br><code>\w</code>：表示匹配包括下划线的任何单词字符。等价于’[^A-Z a-z 0-9_]<br><code>.</code>:匹配除“\n”之外的任何单个字符。</p><p>如我们要对输入的手机号进行验证，电话号码有11位，第一位必须是1，第二位比较常见的是356789，其他数字随意，那么对于的正则表达式可写为：<code>1[356789]\d&#123;9&#125;</code><br>想了解更多正则表达式的知识请参考：<br><a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html">正则表达式全集</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Web前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter02-关系数据库</title>
      <link href="/2021/09/15/study/database/charter02/"/>
      <url>/2021/09/15/study/database/charter02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2-1-关系数据结构及形式化定义"><a href="#2-1-关系数据结构及形式化定义" class="headerlink" title="2.1 关系数据结构及形式化定义"></a>2.1 关系数据结构及形式化定义</h2><h3 id="2-1-1-关系"><a href="#2-1-1-关系" class="headerlink" title="2.1.1 关系"></a>2.1.1 关系</h3><ul><li><code>关系</code>——单一的数据结构</li><li><code>二维表</code>——关系模型中数据的逻辑结构</li><li><code>域（Domain）</code>是一组具有相同数据类型的值的集合。如整数、实数、指定长度的字符串等</li><li><code>笛卡尔积（Cartesian Product）</code>：域上的集合运算<ul><li>元组</li><li>分量</li><li>基数：一个域允许的不同取值个数。</li></ul></li><li><code>关系（Relation）</code></li><li>码<ul><li>候选码：若关系中的某一属性组的值能++唯一++地标识一个元组，则称该属性组为候选码。极端情况下，关系模式的所有属性组是这个关系模式的候选码，称为全码（All-key）。</li><li>主码：若有多个候选码，则选定一个作为主码。<ul><li>候选码的诸属性称为主属性。不在候选码中的属性叫做<code>非主属性</code>或<code>非码属性</code>。</li></ul></li></ul></li><li>三类关系：<ul><li>基本关系：实际存在的表。<ul><li>列是<code>同质的（homogeneous）</code>,即每一列的分量的数据类型相同。</li><li>不同的列可以出自同一个域，属性名要不一样。</li><li>列的顺序无所谓。</li><li>行的顺序无所谓。</li><li>任意两个元组的候选码不能取相同的值。</li><li>分量必须取原子值，不可再分。</li></ul></li><li>查询表：查询结果对应的表。</li><li>视图表：由基本表或其他视图导出的表，是虚表。</li></ul></li></ul><h3 id="2-1-2-关系模式"><a href="#2-1-2-关系模式" class="headerlink" title="2.1.2 关系模式"></a>2.1.2 关系模式</h3><ul><li>++关系的描述称为关系模式（relation schema）++。</li><li>静态的、稳定的。</li></ul><h3 id="2-1-3-关系数据库"><a href="#2-1-3-关系数据库" class="headerlink" title="2.1.3 关系数据库"></a>2.1.3 关系数据库</h3><ul><li>关系数据库的型也称为关系数据库模式，是对关系数据库的描述。</li><li>关系数据库的值是这些关系模式在某一时刻对应的关系的集合，通常就成为关系数据库。</li></ul><h3 id="2-1-4-关系模型的存储结构"><a href="#2-1-4-关系模型的存储结构" class="headerlink" title="2.1.4 关系模型的存储结构"></a>2.1.4 关系模型的存储结构</h3><h2 id="2-2-关系操作"><a href="#2-2-关系操作" class="headerlink" title="2.2 关系操作"></a>2.2 关系操作</h2><h3 id="2-2-1-基本的关系操作"><a href="#2-2-1-基本的关系操作" class="headerlink" title="2.2.1 基本的关系操作"></a>2.2.1 基本的关系操作</h3><ol><li>查询操作（query）<ul><li>选择（select）</li><li>投影（project）</li><li>连接（join）</li><li>除（divide）</li><li>并（union）</li><li>差（except）</li><li>交（intersection）</li></ul></li><li>插入（insert）、删除（delete）、修改（update）</li></ol><ul><li>关系操作的特点是集合操作方式，操作的对象和结果都是集合</li></ul><h3 id="2-2-2-关系数据语言的分类"><a href="#2-2-2-关系数据语言的分类" class="headerlink" title="2.2.2 关系数据语言的分类"></a>2.2.2 关系数据语言的分类</h3><ul><li>关系数据语言<ul><li>关系代数语言（如ISBL）</li><li>关系演算语言<ul><li>元组关系演算语言（如ALPHA、QUEL）</li><li>域关系演算语言（如QBE）</li></ul></li><li>具有关系代数和关系演算双重特点的语言（如SQL）</li></ul></li></ul><h2 id="2-3-关系的完整性"><a href="#2-3-关系的完整性" class="headerlink" title="2.3 关系的完整性"></a>2.3 关系的完整性</h2><h3 id="2-3-1-实体完整性"><a href="#2-3-1-实体完整性" class="headerlink" title="2.3.1 实体完整性"></a>2.3.1 实体完整性</h3><ul><li>实体完整性规则：主属性不能为空值。</li></ul><h3 id="2-3-2-参照完整性"><a href="#2-3-2-参照完整性" class="headerlink" title="2.3.2 参照完整性"></a>2.3.2 参照完整性</h3><ul><li>设F是关系R的属性，但不是关系R的码，K是关系S的主码，若F与K对应，则F是R的<code>外码（foreign key）</code>,R为<code>参照关系（referencing relation）</code>,S为<code>被参照关系（referenced relation）</code>或<code>目标关系（target relation）</code>。</li><li>参照完整性规则：若F是关系S的外码，则对于R中每个元组在F上的值必须：<ul><li>要么为空值</li><li>要么等于S中某个元组的主码值</li></ul></li></ul><h3 id="2-3-3-用户定义的完整性"><a href="#2-3-3-用户定义的完整性" class="headerlink" title="2.3.3 用户定义的完整性"></a>2.3.3 用户定义的完整性</h3><ul><li>用户定义的完整性就是针对某一具体关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求。</li></ul><h2 id="2-4-关系代数"><a href="#2-4-关系代数" class="headerlink" title="2.4 关系代数"></a>2.4 关系代数</h2><ul><li>关系代数是一种抽象的查询语言，用于对关系的运算表达查询。<br><img src="https://z3.ax1x.com/2021/09/14/4Ab8oT.png" alt="关系代数运算符"></li></ul><h3 id="2-4-1-传统的集合运算"><a href="#2-4-1-传统的集合运算" class="headerlink" title="2.4.1 传统的集合运算"></a>2.4.1 传统的集合运算</h3><ul><li>二目运算，包括并，差，交，笛卡儿积4种运算</li><li>设关系R、S具有相同的属性，相应属性值取自同一个域，t为元组。<ol><li>并（union）:<code>R∪S=&#123;t|t∈R∨t∈S&#125;</code>,t属于R或属于S。</li><li>差（except）:<code>R-S=&#123;t|t∈R∧t∉S&#125;</code>,t属于R且不属于S。</li><li>交（intersection）:<code>R∩S=&#123;t|t∈R∧t∈S&#125;</code>,t属于R且属于S。<code>R∩S=R-(R-S)</code></li><li>笛卡儿积:m和n分别为R和S的列，k1和k2分别为R和S的元组，则<code>R×S</code>有（m+n）列，有（k1*k2）行。</li></ol></li></ul><h3 id="2-4-2-专门的关系运算"><a href="#2-4-2-专门的关系运算" class="headerlink" title="2.4.2 专门的关系运算"></a>2.4.2 专门的关系运算</h3><ul><li>记号<ul><li>关系模式<code>R(A1,A2,...,An)</code></li><li><code>R</code>:关系</li><li>t $\in$ R:t是R的一个元组</li><li><code>t[Ai]</code>:元组t在属性Ai上的一个分量</li><li><code>A1,A2,...,An</code>:属性列或属性组</li><li><code>t[A]</code>:表示t在A上分量的集合</li><li>$\overline{A}$ :表示{A1,A2,…,An}中去掉{Ai1,Ai2,…,Aik}后剩余的属性组。</li><li>$\widehat{t_rt_s}$：$t_r$ $\in$ R，$t_s$ $\in$ S，是一个n + m列的元组，前n个分量为R中的一个n元组，后m个分量为S中的一个m元组。 </li><li>象集$Z_x$：$Z_x$&#x3D;{t[Z]|t$\in$R,t[X]&#x3D;x}<br>  <img src="https://z3.ax1x.com/2021/09/15/4ZHkpF.png" alt="象集"></li></ul></li></ul><ol><li>选择<ul><li>&#x3D;&#x3D;$\sigma$F(R)&#x3D;{t|t$\in$R $\wedge$F(t)&#x3D;’真’}&#x3D;&#x3D;</li><li>选择满足条件的<code>元组</code>。</li></ul></li><li>投影<ul><li>&#x3D;&#x3D;$\Pi$A(R)&#x3D;{t[A]|t$\in$R}&#x3D;&#x3D;</li><li>选择出相应的<code>列</code>。</li></ul></li><li>连接($\theta$连接)<br> <img src="https://z3.ax1x.com/2021/09/15/4ZOWqJ.png"><ul><li>&#x3D;&#x3D;R$\Join$S&#x3D; {$\widehat{t_rt_s}$|$t_r$$\in$R$\wedge$$t_s$$\in$S$\wedge$$t_r$[A]$\theta$$t_s$[B]}&#x3D;&#x3D;</li><li>连接运算从R和S的广义笛卡尔积R×S中选取R关系在A属性组上的值与S关系在B属性组上的值满足比较关系$\theta$的元组<br> <img src="https://z3.ax1x.com/2021/09/15/4ZOoPx.png"></li><li>等值连接；$\theta$为<code>=</code>,从关系R与S的广义笛卡尔积中选取A、B属性值相等的那些元组。<br> <img src="https://z3.ax1x.com/2021/09/15/4ZOHxO.png"></li><li>自然连接：&#x3D;&#x3D;R$\Join$S&#x3D; {$\widehat{t_rt_s}$[U-B]|$t_r$$\in$R$\wedge$$t_s$$\in$S$\wedge$$t_r$[B]$\theta$$t_s$[B]}&#x3D;&#x3D;<ul><li>自然连接是一种特殊的等值连接。两个关系中进行比较的分量必须是相同的属性组；在结果中把重复的属性列去掉。<br> <img src="https://z3.ax1x.com/2021/09/15/4ZOLse.png"></li></ul></li><li>悬浮元组：两个关系R和S在做自然连接时，关系R中某些元组有可能在S中不存在公共属性上值相等的元组，从而造成R中这些元组在操作时被舍弃了，这些被舍弃的元组称为悬浮元组。</li><li>外连接<ul><li>如果把悬浮元组也保存在结果关系中，而在其他属性上填空值(Null)，就叫做外连接</li><li><code>左外连接(LEFT OUTER JOIN或LEFT JOIN)</code><ul><li>只保留左边关系R中的悬浮元组</li></ul></li><li><code>右外连接(RIGHT OUTER JOIN或RIGHT JOIN)</code><ul><li>只保留右边关系S中的悬浮元组</li></ul></li></ul></li></ul></li><li>除运算<ul><li>R与S的除运算得到一个新的关系P(X)，</li><li>P是R中满足下列条件的元组在 X 属性列上的投影：</li><li>元组在X上分量值x的象集Yx包含S在Y上投影的集合:</li><li>&#x3D;&#x3D;R÷S&#x3D;{$t_r$[X]|$t_r$$\in$R$\wedge$$\Pi%$Y(s)$\subseteq$$Y_x$}&#x3D;&#x3D;</li><li>$Y_x$:x在R中的象集<br> <img src="https://z3.ax1x.com/2021/09/15/4Zve2V.png" alt="除运算"></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 数据库原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百草园</title>
      <link href="/2021/09/13/life/wkk/"/>
      <url>/2021/09/13/life/wkk/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Where there is a will,there is a way.<br>有志者，事竟成。</p><p>In my culture,death is not the end.It’s more of a… stepping-off point.You reach out with both hands and Bast and Sekhmet,they lead you into the green weldt where you can run forever.<br>在我的文化里，死亡并不是终结。更像是前往陌生领域的起点。你向芭丝特与塞赫麦特伸出双手，他们带你走进绿草原，在那里你可以永远奔跑下去。</p><pre><code>                            &lt;p align=&quot;right&quot;&gt;——Chadwick Boseman|查德维克·博斯曼|黑豹《美国队长2》&lt;/p&gt;</code></pre><p>A man has to be what he is,Joey.Can’t break the mold.There’s no living with a killing.There’s no going back.Right or wrong,it’s a brand.A brand that sticks.Now you run on home to your mother.You tell her everything’s all right. There are no more guns in the valley.<br>人必须忠于自己，乔伊。不能违背自己的本性。带着杀戮活下去很难。这条路没有退路。是对是错，你都得背负，直至一生。现在快回去找你妈妈。告诉她一切都好。山谷里再也不会有枪声了。</p><pre><code>                            &lt;p align=&quot;right&quot;&gt;——《金刚狼3:殊死一战 Logan》&lt;/p&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Chapter02-物理层</title>
      <link href="/2021/09/13/study/network/chapter02/"/>
      <url>/2021/09/13/study/network/chapter02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2-1-物理层的基本概念"><a href="#2-1-物理层的基本概念" class="headerlink" title="2.1 物理层的基本概念"></a>2.1 物理层的基本概念</h2><ul><li>物理层考虑的是++怎样才能在连接各种计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体++{.wavy}。</li><li>物理层的作用是尽可能地++屏蔽各种传输媒体和通信手段的差异++{.wavy}。</li><li>物理层的协议也称为物理层规程。</li><li>物理层的主要任务是确定与传输媒体<code>接口</code>的一些特性：<ul><li>[机械特性]{.aqua}:指明接口所用接线器的形状、尺寸、引脚数目和排序、固定和锁定装置。</li><li>[电气特性]{.green}:接口电缆的各条线是出现的电压的范围。</li><li>[功能特性]{.blue}:某条线上出现的某一电平的电压的意义。</li><li>[过程特性]{.yellow}:对于不同功能的各种可能事件的出现顺序。</li></ul></li><li>数据在计算机内采用<code>并行传输</code>,在通信线路中一般是<code>串行传输</code>。</li></ul><h2 id="2-2-数据通信的基础知识"><a href="#2-2-数据通信的基础知识" class="headerlink" title="2.2 数据通信的基础知识"></a>2.2 数据通信的基础知识</h2><h3 id="2-2-1-数据通信的模型"><a href="#2-2-1-数据通信的模型" class="headerlink" title="2.2.1 数据通信的模型"></a>2.2.1 数据通信的模型</h3><ul><li>一个数据通信系统可分为三大部分<ul><li>源系统（发送端）包括两个部分：<ul><li>源点：产生要发送的数据。</li><li>发送器：典型的发送器就是调制器。</li></ul></li><li>传输系统（传输网络）<ul><li><code>简单线</code>或<code>复杂的通信系统</code>。</li></ul></li><li>目的系统（接收端）包括两个部分：<ul><li>接收器：典型的接收器就是解调器。</li><li>终点：从接收器获取传送来的比特流。</li></ul></li></ul></li><li>通信的目的是传送<code>消息</code>。</li><li><code>数据</code>是运送消息的实体。</li><li><code>信号</code>是数据电气或电磁的表现。<ul><li>模拟信号（连续信号）：参数的取值是连续的。</li><li>数字信号（离散信号）：参数的取值是离散的。在使用<code>时域</code>的波形表示数字信号时，代表不同离散数值的基本波形称为<code>码元</code><ul><li>在二进制编码中，只有两种不同的码元，<code>0状态</code>和<code>1状态</code>。<br><img src="https://z3.ax1x.com/2021/09/13/4iQ8XR.png" alt="数据通信的模型"></li></ul></li></ul></li></ul><h3 id="2-2-2-关于信道的概念"><a href="#2-2-2-关于信道的概念" class="headerlink" title="2.2.2 关于信道的概念"></a>2.2.2 关于信道的概念</h3><ul><li><code>信道（channel）</code>不等同于电路，表示向某一个方向传送信息的媒体。一条通信电路往往包含一条发送信道和一条接收信道。</li><li>从信道的双方信息交互的方式来看，有三种基本方式：<ul><li>&#x3D;&#x3D;单向通信（单工通信）&#x3D;&#x3D;：只能有一个方向的通信而没有反方向的交互。比如广播。</li><li>&#x3D;&#x3D;双向交替通信（半双工通信）&#x3D;&#x3D;：通信的双方都能发送消息，但不能同时发送和接收。</li><li>&#x3D;&#x3D;双向同时通信（全双工通信）&#x3D;&#x3D;：通信双方可同时发送和接收消息。传输效率最高。</li></ul></li><li>来自信源的信号称为<code>基带信号</code>，包含较多的低频和直流成分，许多信道不能传输，因此必须对基带信号进行调制：<ul><li><code>基带调制</code>:仅仅对基带信号的波形进行变换，与信道特性相适应。把数字信号转换为另一种数字信号，因此也称为<code>编码</code>。常用编码方式：<ul><li>&#x3D;&#x3D;不归零制&#x3D;&#x3D;：正点平代表1，负电平代表0</li><li>&#x3D;&#x3D;归零制&#x3D;&#x3D;：正脉冲代表1，负脉冲代表0</li><li>&#x3D;&#x3D;曼彻斯特编码&#x3D;&#x3D;：<code>位周期中心</code>上跳变为0，下跳变为1</li><li>&#x3D;&#x3D;差分曼彻斯特编码&#x3D;&#x3D;：每一位的中心都有跳变，<code>位开始边界</code>有跳变为0，无跳变为1</li><li>曼彻斯特编码产生的信号频率比不归零制高，曼彻斯特具有<code>自同步能力</code><br>  <img src="https://z3.ax1x.com/2021/09/13/4iyjw6.png" alt="常用编码方式"></li></ul></li><li><code>带通调制</code>：使用<code>载波</code>进行调制，把基带信号的频率范围搬移到较高的频段，并转换为模拟信号，从而更好的在模拟信道中传输，经过<code>载波</code>调制后的信号称为带通信号。基本的带通调制方法：<ul><li><code>调幅(AM)</code>：载波的振幅随基带数字信号而变化。如，0无载波，1有载波</li><li><code>调频(FM)</code>：载波的频率随基带数字信号而变化。</li><li><code>调相(PM)</code>：载波的初始相位随基带数字信号而变化。</li><li>为了达到更高的信息传输速率，必须采用技术更复杂的多元制的振幅相位混合调制方法，如<code>正交振幅调制QAM</code><br>  <img src="https://z3.ax1x.com/2021/09/13/4igHSg.png" alt="最基本的调制方法"></li></ul></li></ul></li></ul><h3 id="2-2-3-信道的极限容量"><a href="#2-2-3-信道的极限容量" class="headerlink" title="2.2.3 信道的极限容量"></a>2.2.3 信道的极限容量</h3><ul><li>任何实际的信道都不可能以任意高的速率进行传送。</li><li>信号在传输信道传输后不可避免的会出现失真，但只要在接收端能识别出原来的信号，那么这种失真对通信质量没有影响。</li><li>码元传输的速率越高，信号传输的距离越远，噪声干扰越大，传输媒体越差，在接收端的波形失真就越严重。<br><img src="https://z3.ax1x.com/2021/09/13/4i2d1g.png" alt="信号通过实际的信道"></li><li>限制码元在信道上的传输速率的因素：<ul><li>&#x3D;&#x3D;信道能够通过的频率范围&#x3D;&#x3D;<ul><li>具体的信道所能通过的频率范围总是有限的，在接受端收到的信号波形失去码元之间的清晰界限的现象称为<code>码间串扰</code></li><li>1924年，奈奎斯特推导出著名的<code>奈氏准则</code>。</li><li>++在任何信道中，码元传输的速率是有上限的，传输速率超过此上限，就会出现严重的码间串扰问题，使接收端对码元的识别成为不可能++{.wavy}</li></ul></li><li>&#x3D;&#x3D;信噪比&#x3D;&#x3D;<ul><li>噪声存在于所有的电子设备和通信信道中。</li><li>噪声的影响是相对的，如果信号强度很强，那么噪声的影响就较小。</li><li>信噪比就是信号的平均功率和噪声的平均功率之比，记作<code>S/N</code>,用<code>分贝（dB）</code>作为度量单位。<br>  <img src="https://z3.ax1x.com/2021/09/13/4iheDH.png" alt="信噪比"></li><li>1948年，信息论的创始人++香农++推导出著名的<code>香农公式</code>，指出信道的极限信息传输速率C<br>  <img src="https://z3.ax1x.com/2021/09/13/4ifNh6.png" alt="香农公式"></li><li>W为信道的宽度，S为信道内所传信号的平均功率，N为信道内部的<code>高斯噪声功率</code>。</li><li>信道的带宽或信道中的信噪比越大，信息的传输速率就越高。</li><li>只要信息传输速率低于信道的极限信息传输速率，就一定可以找到某种办法来实现无差错的传输。 </li><li>对于频带宽度已确定的信道，如果信噪比不能再提高了，并且码元传输速率也达到了上限值，那么还有办法提高信息的传输速率。这就是：++用编码的方法让每一个码元携带更多比特的信息量。++{.wavy}</li></ul></li></ul></li></ul><h2 id="2-3-物理层下面的传输媒体"><a href="#2-3-物理层下面的传输媒体" class="headerlink" title="2.3 物理层下面的传输媒体"></a>2.3 物理层下面的传输媒体</h2><p><img src="https://z3.ax1x.com/2021/09/13/4ihLdA.png" alt="电信领域使用的电磁波的频谱"></p><ul><li>引导型传输媒体<ol><li>双绞线<ul><li>通信距离为十到十几公里。</li><li>屏蔽双绞线STP</li><li>无屏蔽双绞线<br> <img src="https://z3.ax1x.com/2021/09/18/4Q8Z9O.png" alt="双绞线"></li><li>1991年，标准<code>EIA/TIA-568</code></li><li>1995年，更新为<code>EIA/TIA-568-A</code></li><li>最常用UTP标准的五类线<br> <img src="https://z3.ax1x.com/2021/09/18/4Q8c2F.png" alt="常用双绞线"></li></ul></li><li>同轴电路<ul><li>较好的抗干扰性，广泛用于传输较高速率的数据</li><li>带宽取决于电缆的质量</li><li>50Ω——LAN&#x2F;数字传输，70Ω——数字电视&#x2F;模拟传输<br> <img src="https://z3.ax1x.com/2021/09/18/4QY3U1.png" alt="同轴电缆"></li></ul></li><li>光缆<ul><li>光纤<br>  光纤通信就是利用光导纤维传递光脉冲进行通信<ul><li>光纤十光纤通信的传输媒体</li><li>原理：当光纤从高折射率的媒体向低折射率的媒体时，其折射角将大于入射角，因此，如果入射角足够大，就会出现全反射，光线碰到<code>包层</code>后折射回<code>纤芯</code>。<br> <img src="https://z3.ax1x.com/2021/09/18/4QtJds.png" alt="光纤中的折射"></li></ul></li><li>多模光纤：多条不同角度入射的光线在一条光纤中传输。</li><li>单模光纤：光纤的直径减小到只有一个光的波长，使光线一直向前传播，不必发生多次反射。<br> <img src="https://z3.ax1x.com/2021/09/18/4QUiHH.png" alt="单模光纤与多模光纤"></li><li>优点<ul><li>传输损耗小，中继距离长。</li><li>抗雷电和电磁干扰性能好。</li><li>无串音干扰，保密性好。</li><li>体积小，重量轻<br> <img src="https://z3.ax1x.com/2021/09/18/4QaVZ4.png" alt="四芯光缆"></li></ul></li><li>常用的三个波段的中心分别位于 850 nm, 1300 nm 和 1550 nm。</li><li>所有这三个波段都具有 25000~30000 GHz 的带宽，可见光纤的通信容量非常大。</li></ul></li></ol></li><li>非引导型传输媒体<ul><li><code>无线传输</code>可使用的频段很广<br>  <img src="https://z3.ax1x.com/2021/09/18/4QwDaQ.md.png" alt="无线局域网使用的ISM频段"></li><li><code>短波通信（高频通信）</code>主要靠电离层的反射，通信质量较差，一般用低速传输。</li><li><code>微波</code>在空间中直线传播<ul><li>微波接力通信</li><li>卫星通信<ul><li>较大的传播时延</li></ul></li></ul></li></ul></li></ul><h2 id="2-4-信道复用技术"><a href="#2-4-信道复用技术" class="headerlink" title="2.4 信道复用技术"></a>2.4 信道复用技术</h2><p>复用：允许用户使用一个共享信道进行通信，降低成本，提高利用率。</p><h3 id="2-4-1-频分复用、时分复用和统计时分复用"><a href="#2-4-1-频分复用、时分复用和统计时分复用" class="headerlink" title="2.4.1 频分复用、时分复用和统计时分复用"></a>2.4.1 频分复用、时分复用和统计时分复用</h3><ul><li>频分复用<ul><li>将整个宽带分为多份，用户在分配到一定的频带后，在通信工程中自始至终都占用这个频带。</li><li>多个用户在相同的时间占用不同的带宽资源。</li><li>举个例子，某一信道分为<code>0~49Hz</code>、<code>50~99Hz</code>、<code>100~149Hz</code>、<code>150~200Hz</code>四段频带,A、B、C、D四个用户在进行通信时分别自始至终占用相应的带宽。<br>  <img src="https://z3.ax1x.com/2021/09/18/4ls7O1.png" alt="频分复用"></li></ul></li><li>时分复用<ul><li>将时间划分为一段段等长的时分复用帧<code>TDM帧</code>，每一个时分复用的用户在每一个<code>TDM帧</code>中占用固定序号的时隙。<ul><li>注意，此处的<code>帧</code>指的是时间，而不是数据帧。</li></ul></li><li>时隙周期性出现，同步时分复用，周期为<code>TDM帧</code>的长度。</li><li>用户在不同的时间占用同样的频带宽度。</li><li>举个例子，用户A、B、C、D共用一条信道或信道中的某一频带a,<code>TDM帧</code>为400$\mu$s,则A用户在前100$\mu$s占用a传输数据，B用户在第二个100$\mu$占用a传输数据…依次类推。<br>  <img src="https://z3.ax1x.com/2021/09/18/4lcYLR.png" alt="时分复用"></li><li>显而易见，这样有一个缺点，如果轮到某一个用户时，用户没有发送数据，却在时隙中占用着线路资源，造成了线路浪费。如图所示，在<code>#1</code>TDM帧中，只有A、B使用了线路。<br>  <img src="https://z3.ax1x.com/2021/09/18/4lgWu9.png" alt="时分复用的缺点"></li><li>由此便出现了统计时分复用。</li></ul></li><li>统计时分复用<ul><li>时隙小于用户数。</li><li>统计时分复用中用到了<code>集中器</code>，用户有数据就发，<code>集中器</code>按顺序对数据进行缓存，没有发送数据的跳过，当一个帧的数据放满了再发送出去，这时的帧称为<code>STDM帧</code>。</li><li>每个用户所占用的时隙不是周期性出现，因此也叫做异步时分复用。<br>  <img src="https://z3.ax1x.com/2021/09/18/4lW0HA.png" alt="统计时分复用"></li></ul></li></ul><h3 id="2-4-2-波分复用"><a href="#2-4-2-波分复用" class="headerlink" title="2.4.2 波分复用"></a>2.4.2 波分复用</h3><p>波分复用<code>WDM就是光的频分复用</code></p><ul><li>简单说一下原理，其实和频分复用差不多，就是使用一根光纤同时传输多个<code>光载波信号</code>,先将某一速率的光载波的波长经光的调制后变换到某一段波长相近的波段，经过<code>光复用器</code>后在一根光纤中传播，到达目的地后再用<code>光分用器</code>进行还原。</li><li>光在传播时会产生衰减，要用到<code>掺铒光纤发大器</code>,两个<code>掺铒光纤发大器</code>之间的线路可达120km,<code>光复用器</code>和<code>光分用器</code>之间的距离可达600km。<br><img src="https://z3.ax1x.com/2021/09/18/4l5JVH.png" alt="波分复用"></li></ul><h3 id="2-4-3-码分复用"><a href="#2-4-3-码分复用" class="headerlink" title="2.4.3 码分复用"></a>2.4.3 码分复用</h3><ul><li>码分复用CDM也叫做码分多址CDMA</li><li>各用户使用经过挑选的不同码型，因此不会造成干扰</li><li>这种系统发送的信号具有很高的抗干扰性，频谱类似于白噪声，不易被发现。</li><li>每一个比特时间划分为m个时间间隔（通常为64或128），称为<code>码片(chip)</code></li><li>每个站被指派一个唯一的m bit<code>码片序列</code><ul><li>如果要发送比特1，则发送自己的m bit码片序列</li><li>如果要发送比特0，则发送该码片序列的反码。</li><li>举个例子，S站的码片序列为01010011，则发送比特1时，发送序列<code>01010011</code>；发送比特0时，发送序列<code>10101100</code>。</li><li>S站码片序列也可写作（-1+1-1+1-1-1+1+1），0为<code>-1</code>，1为<code>+1</code>。</li></ul></li><li>假定S站要发送信息的数据率为 <code>a</code> bit&#x2F;s。由于每一个比特要转换成 m 个比特的码片，因此 S 站实际上发送的数据率提高到 <code>ma</code> bit&#x2F;s，同时 S 站所占用的频带宽度也提高到原来数值的 m 倍。这种通信方式是扩频(spread spectrum)通信中的一种。</li><li>扩频通信<ul><li>直接序列扩频DSSS</li><li>调频扩频FHSS</li></ul></li><li>++每个站点的码片序列必须不相同，且必须正交，++即使用伪随机码序列。</li><li>两个不同站的码片序列正交，就是S和T的规格化内积为0<br>  <img src="https://z3.ax1x.com/2021/09/18/4lHfDf.png" alt="规格化内积"></li><li>码片向量与自己的规格化内积为1，与自己码片反码的相邻的规格化内积为-1<br>  <img src="https://z3.ax1x.com/2021/09/18/4lbP2R.png"></li><li>CDMA的工作原理<br><img src="https://z3.ax1x.com/2021/09/18/4lbrLV.png" alt="CDMA的工作原理"><br>若T站使用T站的码片序列也发送相同的数据，因为所有的站都使用相同的频率，因此每一个站都能收到所有站发送的扩频信号，则所有站收到的信号为 $S_x$ +$T_x$ 。此时接收站打算接收S的信号时，用S站的码片序列与收到的信号进行规格化内积，即计算S·$S_x$和T·$T_x$，S·$S_x$为1或-1，而T·$T_x$的结果一段为0。</li></ul><h2 id="2-5-数字传输系统"><a href="#2-5-数字传输系统" class="headerlink" title="2.5 数字传输系统"></a>2.5 数字传输系统</h2><ul><li>在早期电话网中，从市话局到用户电话机的用户线是采用最廉价的<code>双绞线电缆</code>，而长途干线采用的是<code>频分复用 FDM </code>的模拟传输方式。</li><li>++与模拟通信相比，数字通信无论是在传输质量上还是经济上都有明显的优势。++</li><li>目前，长途干线大都采用<code>时分复用 PCM </code>的数字传输方式。</li><li><code>脉码调制 PCM</code> 体制最初是为了在电话局之间的中继线上传送多路的电话。</li><li>由于历史上的原因，PCM 有两个互不兼容的国际标准：<ul><li>北美的 24 路 PCM（简称为 T1）</li><li>欧洲的 30 路 PCM（简称为 E1）</li><li>我国采用的是欧洲的 E1 标准。</li><li>E1 的速率是 <code>2.048 Mbit/s</code>，而 T1 的速率是 <code>1.544 Mbit/s</code>。</li></ul></li><li>当需要有更高的数据率时，可采用复用的方法。</li><li>旧的数字传输系统存在许多缺点<ul><li>速率标准不统一<ul><li>如果不对高次群的数字传输速率进行标准化，国际范围的基于光纤高速数据传输就很难实现。</li></ul></li><li>不是同步传输<ul><li>在过去相当长的时间，为了节约经费，各国的数字网主要是采用准同步方式。  </li><li>当数据传输的速率很高时，收发双方的时钟同步就成为很大的问题。</li></ul></li></ul></li><li>同步光纤网<ul><li><code>同步光纤网 SONET (Synchronous Optical Network)  </code>的各级时钟都来自一个非常精确的主时钟。 </li><li>SONET 为光纤传输系统定义了同步传输的线路速率等级结构<ul><li>对电信信号称为第 1 级同步传送信号 <code>STS-1 (Synchronous Transport Signal)</code>，其传输速率是 <code>51.84 Mbit/s</code>。</li><li>对光信号则称为第 1 级光载波 <code>OC-1 (OC 表示Optical Carrier)</code>。<br>  现已定义了从 <code>51.84 Mbit/s (即OC-1)</code> 一直到 <code>9953.280 Mbit/s (即 OC-192/STS-192)</code> 的标准。</li></ul></li></ul></li><li>同步数字系列 SDH <ul><li><code>ITU-T</code> 以美国标准 SONET 为基础，制订出国际标准同步数字系列 <code>SDH (Synchronous Digital Hierarchy)</code>。</li><li>一般可认为 SDH 与 SONET 是同义词。</li><li>其主要不同点是：SDH 的基本速率为 <code>155.52 Mbit/s</code>，称为第 1 级同步传递模块 <code>(Synchronous Transfer Module)，即 STM-1</code>，相当于 SONET 体系中的 <code>OC-3 </code>速率。<br><img src="https://z3.ax1x.com/2021/09/18/4lL7Pe.png" alt="SONET的 OC级 / STS级 与SDH的 STM级 的对应关系"></li></ul></li><li>SONET &#x2F; SDH 标准的意义<ul><li>使不同的数字传输体制在 STM-1 等级上获得了统一。</li><li>第一次真正实现了数字传输体制上的世界性标准。</li><li>已成为公认的新一代理想的传输网体制。</li><li>SDH 标准也适合于微波和卫星传输的技术体制。</li></ul></li></ul><h2 id="2-6-宽带接入技术"><a href="#2-6-宽带接入技术" class="headerlink" title="2.6 宽带接入技术"></a>2.6 宽带接入技术</h2><ul><li>用户要连接到互联网，必须先连接到某个 ISP。</li><li>在互联网的发展初期，用户都是利用电话的用户线通过调制解调器连接到 ISP 的，电话用户线接入到互联网的速率最高只能达到 <code>56 kbit/s</code>。</li><li>美国联邦通信委员会 <code>FCC </code>认为只要双向速率之和超过 <code>200 kbit/s </code>就是宽带。</li></ul><h3 id="2-6-1-ADSL技术"><a href="#2-6-1-ADSL技术" class="headerlink" title="2.6.1 ADSL技术"></a>2.6.1 ADSL技术</h3><ul><li><code>非对称数字用户线 ADSL (Asymmetric Digital Subscriber Line) </code>技术就是用数字技术对现有的模拟电话用户线进行改造，使它能够承载宽带业务。</li><li>标准模拟电话信号的频带被限制在 <code>300~3400 Hz</code> 的范围内，但用户线本身实际可通过的信号频率仍然超过 1 MHz。</li><li>ADSL 技术就把 <code>0~4 kHz</code> 低端频谱留给传统电话使用，而把原来没有被利用的高端频谱留给用户上网使用。</li><li><code>DSL</code> 就是数字用户线 (Digital Subscriber Line) 的缩写。</li><li>DSL的几种类型<ul><li>ADSL (Asymmetric Digital Subscriber Line)：非对称数字用户线</li><li>HDSL (High speed DSL)：高速数字用户线</li><li>SDSL (Single-line DSL)：1 对线的数字用户线</li><li>VDSL (Very high speed DSL)：甚高速数字用户线</li><li>DSL (Digital Subscriber Line) ：数字用户线。</li><li>RADSL (Rate-Adaptive DSL)：速率自适应 DSL，是 ADSL 的一个子集，可自动调节线路速率）。</li></ul></li><li>ADSL 的传输距离<ul><li>ADSL 的传输距离取决于数据率和用户线的线径（用户线越细，信号传输时的衰减就越大）。</li><li>ADSL 所能得到的最高数据传输速率与实际的用户线上的信噪比密切相关。</li></ul></li><li>ADSL的特点<ul><li>上行和下行带宽做成不对称的。<ul><li>上行指从用户到 ISP，而下行指从 ISP 到用户。</li></ul></li><li>ADSL 在用户线（铜线）的两端各安装一个 <code>ADSL 调制解调器</code>。</li><li>我国目前采用的方案是<code>离散多音调 DMT (Discrete Multi-Tone)调制技术</code>。<ul><li>这里的“多音调”就是“多载波”或“多子信道”的意思。</li></ul></li></ul></li><li>DMT技术<ul><li>DMT 调制技术采用<code>频分复用</code>的方法，把 40 kHz 以上一直到 1.1 MHz 的高端频谱划分为许多的子信道，其中 ++25 个子信道用于上行信道，而 249 个子信道用于下行信道。++</li><li>每个子信道占据++ 4 kHz 带宽（严格讲是 4.3125 kHz），++并使用不同的载波（即不同的音调）进行数字调制。这种做法相当于在一对用户线上使用许多小的调制解调器并行地传送数据。</li><li>频谱分布<br>  <img src="https://z3.ax1x.com/2021/09/18/4lXs1J.png"></li></ul></li><li>ADSL的数据率<ul><li>由于用户线的具体条件往往相差很大（距离、线径、受到相邻用户线的干扰程度等都不同），因此 ADSL 采用自适应调制技术使用户线能够传送尽可能高的数据率。</li><li>当 ADSL 启动时，用户线两端的 ADSL 调制解调器就测试可用的频率、各子信道受到的干扰情况，以及在每一个频率上测试信号的传输质量。</li><li>ADSL 不能保证固定的数据率。对于质量很差的用户线甚至无法开通 ADSL。</li><li>通常下行数据率在 <code>32 kbit/s 到 6.4 Mbit/s </code>之间，而上行数据率在 <code>32 kbit/s 到 640 kbit/s 之间</code>。</li></ul></li><li>ASDL的组成<br>  <img src="https://z3.ax1x.com/2021/09/18/4ljdKA.png"></li><li>第二代ADSL<ul><li>包括 <code>ADSL2（G.992.3 和 G.992.4）</code>和<code> ADSL2+（G.992.5）</code></li><li>通过提高调制效率得到了更高的数据率。<ul><li>ADSL2 要求至少应支持++下行 8 Mbit&#x2F;s、上行 800 kbit&#x2F;s的速率++{.wayv}。</li><li>ADSL2+ 则将频谱范围从 <code>1.1 MHz 扩展至 2.2 MHz</code>，下行速率可达 <code>16 Mbit/s（最大传输速率可达 25 Mbit/s）</code>，而上行速率可达 <code>800 kbit/s</code>。</li></ul></li><li>采用了<code>无缝速率自适应技术 SRA (Seamless Rate Adaptation) </code>，可在运营中不中断通信和不产生误码的情况下，自适应地调整数据率。</li><li>++改善了线路质量评测和故障定位功能，这对提高网络的运行维护水平具有非常重要的意义。++</li></ul></li></ul><h3 id="2-6-2-光纤同轴混合网-HFC网"><a href="#2-6-2-光纤同轴混合网-HFC网" class="headerlink" title="2.6.2 光纤同轴混合网(HFC网)"></a>2.6.2 光纤同轴混合网(HFC网)</h3><ul><li><code>HFC (Hybrid Fiber Coax)</code> 网是在目前覆盖面很广的有线电视网 CATV 的基础上开发的一种居民宽带接入网。</li><li>HFC 网除可传送 CATV 外，还提供电话、数据和其他宽带交互型业务。</li><li>现有的<code>CATV</code>网是<code>树形拓扑结构的同轴电缆网络</code>，它采用模拟技术的频分复用对电视节目进行单向传输。</li><li>++HFC 网对 CATV 网进行了改造。++</li><li>HFC 网将原 ++CATV 网中的同轴电缆++主干部分改换为++光纤++，并使用<code>模拟光纤技术</code>。</li><li>在模拟光纤中采用<code>光的振幅调制 AM</code>，这比使用数字光纤更为经济。</li><li>模拟光纤从头端连接到<code>光纤结点 (fiber node)</code>，即光分配结点 <code>ODN (Optical Distribution Node)</code>。在光纤结点光信号被转换为电信号。在光纤结点以下就是同轴电缆。<br><img src="https://z3.ax1x.com/2021/09/18/4lvdWF.png" alt="HFC 网采用结点体系结构 "></li><li>双向传输功能，扩展了传输频带<br><img src="https://z3.ax1x.com/2021/09/18/4lvco6.png" alt="我国的 HFC 网的频谱划分"></li><li><code>用户接口盒 UIB (User Interface Box) </code>要提供三种连接，即：<ul><li>使用<code>同轴电缆</code>连接到<code>机顶盒 (set-top box)</code>，然后再连接到用户的<code>电视机</code>。</li><li>使用<code>双绞线</code>连接到用户的<code>电话机</code>。</li><li>使用<code>电缆调制解调器</code>连接到用户的<code>计算机</code>。</li><li>电缆调制解调器<ul><li>电缆调制解调器是为 HFC 网而使用的调制解调器。</li><li>电缆调制解调器最大的特点就是传输速率高。<ul><li>下行速率一般在  <code>3 ~ 10 Mbit/s</code>之间，最高可达 30 Mbit&#x2F;s。</li><li>上行速率一般为<code> 0.2 ~ 2 Mbit/s</code>，最高可达 10 Mbit&#x2F;s。</li></ul></li><li>电缆调制解调器比在普通电话线上使用的调制解调器要复杂得多，并且不是成对使用，++而是只安装在用户端。 ++</li></ul></li></ul></li></ul><h3 id="2-6-3-FTTx技术"><a href="#2-6-3-FTTx技术" class="headerlink" title="2.6.3 FTTx技术"></a>2.6.3 FTTx技术</h3><ul><li>FTTx 是一种实现宽带居民接入网的方案，代表多种宽带光纤接入方式。</li><li>FTTx 表示 <code>Fiber To The…（光纤到…）</code>，例如：<ul><li>[光纤到户 FTTH (Fiber To The Home)]{.aqua}：光纤一直铺设到用户家庭，可能是居民接入网最后的解决方法。</li><li>[光纤到大楼 FTTB (Fiber To The Building)]{.blue}：光纤进入大楼后就转换为电信号，然后用电缆或双绞线分配到各用户。</li><li>[光纤到路边 FTTC (Fiber To The Curb)]{.pink}：光纤铺到路边，从路边到各用户可使用星形结构双绞线作为传输媒体。<br><img src="https://z3.ax1x.com/2021/09/18/4lxhNV.png" alt="无源光网络 PON(Passive Optical Network) 的组成"></li></ul></li></ul><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><img src="https://z3.ax1x.com/2021/11/07/IlLIQe.png" alt="思维导图"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 物理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter02-基本数据类型、运算符及表达式</title>
      <link href="/2021/09/12/study/c/chapter02/"/>
      <url>/2021/09/12/study/c/chapter02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-常量"><a href="#1-常量" class="headerlink" title="1. 常量"></a>1. 常量</h2><ul><li>[整型常量]{.aqua}<ul><li>&#x3D;&#x3D;十进制整型常量&#x3D;&#x3D;：0~9,无前缀，不能以0起头。</li><li>&#x3D;&#x3D;八进制整型常量&#x3D;&#x3D;：0~7,以0为前缀，没有小数部分。</li><li>&#x3D;&#x3D;十六进制整数常量&#x3D;&#x3D;：0~7&amp;&amp;A-F(大小写)，以<code>0x</code>或<code>0X</code>为前缀，无小数部分。</li></ul></li><li>[实型（浮点型）常量]{.blue}<ul><li>&#x3D;&#x3D;十进制&#x3D;&#x3D;：0~9数字及小数点，如<code>1.234</code>、<code>0.0</code>。</li><li>&#x3D;&#x3D;指数形式&#x3D;&#x3D;<ul><li>++指数部分必须为整数。++{.wavy}</li><li>++<code>e</code>或<code>E</code>之前和之后必须有数字。++{.wavy}</li><li>如<code>-12e5</code>、<code>1.25E-6</code>。</li></ul></li></ul></li><li>[符号常量]{.purple}<ul><li>用标识符<code>identifier</code>代表常量。</li><li>一般用大写字母。</li><li>是<code>宏</code>定义预处理命令，不是<code>C语句</code>。</li><li>编译时先由系统替换为它所代表的常量，再进行编译。</li><li>本质是常量，不能被改变。  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br></pre></td></tr></table></figure></li></ul></li><li>[字符型常量]{.yellow}<ul><li>字符：’单个字符’，如<code>&#39;a&#39;</code>,<code>&#39;0&#39;</code>,<code>&#39;A&#39;</code>,以<code>ASCLL</code>码存储。</li><li>字符串：’字符序列’，如<code>&quot;CHINA&quot;</code>。</li></ul></li><li>[转义字符]{.pink}</li></ul><table><thead><tr><th>转义字符</th><th>字符含义</th><th>输出效果</th></tr></thead><tbody><tr><td><code>\&#39;</code></td><td>一个单引号</td><td>输出单引号</td></tr><tr><td><code>\&quot;</code></td><td>一个双引号</td><td>输出双引号</td></tr><tr><td><code>\?</code></td><td>一个问号</td><td>输出问号</td></tr><tr><td><code>\\</code></td><td>一个反斜杠</td><td>输出反斜杠</td></tr><tr><td><code>\a</code></td><td>警告</td><td>发出警告声音</td></tr><tr><td><code>\b</code></td><td>退格</td><td>光标后退一个字符</td></tr><tr><td><code>\n</code></td><td>换行</td><td>光标移至下一行开头</td></tr><tr><td><code>\r</code></td><td>回车</td><td>光标移至本行开头</td></tr><tr><td><code>\t</code></td><td>水平制表符</td><td>光标移至下一个<code>TAB</code>位置</td></tr><tr><td><code>\v</code></td><td>垂直制表符</td><td>光标移至下一个垂直制表对齐位。</td></tr><tr><td><code>\ddd</code> 1~3位八进制数</td><td>与该八进制对应ASCLL码的字符</td><td>输出对应的ASCLL码的字符</td></tr><tr><td><code>\xhh</code> 1~2位十六进制数</td><td>与该十六进制对应ASCLL码的字符</td><td>输出对应的ASCLL码的字符</td></tr></tbody></table><h2 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2. 运算符"></a>2. 运算符</h2><ul><li>[算术运算符与算数表达式]{.green}<ul><li>算术运算符：<code>+</code>、<code>-</code>、<code>*</code>、<code>\</code>、<code>%</code></li><li>算数表达式：由常量、变量、函数、圆括号和算术运算符等组成的式子。一个常量、一个变量（已赋过值）、一个函数都是合法的表达式。</li></ul></li><li>[赋值运算符和赋值表达式]{.yellow}<ul><li>赋值运算符:<code>=</code></li><li>赋值表达式:由<code>=</code>将一个变量和一个表达式连接起来的式子称为赋值表达式，赋值表达式的末尾加上分号就构成赋值语句。赋值表达式的值就是执行赋值操作后的变量取值。</li></ul></li><li>[关系运算符]{.pink}<ul><li>关系运算符：<code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>==</code>、<code>!=</code>。</li><li>结果为true&#x2F;false。</li></ul></li><li>[逻辑运算符]{.aqua}<ul><li>逻辑运算符：<code>&amp;&amp;</code>、<code>||</code>、<code>!</code></li><li><code>a&amp;&amp;b</code>:a、b都为真为真，a、b都为假为价。</li><li><code>a||b</code>:a或b为真为真，a或b为假为假。</li><li><code>a</code>为真，<code>!a</code>为假。</li></ul></li><li>[条件运算符]{.red}<ul><li>格式：<code>表达式1?表达式2:表达式3</code></li><li>表达式1为真，取表达式2的值；表达式1为真，取表达式3的值。</li><li>条件运算符可嵌套，如<code>x&gt;0?1?(x&gt;0?-1:0)</code></li></ul></li><li>[逗号运算符]{.purple}<ul><li>格式：<code>表达式1,表达式2,...,表达式n</code></li><li>取<code>表达式n</code>的值。</li></ul></li><li>[自增运算符与自减运算符]{.aqua}<ul><li><code>++</code>为自增运算符，其作用是使变量的值加1</li><li>–为自减运算符，其作用是使变量的值减1。</li><li>此两种运算符只能用于数值类型的变量，不能用于非数值类型变量、常量、表达式和函数调用。</li><li><code>++</code>可以置于变量之前，也可放在变量之后。<code>++i</code>指i自增1后再参与其它运算；<code>i++</code>则指i参与运算后其值再自增1。</li><li><code>--</code>同理。</li></ul></li><li>[位运算符]{.yellow}<ul><li>位运算符用来对++二进制位++{.wavy}进行操作，其操作数只能为++整型和字符型++{.dot}数据。位运算符中，除<code>~</code>以外，其余均为双目运算符。</li></ul><ol><li>按位与运算<code>&amp;</code>：双目运算符，参加运算的两个数以补码形式按二进制位进行“与”运算。<ul><li>运算规则：<code>0&amp;0=0</code>；<code>0&amp;1=0</code>；<code>1&amp;0=0</code>；<code>1&amp;1=1</code>；即两位同时为1结果才为1，否则为0。例如：<code>3&amp;5=1</code>，即<code>0000 0011 &amp; 0000 0101 = 0000 0001</code>。常用于保留或清零指定位。</li></ul></li><li>按位或运算<code>|</code>：双目运算符，参加运算的两个数以补码形式按二进制位进行“或”运算。&#96;<ul><li>运算规则：<code>0|0=0</code>；<code>0|1=1</code>；<code>1|0=1</code>；<code>1|1=1</code>；即两位只要有一个为1结果为1，否则为0。例如：<code>3|5=7</code>，即<code>0000 0011 | 0000 0101 = 0000 0111</code> 。常用于对某些指定位置1。</li></ul></li><li>按位异或运算<code>^</code>：双目运算符，两个数以补码形式按二进制位进行“异或”运算。<ul><li>运算规则：<code>0^0=0</code>；<code>0^1=1</code>；<code>1^0=1</code>；<code>1^1=0</code>；即两位相异结果为1，否则为0。例如：<code>3^5=6</code>，即<code>0000 0011 ^ 0000 0101 = 0000 0110</code>。常用于使特定位翻转（对应位与1异或）。</li></ul></li><li>按位取反运算<code>~</code>：单目运算符，用于对一个整数以补码形式按二进制位取反，<code>1变为0，0变为1</code>。例如<code>~9</code>的运算为：<code>~(0000 1001) = 1111 0110</code>。 </li><li>左移运算<code>&lt;&lt;</code>：双目运算符，其功能是将运算符<code>&lt;&lt;</code>左边的数按二进制位左移，参与运算的数以补码形式参加左移运算。<ul><li><code>m&lt;&lt;n</code>表示把m按二进制位补码形式左移n位。左移n位的时候，最左边的n位将被丢弃，同时在最右边补上n个0。如：<code>00001010&lt;&lt;2=00101000</code>，<code>10001010&lt;&lt;3=01010000</code>。</li></ul></li><li>右移运算<code>&gt;&gt;</code>：双目运算符，其功能是将运算符<code>&gt;&gt;</code>左边的数按二进制位右移，参与运算的数以补码形式参加右移运算。<br> <code>m&gt;&gt;n</code>表示把m按二进制位补码形式右移n位。右移n位的时候，最右边的n位将被丢弃。但右移时处理最左边位的情形要稍微复杂一点：++若m是一个正数或无符号数，则最左边的n位用0填补；若m是一个有符号负数，则最左边的n位补0还是补1取决于所用的计算机系统，补0的称为“逻辑右移”（不保留符号），补1的称为“算术右移”（保留符号）。++{.wavy}以算术右移为例：<code>00001010&gt;&gt;2=00000010</code>，<code>10001010&gt;&gt;3=11110001</code>。</li></ol></li><li>运算符的优先级</li></ul><table><thead><tr><th>运算符及含义</th><th>运算种类</th><th>结合方向</th></tr></thead><tbody><tr><td><code>.</code>（对象成员）<code>-&gt;</code>（指针） <code>[]</code>（数组下标）<code>()</code>（函数调用）</td><td></td><td>从左向右</td></tr><tr><td><code>++</code>（自增）<code> --</code>（自减） <code>(typecast)</code>（强制类型转换） <code>sizeof</code>（求类型长度）<code> ~</code>（按位取反） <code>!</code>（逻辑非） <code>+</code>（正号） <code>-</code>（负号） <code>*</code>（指针）  <code>&amp;</code>（取地址） <code>*</code>（取值运算符） <code>&amp;</code>（取地址运算符） new delete</td><td>单目运算</td><td>从右向左</td></tr><tr><td><code>*</code>（乘法） <code>/</code>（除法） <code>%</code>（取余）</td><td>双目运算</td><td>从左向右</td></tr><tr><td><code>+</code>（加法） <code>-</code>（减法）</td><td>双目运算</td><td>从左向右</td></tr><tr><td><code>&lt;&lt;</code>（左移）<code>&gt;&gt;</code>（右移）</td><td>双目运算</td><td>从左向右</td></tr><tr><td><code>&gt;</code>（大于）<code> &lt;</code>（小于）<code> &gt;=</code>（大于等于）<code> &lt;=</code>（小于等于）</td><td>双目运算</td><td>从左向右</td></tr><tr><td><code>==</code>（判断相等）<code> !=</code>（判断不等）</td><td>双目运算</td><td>从左向右</td></tr><tr><td><code>&amp;</code>（按位与）</td><td>双目运算</td><td>从左向右</td></tr><tr><td><code>^</code>（异或）</td><td>双目运算</td><td>从左向右</td></tr><tr><td>&#96;</td><td>&#96;（按位或）</td><td>双目运算</td></tr><tr><td><code>&amp;&amp;</code>（条件与）</td><td>双目运算</td><td>从左向右</td></tr><tr><td>&#96;</td><td></td><td>&#96;（条件或）</td></tr><tr><td><code>?:</code>（条件运算符）</td><td>三目运算</td><td>从右向左</td></tr><tr><td><code>=</code> <code> *=</code> <code>/=</code> <code>%=</code> <code>+=</code> <code>-=</code> <code>&amp;=</code> &#96;</td><td>&#x3D;<code> </code>^&#x3D;<code>  </code>&gt;&gt;&#x3D;<code> </code> &lt;&lt;&#x3D;&#96;</td><td>双目运算</td></tr><tr><td><code>,</code></td><td></td><td>从左向右</td></tr></tbody></table><h2 id="3-数据类型转换"><a href="#3-数据类型转换" class="headerlink" title="3. 数据类型转换"></a>3. 数据类型转换</h2><ul><li>&#x3D;&#x3D;数据类型转换&#x3D;&#x3D;就是++将数据(变量、表达式的值)从一种数据类型转换为另一种数据类型。++数据类型转换包含&#x3D;&#x3D;自动类型转换&#x3D;&#x3D;和&#x3D;&#x3D;强制类型转换&#x3D;&#x3D;两种情形。<ul><li>&#x3D;&#x3D;自动类型转换&#x3D;&#x3D;：在不同数据类型的混合运算中，编译器会隐式地进行数据类型转换，这种++隐式++{.dot}进行的类型转换称为自动类型转换。自动类型转换遵循以下原则： <ul><li>（1）如果参与运算的数据类型不同，那么先转换成同一类型再进行运算。</li><li>（2）转换朝着数据长度增加的方向进行，以保证精度不降低。</li><li>（3）在赋值运算中，赋值号两边的数据类型不相同时，将把右边表达式值的类型转换为左边变量的类型。若右边表达式的数据类型长度比左边长，则会丢失部分数据。</li><li>（4）在赋值语句中，赋值号两边数据类型一定是++相兼容++{.dot}的类型，否则编译时会报错。</li></ul></li><li>&#x3D;&#x3D;强制类型转换&#x3D;&#x3D;：自动类型转换不能实现目的时，可以利用强制类型转换将一个表达式转换成所需类型，这种显式进行的类型转换称为强制类型转换。一般形式为：<code>(类型名)(表达式)</code></li></ul></li></ul><h2 id="4-scanf-x2F-printf输入输出"><a href="#4-scanf-x2F-printf输入输出" class="headerlink" title="4. scanf&#x2F;printf输入输出"></a>4. scanf&#x2F;printf输入输出</h2><ul><li>C++语言兼容C语言的基本语法语句，C++程序同样可使用C中的<code>scanf/printf</code>语句完成数据的输入输出语句，其效率优于<code>cin/cout</code>方式的输入输出。对于不同数据类型变量和表达式的输入输出，<code>scanf/printf</code>语句有严格对应的配对格式控制，使用前需包含头文件<code>cstdio</code>。<ul><li>printf格式输出函数：用于向输出设备输出数据，printf函数调用的一般格式为：</li><li><code>printf(格式控制字符串, 输出列表)</code><ul><li>其中，格式控制字符串是双引号括起来的一个字符串，用于指定输出格式，由格式字符串和非格式字符串组成。非格式字符串是在输出时需要原样输出的字符串。格式字符串是以%开头的字符串，%后跟着各种格式字符以说明输出数据的类型、长度、小数位数等。</li></ul></li></ul></li></ul><table><thead><tr><th>格式符</th><th>说明</th></tr></thead><tbody><tr><td><code>%d（或%i）</code></td><td>输出带符号十进制整数（正数不输出符号）</td></tr><tr><td><code>%x（或% X）</code></td><td>输出无符号十六进制整数（不输出前缀0x）</td></tr><tr><td><code>%o </code></td><td>输出无符号八进整数（不输出前缀0）</td></tr><tr><td><code>%u</code></td><td>输出无符号十进制整数</td></tr><tr><td><code>%f</code></td><td>以十进制形式输出单、双精度实数（缺省保留6位小数）</td></tr><tr><td><code>%e（或%E）</code></td><td>以指数形式输出单、双精度实数（缺省保留6位小数）</td></tr><tr><td><code>%g（或%G）</code></td><td>自动选用%f或%e中较短的输出宽度输出单、双精度实数</td></tr><tr><td><code>%c </code></td><td>输出单个字符</td></tr><tr><td><code>%s</code></td><td>输出字符串</td></tr><tr><td><code>%% </code></td><td>输出%</td></tr></tbody></table><hr><table><thead><tr><th>格式修饰符</th><th>说明</th></tr></thead><tbody><tr><td>l</td><td>长整型整数，可加在格式字符d、o、x、u之前</td></tr><tr><td>m</td><td>一个正整数，代表数据宽度(如“printf(“%8.2lf”,a)”中的m就是8) n 对实数表示输出的精度，对字符串表示截取的字符个数(上例中n是2)</td></tr><tr><td>-</td><td>向左对齐</td></tr></tbody></table><ul><li>scanf格式输入函数：用于从输入设备输入数据，scanf函数调用的一般格式为：<ul><li><code>scanf (格式控制字符串, 地址列表)</code></li><li>其中，格式控制字符串的作用与printf函数相同；地址列表中给出各变量的地址，地址是<br>  由取地址符<code>&amp;</code>后跟变量名组成。</li></ul></li></ul><table><thead><tr><th>格式符</th><th>说明</th></tr></thead><tbody><tr><td><code>%d（或%i）</code></td><td>输入有符号十进制整数</td></tr><tr><td><code>%u</code></td><td>输入无符号十进制整数</td></tr><tr><td><code>%o</code></td><td>输入无符号八进制整数</td></tr><tr><td><code>%x（或% X）</code></td><td>输入无符号十六进制整数</td></tr><tr><td><code>%c</code></td><td>输入单个字符</td></tr><tr><td><code>%s</code></td><td>输入字符串到字符数组（非空格开始，第一个空格结束，附‘\0’为最后一个字符）</td></tr><tr><td><code>%f</code></td><td>输入实数，可以用小数形式或指数形式输入</td></tr><tr><td><code>%e, %E, %g, %G</code></td><td>与上同，此处e、g作用与f相同，且e、g不区分大小写</td></tr></tbody></table><hr><table><thead><tr><th>格式修饰符</th><th>说明</th></tr></thead><tbody><tr><td>h</td><td>输入短整型数（可用%hd, %ho, %hx）</td></tr><tr><td>l</td><td>输入长整型数（可用%ld, %lo, %lx, %lu），以及double型数（%lf, %le）</td></tr><tr><td>m</td><td>一个正整数，指定输入数据所占宽度</td></tr><tr><td><code>*</code></td><td>表示本输入项不赋给相应的变量</td></tr></tbody></table><ul><li><code>putchar</code>函数：从计算机向显示器输出一个字符。</li><li><code>getchar</code>函数：向计算机输入一个字符。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
            <tag> 数据类型 </tag>
            
            <tag> 运算符 </tag>
            
            <tag> 表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言编程题01</title>
      <link href="/2021/09/12/study/c/practice01/"/>
      <url>/2021/09/12/study/c/practice01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="运算符相关"><a href="#运算符相关" class="headerlink" title="运算符相关"></a>运算符相关</h2><ul><li>输入一个字符，将其对应的ASCLL码乘以2再输出<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;c);</span><br><span class="line">    <span class="type">int</span> a = c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>小明买了一箱苹果共有n个，很不幸的是箱子里混进了一条虫子。虫子每x小时能吃掉一个苹果，假设虫子在吃完一个苹果之前不会吃另一个，那么经过y小时后这箱苹果中还有多少个苹果没有被虫子吃过？<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,x,eat_int,rest;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;x,&amp;y);</span><br><span class="line">    <span class="type">double</span> eat_double = <span class="number">1.0</span>*y/x;</span><br><span class="line">    eat_int = <span class="built_in">ceil</span>(eat_double);<span class="comment">//向上取整；</span></span><br><span class="line">    <span class="keyword">if</span>(eat_int&lt;n)</span><br><span class="line">    rest = n - eat_int;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    rest = <span class="number">0</span>;</span><br><span class="line">    peintf(<span class="string">&quot;%d&quot;</span>,rest);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>输入两个浮点数a,b，输出其相加、相减、相乘的结果。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,a+b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,a*b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,a-b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>输入一个公民身份证号，输出该公民的出生日期。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> year,month,day;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%*6d%4d%2d%2d%*d&quot;</span>,&amp;year,&amp;month,&amp;day);<span class="comment">//前六位不要，后边不要</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%04d-%02d-%02d&quot;</span>,year,month,day);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>鸡兔同笼<figure class="highlight c"><figcaption><span>鸡兔同笼</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b,x,y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    y = (b<span class="number">-2</span>*a)/<span class="number">2</span>;<span class="comment">//兔子数</span></span><br><span class="line">    x = a-y;<span class="comment">//鸡子数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d%d&quot;</span>,x,y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>有4个圆塔，圆心分别为(2, 2)、(-2, 2)、(-2, -2)、(2, -2)，圆半径为1，如下图所示。这4个塔的高度为10米（m），塔以外无建筑物。</li><li>输入以圆括号括起来的两个数字，两个数字之间以逗号(,)分隔，格式如：(x,y)<br><img src="https://z3.ax1x.com/2021/09/12/4p7oPx.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span> </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">float</span> x,y,m,n,l;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*c%f%*c%f%*c&quot;</span>,&amp;x,&amp;y);<span class="comment">//输入取舍</span></span><br><span class="line">m = <span class="built_in">fabs</span>(x)<span class="number">-2</span>;    <span class="comment">//点距圆心的横向距离</span></span><br><span class="line">n = <span class="built_in">fabs</span>(y)<span class="number">-2</span>;   <span class="comment">//点距圆心的纵向距离</span></span><br><span class="line">l = m*m+n*n;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&gt;<span class="number">3</span>||<span class="built_in">fabs</span>(y)&gt;<span class="number">3</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(l&lt;<span class="number">1</span>)&#123;  <span class="comment">//点到圆心的距离，小于1则为建筑内</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure></li></ul><h2 id="循环相关"><a href="#循环相关" class="headerlink" title="循环相关"></a>循环相关</h2><ul><li><p>给定一个整数，请将该数各个数位上的数字反转得到一个新数。新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m,n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">    <span class="keyword">while</span>(m!=<span class="number">0</span>)&#123;</span><br><span class="line">        n = n*<span class="number">10</span>+m%<span class="number">10</span>; <span class="comment">//上次求出的最后一位向左移一位，加上这次得到的最后一位</span></span><br><span class="line">        m = m/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小明买了许多圣诞礼物准备用于班级活动，回家后感觉太累了，便让机器人小灵帮忙数一下礼物一共有多少份。但是小灵不喜欢数字4，因此每次数到4时便跨过该数。例，若小灵数到339时，下一份礼物小灵就会数350。</p><ul><li>分析：本题相当于每十位就少一位包含4的数，因此此题可以化作：输入一个九进制数（机器人数的礼物数），将此九进制数转换为十进制数（实际的礼物数）输出。  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num,fact=<span class="number">0</span>,w=<span class="number">1</span>,d;<span class="comment">//num代表输入的数，fact为实际的礼物数，w控制权重</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">    <span class="keyword">while</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        d = num%<span class="number">10</span>;  <span class="comment">//取出最后一位</span></span><br><span class="line">        <span class="keyword">if</span>(d&gt;<span class="number">4</span>) d--;  <span class="comment">//实际的九进制为0~8，本题少了一个4，因此本题中的九进制为0~9，不包括4，因此大于4的要减1；</span></span><br><span class="line">        fact = fact + d*w; <span class="comment">//转换为10进制</span></span><br><span class="line">        w = w*<span class="number">9</span>;  <span class="comment">//向左移一位</span></span><br><span class="line">        num = num/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,fact);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>分解质因数。   </p><blockquote><p>输入<br>一个正整数n。<br>  输出<br>n的质因数的乘积形式。<br>  样例输入<br>36<br>  样例输出<br>2<em>2</em>3*3</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num,i=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(num!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(num%i == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">            num = num/i;</span><br><span class="line">            <span class="keyword">if</span>(num!=<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输入n和a，求a+aa+aaa+…aa…a(n个a)，如当n&#x3D;3，a&#x3D;2时，2+22+222&#x3D;246。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,a,m=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        m = m*<span class="number">10</span>+a;</span><br><span class="line">        sum = sum+m;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>妈妈给了小明m元零花钱，为了鼓励小明节约，说如果小明每天只消费1元，每花k元就可以得到1元额外奖励，如果听妈妈的话小明最多可以花多少天？ </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m,k,sum=<span class="number">0</span>;  </span><br><span class="line">    cin&gt;&gt;m,k;</span><br><span class="line">    <span class="keyword">while</span>(m&gt;=k)&#123;</span><br><span class="line">        sum = sum + (m-m%k);  <span class="comment">//m%k代表剩的钱；m-m%k代表m元钱花够最多个整k天的天数</span></span><br><span class="line">        m = m/k+m%k;  <span class="comment">//新的钱数m = 奖励的钱数m/k + 最后不足k天的钱数m%k</span></span><br><span class="line">    &#125;</span><br><span class="line">    sum = sum + m;  <span class="comment">// 最后不够k天的钱数不要忘了</span></span><br><span class="line">    cout&lt;&lt;sum; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>输入一个正整数n。输出n!的最高位上的数字。<br>  输入：输入一个正整数n(n&lt;&#x3D;1000)。<br>  输出：输出n!的最高位上的数字。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,i;</span><br><span class="line"><span class="type">double</span> s=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">s=s+<span class="built_in">log10</span>(i);</span><br><span class="line"> &#125;</span><br><span class="line"> s=s-<span class="built_in">int</span>(s);</span><br><span class="line"> s=<span class="built_in">pow</span>(<span class="number">10</span>,s);</span><br><span class="line"> cout&lt;&lt;<span class="built_in">int</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>有一辆智能小车，最初(时间为0)的位置为(0,0)，我们想知道它最后的位置。小车以每小时10公里的速度向北移动(北为y轴正向，东为x轴正向)。小车会收到一系列依照时间戳记排序的命令，1表示“向左转”，2表示“向右转”，3表示“停止”。每个命令的前面有一个时间戳记，所以知道该命令是何时发出的。最后一个命令一定是“停止”。另外假设，这辆小车非常灵活，它可以在瞬间转弯。<br>  例，小车在时间为5时收到一个“向左转”的命令1，在时间10收到一个“向右转”的命令2，在时间15收到一个“停止”的命令3。那么在最后时间15时，小车的位置将在（-50,100）。程序只要求输出小车最后的位置，第一个整数是x坐标，第二个整数是y坐标。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> command;<span class="comment">//储存命令号</span></span><br><span class="line"><span class="type">int</span> preTime = <span class="number">0</span>,curTime; <span class="comment">//preTime和curTime存储上次发命令时间和本次发命令时间</span></span><br><span class="line"><span class="type">int</span> direction=<span class="number">0</span>;<span class="comment">//存储当前方向</span></span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;curTime&gt;&gt;command)&#123;</span><br><span class="line"><span class="keyword">switch</span>(direction)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:y=y+(curTime-preTime)*<span class="number">10</span>;<span class="keyword">break</span>;<span class="comment">//0表示y轴正向 </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:x=x-(curTime-preTime)*<span class="number">10</span>;<span class="keyword">break</span>;<span class="comment">//1表示x轴负向</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:y=y-(curTime-preTime)*<span class="number">10</span>;<span class="keyword">break</span>;<span class="comment">//2表示y轴负向</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:x=x+(curTime-preTime)*<span class="number">10</span>;<span class="keyword">break</span>;<span class="comment">//3表示x轴正向 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(command)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:direction++;<span class="keyword">break</span>;<span class="comment">//向左转，方向增1 </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:direction--;<span class="keyword">break</span>;<span class="comment">// 向右转，方向减1 </span></span><br><span class="line">&#125; </span><br><span class="line">direction = (direction+<span class="number">4</span>)%<span class="number">4</span>;<span class="comment">//方向号对4取模，保存在0~3范围内</span></span><br><span class="line">preTime = curTime; </span><br><span class="line">&#125; </span><br><span class="line">cout&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;y;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure></li><li><p>做作业的时候，邻座的小朋友问你：“五乘以七等于多少？”你应该不失礼貌地微笑着告诉他：“五十三”。本题就要求你，对任何一对给定的正整数，倒着输出它们的乘积。 做作业的时候，邻座的小朋友问你：“五乘以七等于多少？”你应该不失礼貌地微笑着告诉他：“五十三”。本题就要求你，对任何一对给定的正整数，倒着输出它们的乘积。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> m,n,p,flag=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> t=m*n;</span><br><span class="line"><span class="keyword">while</span>(t&gt;<span class="number">0</span>)&#123;</span><br><span class="line">p=t%<span class="number">10</span>; <span class="comment">//求出t的末位数</span></span><br><span class="line">t/=<span class="number">10</span>;  <span class="comment">//t重新赋值</span></span><br><span class="line"><span class="keyword">if</span>(p==<span class="number">0</span>&amp;&amp;flag==<span class="number">0</span>)<span class="keyword">continue</span>; <span class="comment">//如果最后一位为0，重新执行循环</span></span><br><span class="line">cout&lt;&lt;p;    <span class="comment">//如果最后一位不为0，输出作为第一位</span></span><br><span class="line">flag==<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure></li><li><p>求最大公约数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a,b,min,i;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">if</span>(a&lt;b)min=a;</span><br><span class="line"><span class="keyword">else</span> min=b;</span><br><span class="line"><span class="keyword">for</span>(i=min;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(a%i==<span class="number">0</span>&amp;&amp;b%i==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;i;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>求最小公倍数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a,b,max,k;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b)max=a;</span><br><span class="line"><span class="keyword">else</span> max=b;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;;i++)&#123;</span><br><span class="line">k=max*i;</span><br><span class="line"><span class="keyword">if</span>(k%a==<span class="number">0</span>&amp;&amp;k%b==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>九九乘法表1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">cout&lt;&lt;i&lt;&lt;<span class="string">&quot;*&quot;</span>&lt;&lt;j&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;i*j&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure></li><li><p>九九乘法表2</p><blockquote><p>请按要求输出九九乘法表。要求所输出它的格式与平常的不同，是那种反过来的三角形，可不要看错了！<br>  输入<br>  第一行有一个整数，表示有n组数据。（n&lt;10)<br>  接下来有n行，每行只有一个整数m（1&lt;&#x3D;m&lt;&#x3D; 9）。<br>  输出<br>  对应每个整数m，根据要求输出乘法表的前m行，具体格式参见输入样例.<br>  每两组测试数据结果之间有一个空行隔开，具体如输出样例。<br>样例输入 Copy<br>  3<br>  2<br>  1<br>  5<br>  样例输出 Copy<br>  1<em>1&#x3D;1 1</em>2&#x3D;2 1<em>3&#x3D;3 1</em>4&#x3D;4 1<em>5&#x3D;5 1</em>6&#x3D;6 1<em>7&#x3D;7 1</em>8&#x3D;8 1<em>9&#x3D;9<br>  2</em>2&#x3D;4 2<em>3&#x3D;6 2</em>4&#x3D;8 2<em>5&#x3D;10 2</em>6&#x3D;12 2<em>7&#x3D;14 2</em>8&#x3D;16 2*9&#x3D;18   </p></blockquote><pre><code>  1*1=1 1*2=2 1*3=3 1*4=4 1*5=5 1*6=6 1*7=7 1*8=8 1*9=9            1*1=1 1*2=2 1*3=3 1*4=4 1*5=5 1*6=6 1*7=7 1*8=8 1*9=9      2*2=4 2*3=6 2*4=8 2*5=10 2*6=12 2*7=14 2*8=16 2*9=18     3*3=9 3*4=12 3*5=15 3*6=18 3*7=21 3*8=24 3*9=27     4*4=16 4*5=20 4*6=24 4*7=28 4*8=32 4*9=36     5*5=25 5*6=30 5*7=35 5*8=40 5*9=45</code></pre></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//九九乘法表2</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,m,n,k,d;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> a[n];</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line">a[k]=m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[k];i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i;j&lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line">cout&lt;&lt;i&lt;&lt;<span class="string">&quot;*&quot;</span>&lt;&lt;j&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;i*j&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>输入一行字符，分别统计其中英文字母、空格、数字和其他字符的个数，分行输出该结果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;cstdio&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> characters=<span class="number">0</span>,spaces=<span class="number">0</span>,numbers=<span class="number">0</span>,others=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//gets(a);</span></span><br><span class="line">    cin.<span class="built_in">getline</span>(a,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">sizeof</span>(a);i++)&#123;</span><br><span class="line"><span class="keyword">if</span>((a[i]&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;a[i]&lt;=<span class="string">&#x27;z&#x27;</span>)||(a[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;a[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))&#123;</span><br><span class="line">characters++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;a[i]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">numbers++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">spaces++;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">&#x27;\0&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> others++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;characters=&quot;</span>&lt;&lt;characters&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;spaces=&quot;</span>&lt;&lt;spaces&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;numbers=&quot;</span>&lt;&lt;numbers&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;others=&quot;</span>&lt;&lt;others&lt;&lt;endl;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>缘由是：编程PAT中已经不支持 <code>gets()</code> 函数的用法。数组</p></li><li><p>解决方式：函数</p></li><li><p>使用 iostream 库中的<code>cin.getline</code>函数代替<code>gets()</code></p></li><li><p>读入一行（可含空格），直到换行符结束</p></li><li><p>将其前num-1个字符存入数组a中并以字符c结尾 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cin.<span class="built_in">getline</span>(a, num, c);</span><br></pre></td></tr></table></figure></li></ul><ol><li>也能够不传入第三个参数c，则默认 ‘\0’ 结尾ip</li><li>若num大于所读入的字符数，则直接存入整行字符串，再在末尾加入字符c结尾</li></ol><ul><li>输入一个正整数N，求1!+2!+3!+…+N!<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">cin&gt;&gt;a;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum=<span class="number">0</span>,temp=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=a;i++)&#123;</span><br><span class="line">temp=temp*i;</span><br><span class="line">sum=sum+temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>求如下式子的和<br> <img src="https://z3.ax1x.com/2021/10/18/5a9PQP.png"><br> 请将结果定义为double类型。<br> 注意求平方，不要用C数学库中提供的函数pow。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> sum=<span class="number">0</span>,sum1=<span class="number">0</span>,sum2=<span class="number">0</span>,sum3=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">100</span>;k++)&#123;</span><br><span class="line">sum1=sum1+k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">50</span>;k++)&#123;</span><br><span class="line">sum2=sum2+k*k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">10</span>;k++)&#123;</span><br><span class="line">sum3=sum3+<span class="number">1.0</span>/k; </span><br><span class="line">&#125;</span><br><span class="line">sum=sum1+sum2+sum3;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.6f&quot;</span>,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>水仙花数<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> num,a,b,c;</span><br><span class="line"><span class="keyword">for</span>(num=<span class="number">100</span>;num&lt;=<span class="number">999</span>;num++)&#123;</span><br><span class="line">a=num%<span class="number">10</span>;</span><br><span class="line">b=(num/<span class="number">10</span>)%<span class="number">10</span>;</span><br><span class="line">c=num/<span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span>(num==<span class="built_in">pow</span>(a,<span class="number">3</span>)+<span class="built_in">pow</span>(b,<span class="number">3</span>)+<span class="built_in">pow</span>(c,<span class="number">3</span>))</span><br><span class="line">cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>韩信点兵<blockquote><p>淮安民间传说着一则故事——“韩信点兵”，相关成语“韩信点兵，多多益善”。韩信从不直接清点自己军队的人数，只要让士兵先后以三人一排、五人一排、七人一排地变换队形，而他每次只掠一眼队伍的排尾就知道总人数了。<br>  输入3个非负整数a，b，c ，表示每种队形排尾的人数（a&lt;3,b&lt;5,c&lt;7），<br>  输出总人数的最小值（或报告无解）。已知总人数不小于10，不超过100 。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a,b,c,num;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">10</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">3</span>==a&amp;&amp;i%<span class="number">5</span>==b&amp;&amp;i%<span class="number">7</span>==c)&#123;</span><br><span class="line">cout&lt;&lt;i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">100</span>)cout&lt;&lt;<span class="string">&quot;No answer&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li>调皮的小明将皮球从100m的高度自由落下，每次落地后反弹回原高度的一半，再落下，再反弹。求它在第N次落地时，共经过了多少米，第N次反弹多高。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="type">double</span> length=<span class="number">0</span>,high=<span class="number">0</span>,fhigh=<span class="number">100</span>;</span><br><span class="line">cin&gt;&gt;N;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">length=length+fhigh+high;</span><br><span class="line">fhigh=fhigh/<span class="number">2</span>;</span><br><span class="line">high = fhigh;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;length=%.4f\n&quot;</span>,length);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;high=%.4f&quot;</span>,high);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter01-初识C++</title>
      <link href="/2021/09/07/study/c/chapter01/"/>
      <url>/2021/09/07/study/c/chapter01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-程序设计语言"><a href="#1-程序设计语言" class="headerlink" title="1. 程序设计语言"></a>1. 程序设计语言</h2><ul><li>机器语言：计算机能直接识别和接受的二进制代码称为<strong>机器指令</strong>。机器指令的集合就是该计算机的<strong>机器语言</strong>。<ul><li>特点：难学，难记，难检查，难修改，难以推广使用。依赖具体机器难以移植。</li></ul></li><li>汇编语言：机器语言的符号化。用英文字母和数字表示指令的<strong>符号语言</strong>。<ul><li>特点：相比机器语言简单好记，但仍然难以普及。汇编指令需通过汇编程序转换为机器指令才能被计算机执行。依赖具体机器难以移植。</li></ul></li><li>高级语言：高级语言更接近于人们习惯使用的自然语言和数学语言。<ul><li>特点：功能强大，不依赖于具体机器。用高级语言编写的<strong>源程序</strong>需要通过<strong>编译程序</strong>转换为机器指令的<strong>目标程序</strong>。</li></ul></li></ul><h2 id="2-C与C-语言"><a href="#2-C与C-语言" class="headerlink" title="2. C与C++语言"></a>2. C与C++语言</h2><ul><li>1972年，Bell实验室的Dennis Ritchie和Ken Thompson共同发明了C语言。C语言充分结合了汇编语言和高级语言的优点，高效灵活，且易于移植，很快得到广泛使用。 </li><li>1979年，Bjarne Stroustrup加入Bell实验室，开始致力于将C改良为带类的C（C with classes）。1983年该语言被正式命名为C++。ANSI和ISO的联合标准化委员会在1994年1 月25曰提出了第一个C++标准化草案，该草案保持了Stroustrup最初定义的所有特征。 </li><li>在完成C++标准化的第一个草案后不久，Alexander stepanov创建了标准模板库（STL）。在通过了第一个草案之后，委员会投票并通过了将STL包含到C++标准中的提议。</li><li>委员会于1997年11月14日通过了该标准的最终草案，1998年C++的ANSI&#x2F;ISO标准被投入使用。通常此版本的C++被认为是标准C++，所有的主流C++编译器都支持该版本的C++，包括微软的Visual C++和Borland公司的C++Builder。</li></ul><h2 id="3-第一个C-程序"><a href="#3-第一个C-程序" class="headerlink" title="3. 第一个C++程序"></a>3. 第一个C++程序</h2><ul><li>在屏幕上输出“I love c++ programming!”。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> cout&lt;&lt;<span class="string">&quot;I love c++ programming!&quot;</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-内存和变量"><a href="#4-内存和变量" class="headerlink" title="4. 内存和变量"></a>4. 内存和变量</h2><p><strong>存储器是计算机系统的重要组成部分，是用来存储程序和数据的部件</strong></p><ul><li><ol><li>存储器按其用途可分为<strong>主存储器（内存）</strong>和<strong>辅助存储器（外存）</strong>。</li></ol></li><li>内存存取速度快，是CPU能够直接寻址的存储空间。<ul><li>存储器中每一个字节均对应唯一的编码地址，通常以<code>8 bit</code>位组成一个字节(byte)为基本单位，每2^10^(1024) byte为1KB，2^10^KB为1MB，2^10^MB为1GB，2^10^GB为1TB。</li></ul></li><li><ol start="2"><li>变量：具有特定属性的内存单元，可通过变量名直接引用该存储单元。</li></ol><ul><li>在C++中，变量必须遵循<code>&quot;先定义后使用&quot;</code>的原则。变量命名遵循以下规则<ol><li>变量名只能由字母、数字和下划线组成。</li><li>变量名不能以数字开头。</li><li>变量名不能使用系统保留的关键字。<br><img src="https://z3.ax1x.com/2021/09/07/hIjuf1.png" alt="关键字"></li><li>变量名严格区分大小写。</li><li>变量名尽可能做到<strong>见名知义</strong>。</li></ol></li><li>定义变量的一般格式 ：<strong>数据类型 变量1,变量2,……,变量n;</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a,b,c;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="5-cin-x2F-cout输入输出"><a href="#5-cin-x2F-cout输入输出" class="headerlink" title="5. cin&#x2F;cout输入输出"></a>5. cin&#x2F;cout输入输出</h2><p>C++的输入和输出均是采用“流”(stream)方式实现，有关流对象<em>cin、cout</em>和流运算符的信息均存放于C++的输入输出流库中。<br>因此，若要在程序中使用cin、cout和流运算符，则必须用预处理命令++ “#include <iostream>” ++{.primary}将头文<code>iostream</code>包含到本文件中。</p><ul><li>使用<code>cin</code>可输入多个变量的值，其一般格式：<br> <strong>cin &gt;&gt; 变量1 &gt;&gt; 变量2 …… &gt;&gt; 变量n;</strong>  </li><li>使用<code>cout</code>可输出多个表达式的值，其一般格式：<br> <strong>cout &lt;&lt; 表达式1 &lt;&lt; 表达式2 …… &lt;&lt; 表达式n;</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">cout &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-整数类型"><a href="#6-整数类型" class="headerlink" title="6. 整数类型"></a>6. 整数类型</h2><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><p><strong>进制</strong>由符号集和两个基本因数“基数”与“位权”构成，<strong>基数</strong>指不同符号的个数，<strong>位权</strong>指进制每一固定位对应的权值。十进制是10个符号的排列组合，二进制是2个符号的排列组合。</p><ul><li><ol><li>十进制转二进制</li></ol><ul><li>对于整数部分，用被除数反复除以2（第一次取该整数为被除数，以后每次均取前一次商<br> 的整数部分作被除数），依次记下每次的余数并将余数倒序排列，便是转换后的二进制数。</li><li>对于小数部分，采用连续乘以基数2并依次取出整数部分，直至其小数部分为0结束。<br> [以十进制数53转换为二进制数为例，53连续六次除以2后，得到的余数依次是：1、0、1、 0、1、1。将所有余数倒序排列为110101。因此十进制数53转换成二进制数为110101。]{.blue}</li><li>十进制转八进制、十六进制同理</li></ul></li><li><ol start="2"><li>[二进制转十进制]{.green}</li></ol><ul><li>二进制数第0位的权值是2的0次方，第1位的权值是2的1次方，……。<br> 如二进制数0110 0100转换成十进制数为100。</li></ul></li><li><ol start="3"><li>[二进制转八进制、十六进制]{.red}</li></ol><ul><li>二进制转八进制，从右往左将二进制数每三位分为一组，剩余不足三位的前面用0补齐，每组按权值求和即可。<br> 如<code>1001100101001110</code>,从右往左分组为<code>001``001``100``101``001``110</code>，按权值求和为<code>1``1``4``5``1``6</code>;所以转为八进制为<code>114516</code>。</li><li>二进制转十六进制，从右往左将二进制数每四位分为一组，剩余不足四位的前面用0补齐，每组按权值求和即可。<br> 如<code>11111110110110101</code>,从右往左分组为，<br> <code>0001``1111``1101``1011``0101</code>按权值求和为<code>1``F``D``B``5</code>;所以转为十六进制为<code>1FDB5</code>,可加前缀<code>0x</code>。也可以参考对照表。<br> <img src="https://z3.ax1x.com/2021/09/07/hoiNtO.png" alt="二进制转十六进制对照表"><br><strong>原码、反码、补码</strong><br>[计算机中的有符号数存在<strong>原码、反码和补码</strong>三种表示方法]{.aqua}</li></ul></li><li>原码表示法的最高位为符号位，正数该位为0，负数该位为1；其余位为数值位，表示数值的大小，为该数绝对值的二进制形式。</li><li>正数的反码与原码相同，负数的反码为该数原码的符号位不变数值位取反(0变为1，1变为0)。反码通常用作原码和补码之间的过渡码。</li><li>正数的补码与原码相同，负数的补码为该数反码加1。</li><li>在计算机系统中，数值一律采用补码来表示和存储，其原因在于：<br>（1）补码也可将加减运算进行统一处理；<br>（2）补码可将符号位和数值位统一处理。<br>[举个栗子]{.label}，以短整型数据分配2个字节存储空间为例。</li></ul><table><thead><tr><th>位序</th><th>15</th><th>14</th><th>13</th><th>12</th><th>11</th><th>10</th><th>9</th><th>8</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>13的原码</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td></tr><tr><td>-13的原码</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td></tr><tr><td>-13的反码</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>-13的补码</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td></tr><tr><td><strong>Dev-C++环境中各种类型整数所占用存储单元长度及取值范围</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>整数类型</th><th>字节数</th><th>取值范围</th></tr></thead><tbody><tr><td>[signed] int</td><td>4</td><td>-2^31^~2^31^-1</td></tr><tr><td>unsigned [int]</td><td>4</td><td>0~2^32^-1</td></tr><tr><td>[signed] short [int]</td><td>2</td><td>-2^15^~2^15^-1</td></tr><tr><td>unsigned short [int]</td><td>2</td><td>0~2^16^-1</td></tr><tr><td>[signed] long [int]</td><td>4</td><td>-2^31^~2^31^-1</td></tr><tr><td>unsigned long [int]</td><td>4</td><td>0~2^32^-1</td></tr><tr><td>[signed] long long [int]</td><td>8</td><td>-2^63^~2^63^-1</td></tr><tr><td>unsigned long long [int]</td><td>8</td><td>0~2^64^-1</td></tr></tbody></table><h2 id="7-浮点类型"><a href="#7-浮点类型" class="headerlink" title="7. 浮点类型"></a>7. 浮点类型</h2><table><thead><tr><th>浮点类型</th><th>字节数</th><th>有效数字</th><th>绝对值取值范围</th></tr></thead><tbody><tr><td>float</td><td>4</td><td>6</td><td>0以及1.2 * 10^-38^~3.4 * 10^38^</td></tr><tr><td>double</td><td>8</td><td>15</td><td>0以及2.3 * 10^-308^~1.7*10^308^</td></tr><tr><td>long double</td><td>16</td><td>19</td><td>0以及3.4 * 10^-4932^~1.1*10^4932^</td></tr></tbody></table><p><strong>常用函数：绝对值与取整函数；指数、对数、开方函数</strong></p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>int abs(int i)</td><td>返回整数的绝对值</td></tr><tr><td>double fabs(double d)</td><td>返回双精度数的绝对值</td></tr><tr><td>double labs(long n)</td><td>返回长整型数的绝对值</td></tr><tr><td>double ceil(double d)</td><td>向上取整</td></tr><tr><td>double floor(double d)</td><td>向下取整</td></tr><tr><td>double round(double d)</td><td>四舍五入</td></tr><tr><td>double log(double x)</td><td>返回自然对数ln(x)的值</td></tr><tr><td>double log10(double x)</td><td>返回常用对数lg(x)的值</td></tr><tr><td>double pow(double x, double y)</td><td>返回x的y次幂</td></tr><tr><td>double pow10(int p)</td><td>返回10的p次幂</td></tr><tr><td>double sqrt(double x)</td><td>返回x的平方根</td></tr></tbody></table><h2 id="8-字符类型"><a href="#8-字符类型" class="headerlink" title="8. 字符类型"></a>8. 字符类型</h2><table><thead><tr><th>位序</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>字符’A’</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td></tr><tr><td>字符’a’</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td></tr><tr><td>字符’0’</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>字符’1’</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td></tr></tbody></table><p>占用存储空间和取值范围</p><table><thead><tr><th>字符类型</th><th>字节数</th><th>取值范围</th></tr></thead><tbody><tr><td>signed char</td><td>1</td><td>-2^7^~2^7^-1</td></tr><tr><td>unsigned char</td><td>1</td><td>0~2^8^-1</td></tr></tbody></table><h2 id="9．程序设计的步骤与程序流程图表示"><a href="#9．程序设计的步骤与程序流程图表示" class="headerlink" title="9．程序设计的步骤与程序流程图表示"></a>9．程序设计的步骤与程序流程图表示</h2><p>程序设计的步骤</p><ol><li>分析问题</li><li>设计算法</li><li>编写程序</li><li>调试程序</li><li>撰写文档<br>  <img src="https://z3.ax1x.com/2021/09/07/hoGqIS.png" alt="程序流程图基本元素"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter01-数据库系统概述</title>
      <link href="/2021/08/30/study/database/chapter01/"/>
      <url>/2021/08/30/study/database/chapter01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h1><h2 id="1-1-数据库系统概述"><a href="#1-1-数据库系统概述" class="headerlink" title="1.1 数据库系统概述"></a>1.1 数据库系统概述</h2><h3 id="1-1-1-数据库的4个基本概念"><a href="#1-1-1-数据库的4个基本概念" class="headerlink" title="1.1.1 数据库的4个基本概念"></a>1.1.1 数据库的4个基本概念</h3><ul><li>[数据（data）]{.aqua}<ul><li>数据是数据库中存储的基本对象。</li><li>定义：描述数位的符号记录称为数据。</li><li>数据的种类<ul><li><code>文本(text)</code></li><li><code>图形(graph)</code></li><li><code>图像(image)</code></li><li><code>音频(audio)</code></li><li><code>视频(video)</code></li></ul></li><li>数据的含义称为数据的语义，数据与其语义是不可分的。</li></ul></li><li>[数据库(DataBase,DB)]{.blue}<ul><li>数据库是长期储存在计算机内、有组织的、可共享的大量数据的集合。数据库中的数据按照一定的数据模型组织、描述和储存，具有较小的<code>冗余度(redundancy)</code>、<code>较高的数据独立性(data independency)</code>和<code>易扩展性(scalability)</code>,并可为各种用户共享。</li><li>概况地讲，数据库具有++永久存储、有组织和可共享++{.dot}三个基本特点。</li></ul></li><li>[数据库管理系统(DataBase Management  System,DBMS)]{.yellow}<ul><li>数据库系统和操作系统语言是计算机的基础软件。</li><li>主要功能<ol><li>数据定义功能：数据库管理系统提供<code>数据定义语言(Data Definition Language,DDL)</code>,方便对数据库中的数据对象的组成与结构进行定义。</li><li>数据组织、存储和管理<ul><li>分类组织、存储和管理各种数据。</li><li>如何实现数据之间的联系。</li><li>确定组织数据的文件结构和存取方式</li><li>提供多种存取方法提高存取效率</li></ul></li><li>数据操纵功能：数据库管理系统提供<code>数据操纵语言(Data Manipulation Language,DML)</code>,实现对数据库的基本操作，如查询、插入、删除和修改等。</li><li>数据库事务管理和运行管理。<ul><li>数据库在建立、运行和维护时由数据库管理系统统一管理和控制</li><li>保证数据的安全性、完整性、多用户对数据的并发使用</li><li>发生故障后的系统恢复</li></ul></li><li>数据库的建立和维护功能。<ul><li>数据库初始数据的装载和转换</li><li>数据库转储、恢复功能</li><li>数据库的重组织</li><li>性能监视、分析等</li></ul></li><li>其他功能<ul><li>数据库管理系统与网络中其它软件系统的通信</li><li>数据库管理系统系统之间的数据转换</li><li>异构数据库之间的互访和互操作</li></ul></li></ol></li></ul></li><li>[数据库系统(Database System,DBS)]{.purple}<ul><li><code>数据库系统</code>的构成:数据库、数据库管理系统（及其应用开发工具）、应用程序、数据库管理员。<br>  <img src="https://z3.ax1x.com/2021/09/11/hx81yV.png" alt="数据库系统"></li></ul></li></ul><h3 id="1-1-2-数据库管理技术的产生和发展"><a href="#1-1-2-数据库管理技术的产生和发展" class="headerlink" title="1.1.2 数据库管理技术的产生和发展"></a>1.1.2 数据库管理技术的产生和发展</h3><ul><li>什么是数据管理<ul><li>对数据进行分类、组织、编码、存储、检索和维护</li><li>数据处理的中心问题</li></ul></li><li>数据管理技术的发展过程<ul><li>人工管理阶段（20世纪50年代中之前）<br>  <img src="https://z3.ax1x.com/2021/09/11/hxJm2n.png" alt="人工管理阶段 应用程序与数据之间的对应关系"></li><li>文件系统阶段（20世纪50年代末–60年代中）<br> <img src="https://z3.ax1x.com/2021/09/11/hxYpi4.png" alt="文件系统阶段 应用程序与数据之间的对应关系"></li><li>数据库系统阶段（20世纪60年代末–现在）<br>  <img src="https://z3.ax1x.com/2021/09/11/hxtogs.png" alt="数据库系统阶段 应用程序与数据之间的对应关系"><br>  <img src="https://z3.ax1x.com/2021/09/11/hxYGef.png" alt="三个阶段比较"></li></ul></li><li>数据管理技术的发展动力<ul><li>应用需求的推动</li><li>计算机硬件的发展</li><li>计算机软件的发展</li></ul></li></ul><h3 id="1-1-3数据库系统的特点"><a href="#1-1-3数据库系统的特点" class="headerlink" title="1.1.3数据库系统的特点"></a>1.1.3数据库系统的特点</h3><ul><li>数据结构化<ul><li>数据的整体结构化是数据库的主要特征之一    </li><li>整体结构化<ul><li>不再仅仅针对某一个应用，而是面向全组织</li><li>不仅数据内部结构化，整体是结构化的，数据之间具有联系</li><li>数据记录可以变长</li><li>数据的最小存取单位是数据项</li></ul></li></ul></li><li>数据的共享性高，冗余度低且易扩充<ul><li>减少数据冗余，节约存储空间</li><li>避免数据之间的不相容性与不一致性 </li><li>使系统易于扩充</li></ul></li><li>数据独立性高<ul><li>&#x3D;&#x3D;物理独立性&#x3D;&#x3D;<ul><li>指用户的应用程序与数据库中数据的物理存储是相互独立的。当数据的物理存储改变了，应用程序不用改变。</li></ul></li><li>&#x3D;&#x3D;逻辑独立性&#x3D;&#x3D;<ul><li>指用户的应用程序与数据库的逻辑结构是相互独立的。数据的逻辑结构改变了，应用程序不用改变。</li></ul></li><li>数据独立性由数据库管理系统的二级映像功能来保证。</li></ul></li><li>数据由数据库管理系统统一管理和控制<ol><li><code>数据的安全性（Security）保护</code><ul><li>保护数据以防止不合法的使用造成的数据的泄密和破坏。</li></ul></li><li><code>数据的完整性（Integrity）检查</code><ul><li>保证数据的正确性、有效性和相容性。</li></ul></li><li><code>并发（Concurrency）控制</code><ul><li>对多用户的并发操作加以控制和协调，防止相互干扰而得到错误的结果。</li></ul></li><li><code>数据库恢复（Recovery）</code><ul><li>将数据库从错误状态恢复到某一已知的正确状态。</li></ul></li></ol></li></ul><h2 id="1-2-数据模型"><a href="#1-2-数据模型" class="headerlink" title="1.2 数据模型"></a>1.2 数据模型</h2><ul><li>数据模型是对现实世界数据特征的抽象。</li><li>通俗地讲数据模型就是[现实世界的模拟]{.dot]。</li><li>数据模型应满足三方面要求<ul><li>能比较真实地模拟现实世界</li><li>容易为人所理解</li><li>便于在计算机上实现</li><li>数据模型是数据库系统的<code>核心和基础</code></li></ul></li></ul><h3 id="1-2-1-两类数据模型"><a href="#1-2-1-两类数据模型" class="headerlink" title="1.2.1 两类数据模型"></a>1.2.1 两类数据模型</h3><ol><li>&#x3D;&#x3D;概念模型&#x3D;&#x3D;：也称&#x3D;&#x3D;信息模型&#x3D;&#x3D;，它是按用户的观点来对数据和信息建模，用于数据库设计。 </li><li>&#x3D;&#x3D;逻辑模型和物理模型&#x3D;&#x3D;<ul><li>&#x3D;&#x3D;逻辑模型&#x3D;&#x3D;主要包括[网状模型、层次模型、关系模型、面向对象数据模型、对象关系数据模型、半结构化数据模型等]{.wavy}。按计算机系统的观点对数据建模，用于<code>DBMS</code>实现。</li><li>&#x3D;&#x3D;物理模型&#x3D;&#x3D;是对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法，在磁盘或磁带上的存储方式和存取方法。</li></ul></li></ol><ul><li>客观对象的抽象过程—两步抽象<ul><li>现实世界中的客观对象抽象为概念模型；<ul><li>将现实世界抽象为信息世界</li></ul></li><li>把概念模型转换为某一数据库管理系统支持的数据模型。<ul><li>将信息世界转换为机器世界<br>  <img src="https://z3.ax1x.com/2021/09/11/hxNTiD.png" alt="现实世界中客观对象的抽象过程"></li></ul></li></ul></li></ul><h3 id="1-2-2-概念模型"><a href="#1-2-2-概念模型" class="headerlink" title="1.2.2 概念模型"></a>1.2.2 概念模型</h3><ul><li>概念模型的用途<ul><li>概念模型用于信息世界的建模</li><li>是现实世界到机器世界的一个中间层次</li><li>是数据库设计的有力工具</li><li>数据库设计人员和用户之间进行交流的语言</li></ul></li><li>对概念模型的基本要求<ul><li>较强的语义表达能力</li><li>简单、清晰、易于用户理解</li></ul></li></ul><ol><li>信息世界中的基本概念</li><li>概念模型的一种表示方法：实体-联系方法<ul><li>&#x3D;&#x3D;实体（Entity）&#x3D;&#x3D;<ul><li>客观存在并可相互区别的事物称为实体。可以是具体的人、事、物或抽象的概念。</li></ul></li><li>&#x3D;&#x3D;属性（Attribute）&#x3D;&#x3D;<ul><li>实体所具有的某一特性称为属性。</li><li>一个实体可以由若干个属性来刻画。</li></ul></li><li>&#x3D;&#x3D;码（Key）&#x3D;&#x3D;<ul><li>唯一标识实体的属性集称为码。</li></ul></li><li>&#x3D;&#x3D;实体型（Entity Type）&#x3D;&#x3D; <ul><li>用实体名及其属性名集合来抽象和刻画同类实体称为<code>实体型</code></li></ul></li><li>&#x3D;&#x3D;实体集（Entity Set）&#x3D;&#x3D;<ul><li>同一类型实体的集合称为实体集</li></ul></li><li>&#x3D;&#x3D;联系（Relationship）&#x3D;&#x3D;  <ul><li>现实世界中事物内部以及事物之间的联系在信息世界中反映为实体（型）内部的联系和实体（型）之间的联系。</li><li>实体内部的联系通常是指组成实体的各属性之间的联系</li><li>实体之间的联系通常是指不同实体集之间的联系</li><li>实体之间的联系有一对一、一对多和多对多等多种类型</li></ul></li></ul></li></ol><ul><li>&#x3D;&#x3D;实体-联系方法（Entity-Relationship Approach）&#x3D;&#x3D;<ul><li>用E-R图来描述现实世界的概念模型</li><li>E-R方法也称为<code>E-R模型</code></li></ul></li></ul><h3 id="1-2-3-数据模型的组成要素"><a href="#1-2-3-数据模型的组成要素" class="headerlink" title="1.2.3 数据模型的组成要素"></a>1.2.3 数据模型的组成要素</h3><ul><li><p>数据结构 </p><ul><li>数据模型的数据结构<ul><li>描述数据库的组成对象，以及对象之间的联系</li></ul></li><li>描述的内容<ul><li>与对象的类型、内容、性质有关</li><li>与数据之间联系有关</li></ul></li><li>数据结构是对系统<code>静态特性</code>的描述</li></ul></li><li><p>数据操作 </p><ul><li>对数据库中各种对象（型）的实例（值）允许执行的操作的集合，包括操作及有关的操作规则</li><li>数据操作的类型<ul><li>查询</li><li>更新（包括插入、删除、修改）</li></ul></li><li>数据模型对操作的定义<ul><li>操作的确切含义</li><li>操作符号</li><li>操作规则（如优先级）</li><li>实现操作的语言</li></ul></li><li>数据操作是对系统<code>动态特性</code>的描述</li></ul></li><li><p>数据的完整性约束条件</p><ul><li>一组完整性规则的集合</li><li>完整性规则：给定的数据模型中数据及其联系所具有的制约和依存规则</li><li>用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效和相容</li><li>数据模型对完整性约束条件的定义<ul><li>反映和规定必须遵守的基本的通用的完整性约束条件。</li><li>提供定义完整性约束条件的机制，以反映具体应用所涉及的数据必须遵守的特定的语义约束条件。</li></ul></li></ul></li></ul><h3 id="1-2-4-常用的数据模型"><a href="#1-2-4-常用的数据模型" class="headerlink" title="1.2.4 常用的数据模型"></a>1.2.4 常用的数据模型</h3><ul><li>&#x3D;&#x3D;层次模型（Hierarchical Model）&#x3D;&#x3D;</li><li>&#x3D;&#x3D;网状模型（Network Model）&#x3D;&#x3D;</li><li>&#x3D;&#x3D;关系模型（Relational Model)）&#x3D;&#x3D;</li><li>&#x3D;&#x3D;面向对象数据模型（Object Oriented Data Model）&#x3D;&#x3D;</li><li>&#x3D;&#x3D;对象关系数据模型（Object Relational Data Model）&#x3D;&#x3D;</li><li>&#x3D;&#x3D;半结构化数据模型（Semistruture Data Model）&#x3D;&#x3D;</li></ul><h3 id="1-2-5-层次模型"><a href="#1-2-5-层次模型" class="headerlink" title="1.2.5  层次模型"></a>1.2.5  层次模型</h3><ul><li>层次模型是数据库系统中[最早]{.dot}出现的数据模型 </li><li>层次数据库系统的典型代表是<code>IBM</code>公司的IMS（Information Management System）数据库管理系统</li><li>层次模型用[树形结构]{.dot}来表示各类实体以及实体间的联系  </li><li>满足下面两个条件的基本层次联系的集合为层次模型<ol><li>有且只有一个结点没有<code>双亲结点</code>，这个结点称为<code>根结点</code></li><li>根以外的其它结点有且只有一个<code>双亲结点</code><br>  ![一个层次模型的示例]{<a href="https://z3.ax1x.com/2021/09/11/hxaqbt.png%7D">https://z3.ax1x.com/2021/09/11/hxaqbt.png}</a></li></ol></li><li>层次模型的特点：<ul><li>结点的双亲是[唯一]{.dot}的</li><li>只能直接处理++一对多++的实体联系</li><li>每个记录类型可以定义一个排序字段，也称为码字段</li><li>任何记录值只有按其路径查看时，才能显出它的全部意义</li><li>没有一个子女记录值能够脱离双亲记录值而独立存在</li></ul></li><li>层次模型的数据操纵<ul><li>查询</li><li>插入</li><li>删除</li><li>更新</li></ul></li><li>层次模型的完整性约束条件 <ul><li>无相应的双亲结点值就不能插入子女结点值</li><li>如果删除双亲结点值，则相应的子女结点值也被同时删除</li><li>更新操作时，应更新所有相应记录，以保证数据的一致性</li></ul></li><li>优点<ul><li>层次模型的数据结构比较简单清晰 </li><li>查询效率高，性能优于关系模型，不低于网状模型</li><li>层次数据模型提供了良好的完整性支持</li></ul></li><li>缺点<ul><li>结点之间的多对多联系表示不自然</li><li>对插入和删除操作的限制多，应用程序的编写比较复杂 </li><li>查询子女结点必须通过双亲结点</li><li>层次命令趋于程序化</li></ul></li></ul><h3 id="1-2-6-网状模型"><a href="#1-2-6-网状模型" class="headerlink" title="1.2.6  网状模型"></a>1.2.6  网状模型</h3><ul><li>网状数据库系统采用网状模型作为数据的组织方式 </li><li>典型代表是<code>DBTG</code>系统：<ul><li>亦称<code>CODASYL</code>系统</li><li>20世纪70年代由<code>DBTG</code>提出的一个系统方案</li></ul></li><li>实际系统<ul><li><code>Cullinet  Software</code>公司的 <code>IDMS</code></li><li><code>Univac</code>公司的 <code>DMS1100</code></li><li><code>Honeywell</code>公司的<code>IDS/2</code></li><li><code>HP</code>公司的<code>IMAGE</code></li></ul></li><li>满足下面两个条件的基本层次联系的集合：<ol><li>允许一个以上的结点无双亲；</li><li>一个结点可以有多于一个的双亲。</li></ol></li><li>表示方法（与层次数据模型相同）<ul><li>&#x3D;&#x3D;实体型&#x3D;&#x3D;：<ul><li>用记录类型描述</li><li>每个结点表示一个记录类型（实体）</li></ul></li><li>&#x3D;&#x3D;属性&#x3D;&#x3D;：<ul><li>用字段描述</li><li>每个记录类型可包含若干个字段</li></ul></li><li>&#x3D;&#x3D;联系&#x3D;&#x3D;：<ul><li>用结点之间的连线表示记录类型（实体）之间的[一对多的父子联系]{.dot}</li></ul></li></ul></li><li>网状模型与层次模型的区别<ul><li>网状模型允许多个结点没有双亲结点</li><li>网状模型允许结点有多个双亲结点</li><li>网状模型允许两个结点之间有多种联系（复合联系）</li><li>网状模型可以更直接地描述现实世界</li><li>层次模型实际上是网状模型的一个特例</li></ul></li><li>网状模型中子女结点与双亲结点的联系可以不唯一</li><li>多对多联系在网状模型中的表示<ul><li>用网状模型间接表示多对多联系</li><li>方法：将多对多联系直接分解成一对多联系</li></ul></li><li>&#x3D;&#x3D;网状数据库系统（如DBTG）&#x3D;&#x3D;对数据操纵加<br> 了一些限制，提供了一定的完整性约束<ul><li>码：唯一标识记录的数据项的集合 </li><li>一个联系中双亲记录与子女记录之间是一对多联系</li><li>支持双亲记录和子女记录之间某些约束条件</li></ul></li><li>优点<ul><li>能够更为直接地描述现实世界，如一个结点可以有多个双亲</li><li>具有良好的性能，存取效率较高</li></ul></li><li>缺点<ul><li>结构比较复杂，而且随着应用环境的扩大，数据库的结构就变得越来越复杂，不利于最终用户掌握</li><li><code>DDL、DML</code>语言复杂，用户不容易使用</li><li>记录之间联系是通过存取路径实现的，用户必须了解系统结构的细节</li></ul></li></ul><h3 id="1-2-7-关系模型"><a href="#1-2-7-关系模型" class="headerlink" title="1.2.7  关系模型"></a>1.2.7  关系模型</h3><ul><li>关系数据库系统采用关系模型作为数据的组织方式 </li><li>1970年美国<code>IBM</code>公司<code>San Jose</code>研究室的研究员<code>E.F.Codd</code>首次提出了数据库系统的关系模型 </li><li>计算机厂商新推出的数据库管理系统几乎都支持关系模型 </li><li>关系模型的数据结构<ul><li><code>关系（Relation）</code><ul><li>一个关系对应通常说的<code>一张表</code></li></ul></li><li><code>元组（Tuple）</code><ul><li><code>表中的一行</code>即为一个元组</li></ul></li><li><code>属性（Attribute）</code><ul><li><code>表中的一列</code>即为一个属性，给每一个属性起一个名称即属性名</li></ul></li><li><code>主码（Key）</code><ul><li>也称<code>码键</code>。表中的某个属性组，它可以唯一确定一个元组</li></ul></li><li><code>域（Domain）</code><ul><li>是一组具有相同数据类型的值的集合。属性的取值范围来自某个域。</li></ul></li><li><code>分量</code><ul><li>元组中的一个属性值。</li></ul></li><li><code>关系模式</code><ul><li>对关系的描述<br>  关系名（属性1，属性2，…，属性n）<br>  学生（学号，姓名，年龄，性别，系名，年级）</li></ul></li><li>关系必须是规范化的，满足一定的规范条件</li><li>最基本的规范条件：关系的每一个分量必须是一个不可分的数据项，不允许表中还有表</li></ul></li><li>关系模型的操纵与完整性约束<ul><li>数据操作是集合操作，操作对象和操作结果都是关系<ul><li>查询</li><li>插入</li><li>删除</li><li>更新</li></ul></li><li>存取路径对用户隐蔽，用户只要指出“干什么”，不必详细说明“怎么干”</li><li>关系的完整性约束条件 <ul><li>实体完整性</li><li>参照完整性</li><li>用户定义的完整性</li></ul></li></ul></li><li>优点<ul><li>建立在严格的数学概念的基础上</li><li>概念单一<ul><li>实体和各类联系都用关系来表示</li><li>对数据的检索结果也是关系</li></ul></li><li>关系模型的存取路径对用户透明<ul><li>具有更高的数据独立性，更好的安全保密性</li><li>简化了程序员的工作和数据库开发建立的工作</li></ul></li></ul></li><li>缺点<ul><li>存取路径对用户透明，查询效率往往不如格式化数据模型</li><li>为提高性能，必须对用户的查询请求进行优化，增加了开发数据库管理系统的难度</li></ul></li></ul><h2 id="1-3-数据库系统的结构"><a href="#1-3-数据库系统的结构" class="headerlink" title="1.3 数据库系统的结构"></a>1.3 数据库系统的结构</h2><ul><li>从[数据库应用开发人员角度]{.dot}看，数据库系统通常采用三级模式结构，是数据库系统内部的系统结构 </li><li>从[数据库最终用户角度]{.dot}看，数据库系统的结构分为：<ul><li>单用户结构</li><li>主从式结构</li><li>分布式结构</li><li>客户-服务器</li><li>浏览器-应用服务器／数据库服务器多层结构等</li></ul></li></ul><h3 id="1-3-1-数据库系统模式的概念"><a href="#1-3-1-数据库系统模式的概念" class="headerlink" title="1.3.1  数据库系统模式的概念"></a>1.3.1  数据库系统模式的概念</h3><ul><li>“型” 和“值” 的概念<ul><li><code>型（Type）</code><ul><li>对某一类数据的结构和属性的说明</li></ul></li><li><code>值（Value）</code><ul><li>是型的一个具体赋值</li></ul></li></ul></li><li><code>模式（Schema）</code><ul><li>数据库逻辑结构和特征的描述</li><li>是型的描述，不涉及具体值</li><li>反映的是数据的结构及其联系</li><li>模式是相对稳定的</li></ul></li><li><code>实例（Instance）</code><ul><li>模式的一个具体值</li><li>反映数据库某一时刻的状态</li><li>同一个模式可以有很多实例</li><li>实例随数据库中的数据的更新而变动</li></ul></li></ul><h3 id="1-3-2-数据库系统的三级模式结构"><a href="#1-3-2-数据库系统的三级模式结构" class="headerlink" title="1.3.2  数据库系统的三级模式结构"></a>1.3.2  数据库系统的三级模式结构</h3><ul><li><code>模式（Schema）</code><ul><li>模式（也称<code>逻辑模式</code>）<ul><li>数据库中全体数据的逻辑结构和特征的描述</li><li>所有用户的公共数据视图</li></ul></li><li>[一个数据库只有一个模式]{.dot}</li><li>模式的地位：是数据库系统模式结构的中间层<ul><li>与数据的物理存储细节和硬件环境无关</li><li>与具体的应用程序、开发工具及高级程序设计语言无关</li></ul></li><li>模式的定义<ul><li>数据的逻辑结构（数据项的名字、类型、取值范围等）</li><li>数据之间的联系</li><li>数据有关的安全性、完整性要求</li></ul></li></ul></li><li><code>外模式（External Schema）</code><ul><li>外模式（也称<code>子模式或用户模式</code>）<ul><li>数据库用户（包括应用程序员和最终用户）使用的局部数据的逻辑结构和特征的描述</li><li>数据库用户的数据视图，是与某一应用有关的数据的逻辑表示</li></ul></li><li>外模式的地位：介于模式与应用之间<ul><li>模式与外模式的关系：<code>一对多</code><ul><li>++外模式通常是模式的子集++</li><li>++一个数据库可以有多个外模式++。反映了不同的用户的应用需求、看待数据的方式、对数据保密的要求</li><li>对模式中同一数据，在外模式中的结构、类型、长度、保密级别等都可以不同</li></ul></li><li>外模式与应用的关系：<code>一对多</code><ul><li>同一外模式也可以为某一用户的多个应用系统所使用</li><li>但[一个应用程序只能使用一个外模式]{.wavy}</li></ul></li></ul></li><li>外模式的用途<ul><li>保证数据库安全性的一个有力措施</li><li>每个用户只能看见和访问所对应的外模式中的数据</li></ul></li></ul></li><li><code>内模式（Internal Schema） </code><ul><li>内模式（也称<code>存储模式</code>）<ul><li>是数据物理结构和存储方式的描述</li><li>是数据在数据库内部的表示方式<ul><li>记录的存储方式（例如，顺序存储，按照B树结构存储，按hash方法存储等）</li><li>索引的组织方式</li><li>数据是否压缩存储</li><li>数据是否加密</li><li>数据存储记录结构的规定</li></ul></li></ul></li><li>&#x3D;&#x3D;一个数据库只有一个内模式&#x3D;&#x3D;<br><img src="https://z3.ax1x.com/2021/09/11/hxDGmd.png" alt=" 数据库系统的三级模式结构 "></li></ul></li></ul><h3 id="1-3-3-数据库的二级映像功能与数据独立性"><a href="#1-3-3-数据库的二级映像功能与数据独立性" class="headerlink" title="1.3.3  数据库的二级映像功能与数据独立性"></a>1.3.3  数据库的二级映像功能与数据独立性</h3><ul><li><p>三级模式是对数据的三个抽象级别</p></li><li><p>二级映象在数据库管理系统内部实现这三个抽象层次的联系和转换</p><ul><li>外模式／模式映像<ul><li>模式：描述的是数据的全局逻辑结构</li><li>外模式：描述的是数据的局部逻辑结构 </li><li>同一个模式可以有任意多个外模式 </li><li>每一个外模式，数据库系统都有一个外模式／模式映象，定义外模式与模式之间的对应关系</li><li>映象定义通常包含在各自外模式的描述中</li><li>保证数据的逻辑独立性<ul><li>当模式改变时，数据库管理员对外模式／模式映象作相应改变，使外模式保持不变</li><li>应用程序是依据数据的外模式编写的，应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性</li></ul></li></ul></li><li>模式／内模式映像 <ul><li>模式／内模式映象定义了数据全局逻辑结构与存储结构之间的对应关系。<ul><li>例如，说明逻辑记录和字段在内部是如何表示的</li></ul></li><li>数据库中模式／内模式映象是唯一的</li><li>该映象定义通常包含在模式描述中</li><li>保证数据的物理独立性<ul><li>当数据库的存储结构改变了（例如选用了另一种存储结构），数据库管理员修改模式／内模式映象，使模式保持不变。</li><li>应用程序不受影响。保证了数据与程序的物理独立性，简称数据的物理独立性。</li></ul></li><li>数据库模式<ul><li>即全局逻辑结构是数据库的中心与关键 </li><li>独立于数据库的其他层次 </li><li>设计数据库模式结构时应首先确定数据库的逻辑模式</li></ul></li></ul></li><li>数据库的内模式<ul><li>依赖于它的全局逻辑结构</li><li>独立于数据库的用户视图，即外模式</li><li>独立于具体的存储设备  </li><li>将全局逻辑结构中所定义的数据结构及其联系按照一定的物理存储策略进行组织，以达到较好的时间与空间效率</li></ul></li><li>数据库的外模式<ul><li>面向具体的应用程序</li><li>定义在逻辑模式之上</li><li>独立于存储模式和存储设备</li><li>当应用需求发生较大变化，相应外模式不能满足其视图要求时，该外模式就得做相应改动 </li><li>设计外模式时应充分考虑到应用的扩充性</li></ul></li><li>特定的应用程序<ul><li>在外模式描述的数据结构上编制的</li><li>依赖于特定的外模式</li><li>与数据库的模式和存储结构独立</li><li>不同的应用程序有时可以共用同一个外模式</li></ul></li><li>数据库的二级映像<ul><li>保证了数据库外模式的稳定性</li><li>从底层保证了应用程序的稳定性，除非应用需求本身发生变化，否则应用程序一般不需要修改</li></ul></li><li>数据与程序之间的独立性，使得数据的定义和描述可以从应用程序中分离出去 </li><li>数据的存取由数据库管理系统管理<ul><li>简化了应用程序的编制</li><li>大大减少了应用程序的维护和修改</li></ul></li></ul></li></ul><h2 id="1-4-数据库系统的组成"><a href="#1-4-数据库系统的组成" class="headerlink" title="1.4 数据库系统的组成"></a>1.4 数据库系统的组成</h2><ul><li><p>数据库</p></li><li><p>数据库管理系统（及其开发工具）</p></li><li><p>应用程序</p></li><li><p>数据库管理员</p></li><li><p>硬件平台及数据库 </p><ul><li>数据库系统对硬件资源的要求<ul><li>足够大的内存</li><li>足够的大的磁盘或磁盘阵列等设备</li><li>较高的通道能力，提高数据传送率</li></ul></li></ul></li><li><p>软件 </p><ul><li>数据库管理系统</li><li>支持数据库管理系统运行的操作系统</li><li>与数据库接口的高级语言及其编译系统</li><li>以数据库管理系统为核心的应用开发工具</li><li>为特定应用环境开发的数据库应用系统</li></ul></li><li><p>人员 </p><ul><li>数据库管理员(DBA)<ul><li>具体职责： <ol><li>决定数据库中的信息内容和结构</li><li>决定数据库的存储结构和存取策略</li><li>定义数据的安全性要求和完整性约束条件</li><li>监控数据库的使用和运行<ul><li>周期性转储数据库<ul><li>数据文件</li><li>日志文件</li></ul></li><li>系统故障恢复</li><li>介质故障恢复</li><li></li></ul></li><li>数据库的改进和重组<ul><li>性能监控和调优</li><li>定期对数据库进行重组织，以提高系统的性能 </li><li>需求增加和改变时，数据库须需要重构造</li></ul></li></ol></li></ul></li><li>系统分析员和数据库设计人员<ul><li>系统分析员 <ul><li>负责应用系统的需求分析和规范说明</li><li>与用户及数据库管理员结合，确定系统的硬软件配置</li><li>参与数据库系统的概要设计</li></ul></li><li>数据库设计人员<ul><li>参加用户需求调查和系统分析</li><li>确定数据库中的数据</li><li>设计数据库各级模式</li></ul></li></ul></li><li>应用程序员<ul><li>设计和编写应用系统的程序模块</li><li>进行调试和安装</li></ul></li><li>最终用户<ul><li>用户是指最终用户（End User）。最终用户通过应用系统的用户接口使用数据库。</li></ul><ol><li>偶然用户<ul><li>不经常访问数据库，但每次访问数据库时往往需要不同的数据库信息 </li><li>企业或组织机构的高中级管理人员</li></ul></li><li>简单用户<ul><li>主要工作是查询和更新数据库 </li><li>银行的职员、机票预定人员、旅馆总台服务员</li></ul></li><li>复杂用户<ul><li>工程师、科学家、经济学家、科技工作者等</li><li>直接使用数据库语言访问数据库，甚至能够基于数据库管理系统的应用程序接口编制自己的应用程序</li></ul></li></ol></li></ul><p>  <img src="https://z3.ax1x.com/2021/09/11/hx4nAS.png" alt="各种人员的数据视图 "></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 数据库原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter01-概述</title>
      <link href="/2021/08/30/study/network/chapter01/"/>
      <url>/2021/08/30/study/network/chapter01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Chapter01-计算机网络概述"><a href="#Chapter01-计算机网络概述" class="headerlink" title="Chapter01-计算机网络概述"></a>Chapter01-计算机网络概述</h1><h2 id="1-1-计算机网络在信息时代的作用"><a href="#1-1-计算机网络在信息时代的作用" class="headerlink" title="1.1 计算机网络在信息时代的作用"></a>1.1 计算机网络在信息时代的作用</h2><h2 id="1-2-互联网概述"><a href="#1-2-互联网概述" class="headerlink" title="1.2 互联网概述"></a>1.2 互联网概述</h2><h3 id="1-2-1-网络的网络"><a href="#1-2-1-网络的网络" class="headerlink" title="1.2.1 网络的网络"></a>1.2.1 网络的网络</h3><h3 id="1-2-2-互联网基础结构发展的三个阶段"><a href="#1-2-2-互联网基础结构发展的三个阶段" class="headerlink" title="1.2.2 互联网基础结构发展的三个阶段"></a>1.2.2 互联网基础结构发展的三个阶段</h3><h3 id="1-2-3-互联网的标准化工作"><a href="#1-2-3-互联网的标准化工作" class="headerlink" title="1.2.3 互联网的标准化工作"></a>1.2.3 互联网的标准化工作</h3><h2 id="1-3-互联网的组成"><a href="#1-3-互联网的组成" class="headerlink" title="1.3 互联网的组成"></a>1.3 互联网的组成</h2><h3 id="1-3-1-互联网的边缘部分"><a href="#1-3-1-互联网的边缘部分" class="headerlink" title="1.3.1 互联网的边缘部分"></a>1.3.1 互联网的边缘部分</h3><h3 id="1-3-2-互联网的核心部分"><a href="#1-3-2-互联网的核心部分" class="headerlink" title="1.3.2 互联网的核心部分"></a>1.3.2 互联网的核心部分</h3><h2 id="1-4-计算机网络在我国的发展"><a href="#1-4-计算机网络在我国的发展" class="headerlink" title="1.4 计算机网络在我国的发展"></a>1.4 计算机网络在我国的发展</h2>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown文档基本语法</title>
      <link href="/2021/08/29/life/markdown/"/>
      <url>/2021/08/29/life/markdown/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MarkDown文档基本语法"><a href="#MarkDown文档基本语法" class="headerlink" title="MarkDown文档基本语法"></a>MarkDown文档基本语法</h1><p>@[toc]</p><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p><strong>“#”表示标题，几个“#”代表几级标题，最多六级：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line"></span><br><span class="line">## 二级标题</span><br><span class="line"></span><br><span class="line">### 三级标题</span><br><span class="line"></span><br><span class="line">#### 四级标题</span><br><span class="line"></span><br><span class="line">##### 五级标题</span><br><span class="line"></span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201214165636751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="标题效果图"></p><h2 id="二、-字体"><a href="#二、-字体" class="headerlink" title="二、 字体"></a>二、 字体</h2><p><strong>由“*”和“_”来控制字体</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">**粗体**</span><br><span class="line">__粗体__</span><br><span class="line"></span><br><span class="line">*斜体*</span><br><span class="line">_斜体_</span><br><span class="line"></span><br><span class="line">***斜体加粗***</span><br><span class="line">___斜体加粗___</span><br><span class="line"></span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201214172259709.png#pic_center" alt="字体效果图"></p><h2 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h2><h4 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1.无序列表"></a>1.无序列表</h4><ul><li>语法格式：<code>*空格</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">无序列表</span><br><span class="line">* 第一</span><br><span class="line">* 第二</span><br><span class="line">* 第三</span><br><span class="line">* 第四</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201214173533107.png#pic_center" alt="无序列表"></p><h4 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2.有序列表"></a>2.有序列表</h4><ul><li>语法格式：<code>数字.空格</code> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">有序列表</span><br><span class="line"><span class="number">1.</span> 第一</span><br><span class="line"><span class="number">2.</span> 第二</span><br><span class="line"><span class="number">3.</span> 第三</span><br><span class="line"><span class="number">4.</span> 第四</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20201214174138883.png#pic_center" alt="有序列表"></li></ul><h4 id="3-列表嵌套"><a href="#3-列表嵌套" class="headerlink" title="3.列表嵌套"></a>3.列表嵌套</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">列表嵌套</span><br><span class="line"><span class="number">1.</span> 第一项：</span><br><span class="line">    - <span class="number">1.1</span></span><br><span class="line">    - <span class="number">1.2</span></span><br><span class="line">    - <span class="number">1.3</span></span><br><span class="line"><span class="number">2.</span> 第二项：</span><br><span class="line">    - <span class="number">2.1</span></span><br><span class="line">    - <span class="number">2.2</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201214191838670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><ul><li>语法格式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">_ _ _</span><br><span class="line">***</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/20201214180651652.png#pic_center" alt="分割线"></p><h2 id="五、-引用"><a href="#五、-引用" class="headerlink" title="五、 引用"></a>五、 引用</h2><ul><li>语法格式：<code>&gt;空格</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用内容<span class="number">1</span></span><br><span class="line">   &gt; 引用内容<span class="number">2</span></span><br><span class="line">   &gt; 引用内容<span class="number">3</span></span><br><span class="line">   &gt;</span><br><span class="line">   &gt; 引用内容<span class="number">4</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20201214181327621.png#pic_center" alt="引用"></li><li>引用嵌套</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用内容<span class="number">1</span></span><br><span class="line">&gt;&gt; 引用内容<span class="number">1.1</span></span><br><span class="line">&gt;&gt;&gt; 引用内容<span class="number">1.1</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201214181533648.png#pic_center" alt="在这里插入图片描述"></p><h2 id="六、-图片"><a href="#六、-图片" class="headerlink" title="六、 图片"></a>六、 图片</h2><ul><li>语法格式:<code>![图片名称](图片地址路径)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![本地图片](imgs/timg.png)</span><br><span class="line">   </span><br><span class="line">![网络图片](https:<span class="comment">//ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3863286937,1191971247&amp;fm=26&amp;gp=0.jpg)</span></span><br></pre></td></tr></table></figure><h2 id="七、-表格"><a href="#七、-表格" class="headerlink" title="七、 表格"></a>七、 表格</h2><ul><li>语法格式：<br>  - 头部<br>  <code>|xxx|xxx|xxx|xxx|</code><br>  <code>|--|--|--|--|</code><br>  - 内容<br>  <code>|xxx|xxx|xxx|xxx|</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|姓名|年龄|性别|爱好|</span><br><span class="line">|--|--|--|--|</span><br><span class="line">|张三|<span class="number">20</span>|男|看电影|</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201214183926265.png#pic_center" alt="在这里插入图片描述"></p><h2 id="八、-代码块"><a href="#八、-代码块" class="headerlink" title="八、 代码块"></a>八、 代码块</h2><ul><li>多行：用“&#96;&#96;&#96;”包裹代码块<br><img src="https://img-blog.csdnimg.cn/20201214184551734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="多行代码块"></li><li>单行或某个单词<br><img src="https://img-blog.csdnimg.cn/20201214184814841.png#pic_center" alt="单行代码块"></li></ul><h2 id="九、-超链接"><a href="#九、-超链接" class="headerlink" title="九、 超链接"></a>九、 超链接</h2><ul><li>语法格式：<code>[链接名称](链接地址)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[百度](https:<span class="comment">//www.baidu.com/)</span></span><br></pre></td></tr></table></figure><p>效果：<br><a href="https://www.baidu.com/">百度</a></p><h2 id="十、-目录"><a href="#十、-目录" class="headerlink" title="十、 目录"></a>十、 目录</h2><p>自动生成目录</p><ul><li>语法格式：<code>@[toc]</code></li></ul><h2 id="十一、-其他"><a href="#十一、-其他" class="headerlink" title="十一、 其他"></a>十一、 其他</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">上标 ^上标^</span><br><span class="line">下标 ~下标~</span><br><span class="line">脚注^[脚注]</span><br><span class="line">==高亮==</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201214190809568.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java01-JDK安装及环境变量配置</title>
      <link href="/2021/08/17/study/java/java01/"/>
      <url>/2021/08/17/study/java/java01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JDK安装及环境变量配置"><a href="#JDK安装及环境变量配置" class="headerlink" title="JDK安装及环境变量配置"></a>JDK安装及环境变量配置</h1><h4 id="1-找到相应的JDK版本并下载"><a href="#1-找到相应的JDK版本并下载" class="headerlink" title="1.找到相应的JDK版本并下载"></a>1.找到相应的JDK版本并下载</h4><p>   JDK下载地址：<a href="https://www.jdkdownload.com/2020/05/16/jdk%e4%b8%8b%e8%bd%bd/">https://www.jdkdownload.com/2020/05/16/jdk%e4%b8%8b%e8%bd%bd/</a></p><h4 id="2-安装过程"><a href="#2-安装过程" class="headerlink" title="2.安装过程"></a>2.安装过程</h4><p>选择合适的安装目录（记住这个安装目录，后边配置环境变量要用到），其他步骤一直点下一步即可。</p><h4 id="3-环境变量配置"><a href="#3-环境变量配置" class="headerlink" title="3.环境变量配置"></a>3.环境变量配置</h4><ul><li>右击“我的电脑”→属性→高级系统设置→环境变量</li></ul><p><img src="https://img-blog.csdnimg.cn/20201214213213569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70" alt="环境变量1">   </p><ul><li>新建环境变量</li></ul><p><img src="https://img-blog.csdnimg.cn/20201214213644726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">   </p><ul><li>编辑Path环境变量（双击）<br><img src="https://img-blog.csdnimg.cn/20201214213857969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201214214245990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>全部点“确定”退出这些窗口</li></ul><h4 id="4、检查环境是否配置成功"><a href="#4、检查环境是否配置成功" class="headerlink" title="4、检查环境是否配置成功"></a>4、检查环境是否配置成功</h4><ul><li>win+R打开命令窗口，输入cmd后回车打开命令行<br><img src="https://img-blog.csdnimg.cn/20201214214733513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>在命令行中输入java -version,回车若显示jdk版本信息则说明安装成功，如下图：<br><img src="https://img-blog.csdnimg.cn/20201214214936788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE1MjIyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h6 id="至此-环境变量已配置完成，可以在您的电脑上编写Java程序了。"><a href="#至此-环境变量已配置完成，可以在您的电脑上编写Java程序了。" class="headerlink" title="至此,环境变量已配置完成，可以在您的电脑上编写Java程序了。"></a>至此,环境变量已配置完成，可以在您的电脑上编写Java程序了。</h6>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
